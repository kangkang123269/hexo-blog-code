{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"f7881fef88b8fbcde462bc2a91dfa753799a77f9","modified":1690740225185},{"_id":"source/archives/index.md","hash":"2542bd2d0965fbaf7b270d68256e82c87bb6eda9","modified":1690740225185},{"_id":"source/link/index.md","hash":"756fd36b023a6de226e053180384d1791d912d07","modified":1690740225186},{"_id":"source/messageboard/index.md","hash":"97d3237d3e7fadd0ba107570a6278c99a5df2dc0","modified":1690740225186},{"_id":"source/tags/index.md","hash":"1155c8a84f2874279a47e4191c1e7933f68bc5f5","modified":1690740225187},{"_id":"source/categories/index.md","hash":"ad7a0f34871f3417b80bf67bc8bae35dc2421625","modified":1690740225186},{"_id":"source/music/index.md","hash":"d80451813cccba40ed38fa79f7d47dd5b15e714b","modified":1690740225187},{"_id":"source/_posts/Vue3深入/基本概念.md","hash":"270007e2fc826175723cfeb41edf4ece9a0f01a3","modified":1690778610472},{"_id":"source/_posts/V8/核心源码框架图.md","hash":"e3629d772b9c61cde3f91e22ae484514291d50b6","modified":1690741288551},{"_id":"source/_posts/css/css弹窗动画.md","hash":"0909f457a154432635bc61001013fa9fc6093874","modified":1690741439045},{"_id":"source/_posts/Vue3深入/新特性.md","hash":"e2f20b38cc032d1ba0353dfe79c898853ef78e18","modified":1690741833736},{"_id":"source/_posts/html5/生成任意文件.md","hash":"3fbc559c67fad1859ec207e222c1763e1a217c52","modified":1690754474055},{"_id":"source/_posts/docker/docker基础学习.md","hash":"aa1aed3fba2892b3a1c522ebdce1a92267783c0b","modified":1690754495460},{"_id":"source/_posts/html5/实现全屏功能.md","hash":"f5ee58c81dcc691bffceb78c40c27d6ef8e932fc","modified":1690754485915},{"_id":"source/_posts/react/学习react-dnd.md","hash":"a854011c3f6ffedff30cd953ed6e49e7546af66b","modified":1690741350129},{"_id":"source/_posts/skill/js时间操作的应用.md","hash":"67bc5bd17dd9d2c66416206e10328fa3100de5b3","modified":1690741328205},{"_id":"source/_posts/javascript/js实现拖拽.md","hash":"4276b9ffd11e56840bf83916cbd68967fe5be247","modified":1690741368557},{"_id":"source/_posts/skill/一行代码的JavaScript.md","hash":"ba5db5648a3000b71c616d9c4563edded37be3c0","modified":1690741308690},{"_id":"source/_posts/vite/vite中用@别名.md","hash":"09d38f1f6dd05f374e16d85fdbb577f01e8e06f5","modified":1690741268224},{"_id":"source/_posts/vite/初识vite插件.md","hash":"8669f15245e616c18d9396f2e09008d020013a94","modified":1690741217082},{"_id":"source/_posts/vue/在Vue中使用keep-alive.md","hash":"27ac047bec0cb9fc213efbe7e302505297ad09af","modified":1690741193512},{"_id":"source/_posts/vite/手写一个vite-mock-plugin.md","hash":"06b21769e5b42233c115c17f20f333a1fdfeafc0","modified":1690741246514},{"_id":"source/_posts/wepack/webpack一些插件的使用.md","hash":"d8ddd26f5e6a0a6f04dd00dd1e9bc51ddf08efc4","modified":1690741827880},{"_id":"source/_posts/个人随笔/10.28日随笔.md","hash":"9630ed0f4ebdcfff262d10656e1bf1ee9cfb3aa2","modified":1690741550951},{"_id":"source/_posts/前端手写/手写题汇总.md","hash":"a6c040bd1bd566a2d95ba4f2072ad2904895156d","modified":1690741518397},{"_id":"source/_posts/前端笔试/错题集.md","hash":"45fc6c2351e6d1fdda3a753620edeb8b862871ea","modified":1690741533405},{"_id":"source/_posts/实习学习/git rebase合并多次提交记录.md","hash":"53746852c69a57a216a8d20e4d93e4ad8532bd31","modified":1690741504041},{"_id":"source/_posts/实习学习/本地分支落后远程分支.md","hash":"824e9354dbd3c861a056c05336c78b969a02072a","modified":1690741477510},{"_id":"source/_posts/项目实战/原生js回弹问题解决.md","hash":"118996629de54d227b453b81f35464fd0d20820b","modified":1690741457449},{"_id":"themes/butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1690745525290},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1690745525289},{"_id":"themes/butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1690745525290},{"_id":"themes/butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1690751148431},{"_id":"themes/butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1690745525330},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1690745525291},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1690745525291},{"_id":"themes/butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1690745525330},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1690745525291},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1690745525292},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1690745525292},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1690745525292},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1690745525327},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1690745525327},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1690745525328},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1690745525329},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1690745525288},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1690745525289},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1690745525287},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1690745525287},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1690745525287},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1690745525293},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1690745525293},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1690745525293},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1690745525294},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1690745525299},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1690745525302},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1690745525303},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1690745525303},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1690745525331},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1690745525331},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1690745525331},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1690745525332},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1690745525332},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1690745525332},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1690745525333},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1690745525332},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1690745525333},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1690745525333},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1690745525334},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1690745525334},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1690745525334},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1690745525335},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1690745525335},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1690745525335},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1690745525335},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1690745525555},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1690745525555},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1690745525555},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1690745525556},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1690745525556},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1690745525557},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1690745525557},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1690745525557},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1690745525575},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1690745525575},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690745525576},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690745525576},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690745525577},{"_id":"themes/butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690745525578},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690745525579},{"_id":"themes/butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690745525580},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1690745525294},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1690745525294},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1690745525295},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1690745525295},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1690745525295},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1690745525296},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1690745525296},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1690745525296},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1690745525297},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1690745525298},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1690745525297},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1690745525298},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1690745525298},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1690745525299},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1690745525300},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1690745525301},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1690745525300},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1690745525300},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1690745525300},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1690745525301},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1690745525301},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1690745525302},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1690745525302},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1690745525302},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1690745525303},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1690745525306},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1690745525315},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1690745525319},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1690745525319},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1690745525320},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1690745525322},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1690745525324},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1690745525324},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1690745525324},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1690745525325},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1690745525325},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1690745525325},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1690745525325},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1690745525325},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1690745525326},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1690745525326},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1690745525326},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1690745525327},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1690745525326},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1690745525559},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1690745525560},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1690745525560},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1690745525563},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1690745525563},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1690745525564},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1690745525564},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1690745525565},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1690745525565},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1690745525565},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1690745525565},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1690745525565},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1690745525566},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1690745525567},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1690745525566},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1690745525567},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1690745525567},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1690745525567},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1690745525568},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1690745525568},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1690745525568},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1690745525568},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1690745525569},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1690745525569},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1690745525569},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1690745525569},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1690745525570},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1690745525570},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1690745525570},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1690745525571},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1690745525571},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1690745525572},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1690745525572},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1690745525572},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1690745525572},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1690745525573},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1690745525574},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1690745525574},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1690745525575},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690745525579},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690745525579},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1690745525304},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1690745525305},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1690745525306},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1690745525307},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1690745525307},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1690745525307},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1690745525307},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1690745525308},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1690745525308},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1690745525308},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1690745525308},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1690745525309},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1690745525310},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1690745525310},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1690745525310},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1690745525310},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1690745525311},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1690745525311},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1690745525312},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1690745525312},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1690745525312},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1690745525312},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1690745525313},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1690745525313},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1690745525313},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1690745525314},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1690745525314},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1690745525315},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1690745525315},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1690745525315},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1690745525316},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1690745525316},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1690745525316},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1690745525317},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1690745525317},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1690745525317},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1690745525318},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1690745525318},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1690745525318},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1690745525318},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1690745525319},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1690745525319},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1690745525321},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1690745525321},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1690745525321},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1690745525322},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1690745525320},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1690745525320},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1690745525320},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1690745525321},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1690745525560},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1690745525561},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1690745525561},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1690745525561},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1690745525562},{"_id":"public/search.xml","hash":"4885122bbc5b159ed5cfe362f1bbbd80ca6f8b01","modified":1693992998614},{"_id":"public/about/index.html","hash":"3765c3d23653476a2a4dcb783311840f1b184268","modified":1693992998614},{"_id":"public/archives/index.html","hash":"4d392d123b2361811f9c37469d1ec96382afb8db","modified":1693992998614},{"_id":"public/link/index.html","hash":"f6b361898d993a08a7293b1fc75a57e52e678a71","modified":1693992998614},{"_id":"public/categories/index.html","hash":"d51342e8a0dfd8613c4641f9b5e045bf542f853f","modified":1693992998614},{"_id":"public/messageboard/index.html","hash":"0362ebfc92296549b90e4e4e93f900f26434ae58","modified":1693992998614},{"_id":"public/tags/index.html","hash":"9b4237b8ab709390cf74ee5cf56ab07e4165b047","modified":1693992998614},{"_id":"public/music/index.html","hash":"c1db6209bd732c0542c9638f5260dab1bb4c73c6","modified":1693992998614},{"_id":"public/2023/07/31/Vue3深入/基本概念/index.html","hash":"138972e10f4a1f5eecc627e4bb8b2af31fdafe9a","modified":1693992998614},{"_id":"public/2023/01/04/实习学习/本地分支落后远程分支/index.html","hash":"c57acdad0c61c1c1e201170cc766127adde1ef6e","modified":1693992998614},{"_id":"public/2022/12/30/wepack/webpack一些插件的使用/index.html","hash":"a9b66acc99aff99b227308bcf00a047b3e74a455","modified":1693992998614},{"_id":"public/2022/11/02/Vue3深入/新特性/index.html","hash":"b565eb7e8d2173325daf7ec88c0afd48511ac340","modified":1693992998614},{"_id":"public/2022/10/28/个人随笔/10.28日随笔/index.html","hash":"fa90fe6a4d4c73dcfa4a91560cb7609bf7663e1c","modified":1693992998614},{"_id":"public/2022/10/20/前端手写/手写题汇总/index.html","hash":"297182fa4f06e63c87c398cd3bc8f0c16a221d31","modified":1693992998614},{"_id":"public/2022/10/31/项目实战/原生js回弹问题解决/index.html","hash":"3884c9ac942c0b1e05ca76c9606492bb0f799a7d","modified":1693992998614},{"_id":"public/2022/10/18/前端笔试/错题集/index.html","hash":"20821bae35823dc68c8312004186af63b4b8aef3","modified":1693992998614},{"_id":"public/2022/10/14/V8/核心源码框架图/index.html","hash":"c6491f0ae2406fd3cdd7719ce49af5a481842d76","modified":1690753363752},{"_id":"public/2022/08/28/html5/生成任意文件/index.html","hash":"72a45a4c412dc737d4d20d929fdf88f8826cbc54","modified":1693992998614},{"_id":"public/2022/08/01/skill/js时间操作的应用/index.html","hash":"87650cc91a127d2156d7d754561177b672ed78f0","modified":1693992998614},{"_id":"public/2022/07/31/css/css弹窗动画/index.html","hash":"a507b5740ab853ac7541348b2a84c30ad5852163","modified":1693992998614},{"_id":"public/2022/07/31/html5/实现全屏功能/index.html","hash":"50493e3ef515d87ff534703c8b0791c253a8b390","modified":1693992998614},{"_id":"public/2022/07/29/vite/初识vite插件/index.html","hash":"71df4c15c9f236dd1dabfa027774befaa4d2190c","modified":1693992998614},{"_id":"public/2022/07/29/vite/手写一个vite-mock-plugin/index.html","hash":"a6156c180d8d3b92b94a14fd65688fee2b24be10","modified":1690753363752},{"_id":"public/2022/07/28/docker/docker基础学习/index.html","hash":"67533b1e3f14070ee80b17178db63b6af81f8202","modified":1693992998614},{"_id":"public/2022/07/28/javascript/js实现拖拽/index.html","hash":"89588f07e4eb9b66f661ad4ca6859ec7cd439138","modified":1693992998614},{"_id":"public/2022/07/27/react/学习react-dnd/index.html","hash":"96b6b8e76202e9177d92e4eaa17123828c14a839","modified":1690753363752},{"_id":"public/2022/07/27/skill/一行代码的JavaScript/index.html","hash":"26d903040611ed75c6e88ec248d5d5b3a3845603","modified":1693992998614},{"_id":"public/2022/07/27/vue/在Vue中使用keep-alive/index.html","hash":"78387b11e58e1266ae298a858eb381e177a836ec","modified":1690753363752},{"_id":"public/2022/07/26/vite/vite中用@别名/index.html","hash":"1e84278091990c94acf49c3b88379bd9238abdea","modified":1693992998614},{"_id":"public/archives/page/2/index.html","hash":"84293ffbdeb90f3a211ce41b5b51d2a7bbcc2c47","modified":1693992998614},{"_id":"public/archives/page/3/index.html","hash":"3554d676641fdaa28bdbef2a0a6a32e5a5272b83","modified":1693992998614},{"_id":"public/archives/2022/index.html","hash":"62f45368b1f6ea38261e3ee57a71a5f83abe2b8e","modified":1693992998614},{"_id":"public/archives/2022/page/2/index.html","hash":"61d571bf2ac4bd541f1a394308cdcc8f88fed572","modified":1693992998614},{"_id":"public/archives/2022/07/index.html","hash":"6b319cf391463e662eb324d5661a50c534c4ed83","modified":1693992998614},{"_id":"public/archives/2022/08/index.html","hash":"ef3efa0281424374071a9b6c21972d7132e539d3","modified":1693992998614},{"_id":"public/archives/2022/10/index.html","hash":"1e9460ce9e84dfca0885f49462bf5143ff88afd9","modified":1693992998614},{"_id":"public/archives/2022/11/index.html","hash":"ec606f35f4f444723ead0cf4de257eafa8f340a4","modified":1693992998614},{"_id":"public/archives/2022/12/index.html","hash":"01649777d90a97cdaee4a4cd85d8108479261582","modified":1693992998614},{"_id":"public/archives/2023/index.html","hash":"2b7bcd6ec4d79bf1e443959f4120e61af50de1a2","modified":1693992998614},{"_id":"public/archives/2023/01/index.html","hash":"126d30ca2d4719e3b97a51f6bf02b6b7fdf64d99","modified":1693992998614},{"_id":"public/archives/2023/07/index.html","hash":"af61a07d4758f9249b2f93a827dd899b9f13a67c","modified":1693992998614},{"_id":"public/categories/V8/index.html","hash":"242a6022bc97f052eae968b79fe2f8cc707e6be7","modified":1690753395970},{"_id":"public/categories/Vue深入/index.html","hash":"611d2a271e2e95353706abfd98e62781dc9159fd","modified":1693992998614},{"_id":"public/categories/css/index.html","hash":"2b979493b404665a9c29855ed7b45911534ef2e5","modified":1693992998614},{"_id":"public/categories/html/index.html","hash":"8215bff020efd3eadae975973b07c774af09a224","modified":1693992998614},{"_id":"public/categories/docker/index.html","hash":"f1dd9b6da73bae3b98d21dde89dd81667f23d9ef","modified":1693992998614},{"_id":"public/categories/react/index.html","hash":"329a44729fa8acaf6347f88f89f019d3cb34ba7d","modified":1693992998614},{"_id":"public/categories/JavaScript/index.html","hash":"f811a5d2d9b6151562cb86165a43ac0a396710ad","modified":1693992998614},{"_id":"public/categories/Vue3/index.html","hash":"a50608bbef6ce31004e319fe5d4f5063a4adf262","modified":1693992998614},{"_id":"public/categories/前端工程化/index.html","hash":"234907073406687dae1f0b5ffdf57ce352907741","modified":1693992998614},{"_id":"public/categories/心情日记/index.html","hash":"182f1aa3f5ef1e2c107c4812189b88d0772180ee","modified":1693992998614},{"_id":"public/categories/手写汇总/index.html","hash":"e0c93276dbd58a6ee9f22e67ba1b3278d949298f","modified":1693992998614},{"_id":"public/categories/Vue/index.html","hash":"b3a7b21b6e29ec84bfb999d8c6f5e02136298590","modified":1693992998614},{"_id":"public/categories/git/index.html","hash":"36d9f6bde78c84ff410713a73aa44b2f4fcfcc45","modified":1693992998614},{"_id":"public/categories/前端笔试/index.html","hash":"9153b5af14f3f1b00dd529f857f41ac007a92ddb","modified":1693992998614},{"_id":"public/categories/JavaScript/demo/index.html","hash":"766987247c73c9f3b0c8a952e785acf628108468","modified":1693992998614},{"_id":"public/categories/项目实战/index.html","hash":"9282993c1ad918513715d89486ac7e055461fff8","modified":1693992998614},{"_id":"public/tags/前端/index.html","hash":"4e73c89c6ec5b0f6c0fcd48dc8d18df9c8d95e02","modified":1693992998614},{"_id":"public/tags/前端/page/2/index.html","hash":"84abbbe9d5b7495786c7024ab51b585265d6098b","modified":1693992998614},{"_id":"public/tags/V8/index.html","hash":"f68eae3837dca4ac7bed252cffaac58da2ab623b","modified":1690753395970},{"_id":"public/tags/Vue深入/index.html","hash":"dccc19e875fbba8fabd8e17c9e8e3b1e65ae4d62","modified":1693992998614},{"_id":"public/tags/运维/index.html","hash":"1eae05f28da7d7ec45ca0064a3b6f947f73f8fa7","modified":1693992998614},{"_id":"public/tags/react-dnd/index.html","hash":"34c3687bd19757bcff1515d6bc2758a8db0beefc","modified":1693992998614},{"_id":"public/tags/JavaScript/index.html","hash":"f977dc179f46fbb369456891c041577d39fc6fd6","modified":1693992998614},{"_id":"public/tags/skill/index.html","hash":"b1109946a7b15622411fee7d7983695e69ebeeb7","modified":1693992998614},{"_id":"public/tags/项目/index.html","hash":"a9ca4c673305c31224a5fdfe229d592de1c92a5e","modified":1693992998614},{"_id":"public/tags/Vue/index.html","hash":"23e7375798004d44e85de9accc604ada1b239377","modified":1693992998614},{"_id":"public/tags/vite/index.html","hash":"858117cca6ba7da4f810e38e6947ebd171ddc9c1","modified":1693992998614},{"_id":"public/tags/随笔/index.html","hash":"c21e259b6455754980c4c2ec7b4c9e7bff97ea3b","modified":1693992998614},{"_id":"public/tags/手写/index.html","hash":"97fb5cd5cc7cb2971cdb2063ddfb0385c54d1fa7","modified":1693992998614},{"_id":"public/tags/前端性能优化/index.html","hash":"32391db1d12cab959a2f0a208089fdeefe294c98","modified":1693992998614},{"_id":"public/tags/实习学习/index.html","hash":"9a8b583762540fa29acd153f4dd3aea3458050e5","modified":1693992998614},{"_id":"public/tags/错题集/index.html","hash":"681c0bfda82a361c3a25d6574abbcf8a62ab8b37","modified":1693992998614},{"_id":"public/tags/项目实战/index.html","hash":"fe67faf25ff5a56c8a2964793ab7d7834dfc5992","modified":1693992998614},{"_id":"public/page/2/index.html","hash":"b86029e4ae5585020d7db73c0352454ff17daa33","modified":1693992998614},{"_id":"public/page/3/index.html","hash":"57eeac44e48e091bd1f4551343298024e26898df","modified":1693992998614},{"_id":"public/index.html","hash":"5a66c0d45899f9d9495bee7053ef8e3074fd2f18","modified":1693992998614},{"_id":"public/2022/10/28/实习学习/git rebase合并多次提交记录/index.html","hash":"816f1f8540ff0d4bb01302aaa57a2f34b721e3a2","modified":1693992998614},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690753363752},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690753363752},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690753363752},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1690753363752},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1690753363752},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1690753363752},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690753363752},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690753363752},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690753363752},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690753363752},{"_id":"public/css/index.css","hash":"0ba10940f553f42f3fee8cd4d357867742c3f155","modified":1690753363752},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690753363752},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690753363752},{"_id":"source/_posts/vue/keep-alive.md","hash":"27ac047bec0cb9fc213efbe7e302505297ad09af","modified":1690741193512},{"_id":"source/_posts/react/react-dnd.md","hash":"a854011c3f6ffedff30cd953ed6e49e7546af66b","modified":1690741350129},{"_id":"source/_posts/vite/vite-mock-plugin.md","hash":"06b21769e5b42233c115c17f20f333a1fdfeafc0","modified":1690741246514},{"_id":"public/2022/07/29/vite/vite-mock-plugin/index.html","hash":"564e0b9c3d285598d470ece0d33dfb2a63f9bb73","modified":1693992998614},{"_id":"public/2022/07/27/react/react-dnd/index.html","hash":"f79f0960b6ea36372aa45e727380285ef188fed1","modified":1693992998614},{"_id":"public/2022/07/27/vue/keep-alive/index.html","hash":"93af14e7f19b1f9bfa38eb7f34826dc5d77f2940","modified":1693992998614},{"_id":"source/_posts/Vue3深入/框架雏形搭建.md","hash":"40bb3797b708b0dbd8057e7c6f28f81ee091c3f2","modified":1690778616120},{"_id":"public/2023/08/01/Vue3深入/框架雏形搭建/index.html","hash":"5dfe5af9db11f36d0ac4579104cd4da2a48321ea","modified":1693992998614},{"_id":"public/archives/2023/08/index.html","hash":"b37eac3571baf6be9a7bab56d582612c48a2c30c","modified":1693992998614},{"_id":"source/_posts/learn/dom打印PDF方案.md","hash":"1b4660a32e8eca4d5ddb133f0fafb60429739b36","modified":1693969415203},{"_id":"source/_posts/learn/vue3实现水印方案.md","hash":"ac6bc946606a0f5567b0f918be1a1950c68c6cfd","modified":1693973229683},{"_id":"source/_posts/util/console.md","hash":"ff39a07a5e8bd6aebc74c6c9315e7b216c28bd0a","modified":1693993114808},{"_id":"source/_posts/util/image-1.png","hash":"cd11ac3579967c00e9d0a50b0a0d878826c94b06","modified":1693991509404},{"_id":"source/_posts/util/image-10.png","hash":"84558509c4ca0cc939f2d636210d463137b242c4","modified":1693992133164},{"_id":"source/_posts/util/image-3.png","hash":"d7a5edc1d0faa13cca56b480d126ee903befe48c","modified":1693991617803},{"_id":"source/_posts/util/image-4.png","hash":"4c5f2ae635ed1b20554ef3819586439f6fc86604","modified":1693991651579},{"_id":"source/_posts/util/image-5.png","hash":"5a43e0324c53ff3166bbf4280aa0f5ff64b69fd0","modified":1693991728138},{"_id":"source/_posts/util/image-2.png","hash":"7a01bd15b3d6fdc2b9b10bd6cb68333617ee568d","modified":1693991587770},{"_id":"source/_posts/util/image-7.png","hash":"026a0205c935170d22bdefd0421058603c5b4dc0","modified":1693991950782},{"_id":"source/_posts/util/image-6.png","hash":"6c683deb24011842775a582deb193491a172a2f3","modified":1693991807884},{"_id":"source/_posts/util/image-8.png","hash":"0426184ab12a9c89d8d85f885eabaae56f4c7319","modified":1693991978373},{"_id":"source/_posts/util/image-11.png","hash":"a97b5c114bc4860323f5349be1ffbb2114be20d4","modified":1693992294317},{"_id":"source/_posts/vue/nextTick.md","hash":"1deaf2413587bbbf0f466164b3e625317da5f0b1","modified":1693970589977},{"_id":"source/_posts/util/image-9.png","hash":"b8e96fd9c8ab9bddb4d072c446bdf31f0d3b058e","modified":1693992095521},{"_id":"source/_posts/util/image.png","hash":"a332925502f4516ba80ae9aefa9422719c1475b1","modified":1693991343560},{"_id":"public/2023/09/06/learn/dom打印PDF方案/index.html","hash":"79a36d89491a5e60eacc8c41dac51a1f0a1e9214","modified":1693992998614},{"_id":"public/2023/09/06/vue/nextTick/index.html","hash":"c5853dc0214dd6cc99413aa3cca6a37e5a77767e","modified":1693992998614},{"_id":"public/2023/09/06/learn/vue3实现水印方案/index.html","hash":"67ec820c629be87e693b8c4ead98579156083290","modified":1693992998614},{"_id":"public/2023/09/06/util/console/index.html","hash":"4a3ddc8a6eafffabdaef4bd5a248e3dc3aeee581","modified":1693992998614},{"_id":"public/archives/2023/09/index.html","hash":"4d5d2a7eab440d5413cd540f06bfbf87807562b3","modified":1693992998614},{"_id":"public/categories/个人学习/index.html","hash":"2b741c575dff9cd0820d89218643f1172445c5cf","modified":1693992998614},{"_id":"public/categories/vue/index.html","hash":"6450dc8ab94f045d98fb17232512eae9e7e4fcc1","modified":1693992998614},{"_id":"public/tags/个人学习/index.html","hash":"c93e5c448951ce910ea23732302ae292f9d6d2b0","modified":1693992998614},{"_id":"public/tags/vue/index.html","hash":"93fe31b2ecc7f8490f2b15253bbc5aa3770dcf0a","modified":1693992998614}],"Category":[{"name":"V8","_id":"clkpywdln000436l19z09gvzo"},{"name":"Vue深入","_id":"clkpywdls000c36l11yy6dl5a"},{"name":"css","_id":"clkpywdlw000k36l1h2hg6bfx"},{"name":"html","_id":"clkpywdm2000x36l16hk74tv7"},{"name":"docker","_id":"clkpywdm5001536l14uc68lfy"},{"name":"react","_id":"clkpywdm9001i36l10n2hc16h"},{"name":"JavaScript","_id":"clkpywdmd001q36l178m4gm7n"},{"name":"Vue3","_id":"clkpywdmh002336l133lj6z9k"},{"name":"前端工程化","_id":"clkpywdmi002936l16dfoa5ss"},{"name":"心情日记","_id":"clkpywdmj002g36l19chs8a3z"},{"name":"手写汇总","_id":"clkpywdmk002k36l1drn9gw6u"},{"name":"Vue","_id":"clkpywdml002q36l1b0lrb1rr"},{"name":"git","_id":"clkpywdmm002v36l10v9x2s8n"},{"name":"前端笔试","_id":"clkpywdmn003036l18rmebvwr"},{"name":"demo","parent":"clkpywdmd001q36l178m4gm7n","_id":"clkpywdmo003836l1gcvk9uij"},{"name":"项目实战","_id":"clkpywdmp003c36l1a6qhduao"},{"name":"个人学习","_id":"clm75niel0001jxljbu77eapw"},{"name":"vue","_id":"clm76cord0006jxljgvn9e554"},{"name":"util函数","_id":"clm7chtcu000ejxlj8va0fdnu"}],"Data":[],"Page":[{"title":"about","date":"2022-07-26T04:58:18.000Z","type":"about","top_img":"https://cdn.jsdelivr.net/gh/cungudafa/cdn/img/banner/about.jpg","_content":"<!-- https://www.bootcdn.cn/botui/ -->\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui.min.css\" rel=\"stylesheet\">\n\n{% raw %}\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[影风の小屋]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    cungudafa&nbsp;<rp>\n    （</rp>\n    <rt>\n    真（ま）白（しろ）</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<!--<script src=\"https://cungudafa.gitee.io/js/botui.js></script>-->\n<script src=\"/js/third-party/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n{% endraw %}\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-07-26 12:58:18\ntype: about\ntop_img: https://cdn.jsdelivr.net/gh/cungudafa/cdn/img/banner/about.jpg\n---\n<!-- https://www.bootcdn.cn/botui/ -->\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui.min.css\" rel=\"stylesheet\">\n\n{% raw %}\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[影风の小屋]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    cungudafa&nbsp;<rp>\n    （</rp>\n    <rt>\n    真（ま）白（しろ）</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<!--<script src=\"https://cungudafa.gitee.io/js/botui.js></script>-->\n<script src=\"/js/third-party/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n{% endraw %}\n","updated":"2023-07-30T18:03:45.185Z","path":"about/index.html","comments":1,"layout":"page","_id":"clkpywdlb000036l1cx3jfog9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!-- https://www.bootcdn.cn/botui/ -->\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui.min.css\" rel=\"stylesheet\">\n\n\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[影风の小屋]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    cungudafa&nbsp;<rp>\n    （</rp>\n    <rt>\n    真（ま）白（しろ）</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<!--<script src=\"https://cungudafa.gitee.io/js/botui.js></script>-->\n<script src=\"/js/third-party/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<!-- https://www.bootcdn.cn/botui/ -->\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.bootcss.com/botui/0.3.9/botui.min.css\" rel=\"stylesheet\">\n\n\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[影风の小屋]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    cungudafa&nbsp;<rp>\n    （</rp>\n    <rt>\n    真（ま）白（しろ）</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<!--<script src=\"https://cungudafa.gitee.io/js/botui.js></script>-->\n<script src=\"/js/third-party/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n"},{"title":"archives","date":"2022-07-27T07:48:19.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2022-07-27 15:48:19\ntype: archives\n---\n","updated":"2023-07-30T18:03:45.185Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clkpywdll000236l11ha6aqcx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2022-07-26T04:58:07.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-07-26 12:58:07\ntype: link\n---\n","updated":"2023-07-30T18:03:45.186Z","path":"link/index.html","comments":1,"layout":"page","_id":"clkpywdlp000636l1723b3mw4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2022-07-27T07:48:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-07-27 15:48:34\ntype: categories\n---\n","updated":"2023-07-30T18:03:45.186Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clkpywdlq000836l12nza69l8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"messageboard","date":"2022-07-26T05:03:51.000Z","type":"messageboard","_content":"","source":"messageboard/index.md","raw":"---\ntitle: messageboard\ndate: 2022-07-26 13:03:51\ntype: messageboard\n---\n","updated":"2023-07-30T18:03:45.186Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"clkpywdlr000a36l1cavwfyon","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"Tags","date":"2022-07-26T04:52:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2022-07-26 12:52:28\ntype: tags\n---\n","updated":"2023-07-30T18:03:45.187Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clkpywdlt000e36l17me491s9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"music","date":"2022-07-26T04:57:56.000Z","type":"music","_content":"\n\n\n\n\n\n\n","source":"music/index.md","raw":"---\ntitle: music\ndate: 2022-07-26 12:57:56\ntype: music\n---\n\n\n\n\n\n\n\n","updated":"2023-07-30T18:03:45.187Z","path":"music/index.html","comments":1,"layout":"page","_id":"clkpywdlv000h36l1by0ae3ko","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"vue3的一些基本概念","description":"vue3的一些基本概念","date":"2023-07-30T16:00:00.000Z","_content":"\n### 命令式和声明式\n\n- 命令式：**详细描述做事过程**的方式（关注过程）\n- 声明式：**模板语法**（不关注过程，只关注结果）\n\n### 命令式 VS 声明式\n\n1. 性能：命令式高于声明式\n2. 可维护性：命令式比声明式的维护性差\n\n### 企业应用开发与设计原则\n\n1. 项目开发成本（可维护性上对比）\n2. 开发体验（心智负担对比）\n\n### 为什么说框架设计过程其实是一个不断取舍的过程？\n\n1. 命令式的性能 > 声明式的性能\n2. 命令式的可维护性 < 声明式的可维护性\n3. 声明式的框架本质是由命令式的代码去实现的\n4. 企业项目开发过程中，大多使用声明式框架\n\n开发设计原则：Vue 封装了命令式的逻辑，而对外暴露出声明式的接口。可维护性和性能不断取舍的过程。\n\n### Vue 三种状态\n\n1. 编译时：complier\n2. 运行时：runtime\n3. 运行时 + 编译时：runtime + compiler\n\n### 运行时\n\n定义：运行时可以利用`render`把`vnode`渲染成真实`dom`节点\n\n- 渲染函数（render）：用于编程式地创建组件虚拟 dom 树的函数\n\n### 编译时\n\n文件：complier-core\n作用：可以把 HTML 生成 render 函数，之后再运行时 render 函数把 vnode 渲染真实 dom 节点\n\n### vue 的 dom 渲染\n\n1. 初次渲染：挂载\n2. 更新渲染：打补丁（diff 算法）\n   > 测试：console.time('element')、console.timeEnd('element')对比 1 万个 element 的耗时和 1 万个 js 对象耗时，可得知用 diff 算法\n\n### 为什么 vue 要设计成一个运行时+编译时的框架呢？\n\n1. 针对于纯运行时而言：因为不存在编辑器，所以我们只能提供一个复杂的 js 对象。\n2. 针对于纯编译时而言：因为缺少运行时，所以只能把分析差异的操作，放到**编译时**进行，同样因为省略了运行时，所以速度可能更快。但是这样方式将损失灵活性。\n3. 运行时 + 编译时：保持灵活性的基础上，尽量进行性能的优化，从而达到一种平衡。\n\n### 副作用\n\n- 定义：对数据进行 setter（赋值）或者 getter（取值）操作，所产生的一系列后果。\n- 副作用可以产生多个\n\n### 三大模块\n\n1. 响应式：reactivity\n2. 运行时：runtime\n3. 编译器：compiler\n\n### typescript 支持友好真实的原因？\n\n- 内部提供了很多 ts 类型\n\n> 学习链接: https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\n","source":"_posts/Vue3深入/基本概念.md","raw":"---\ntitle: vue3的一些基本概念\ntags: [Vue深入]\ncategories: [Vue深入]\ndescription: vue3的一些基本概念\ndate: 2023-07-31\n---\n\n### 命令式和声明式\n\n- 命令式：**详细描述做事过程**的方式（关注过程）\n- 声明式：**模板语法**（不关注过程，只关注结果）\n\n### 命令式 VS 声明式\n\n1. 性能：命令式高于声明式\n2. 可维护性：命令式比声明式的维护性差\n\n### 企业应用开发与设计原则\n\n1. 项目开发成本（可维护性上对比）\n2. 开发体验（心智负担对比）\n\n### 为什么说框架设计过程其实是一个不断取舍的过程？\n\n1. 命令式的性能 > 声明式的性能\n2. 命令式的可维护性 < 声明式的可维护性\n3. 声明式的框架本质是由命令式的代码去实现的\n4. 企业项目开发过程中，大多使用声明式框架\n\n开发设计原则：Vue 封装了命令式的逻辑，而对外暴露出声明式的接口。可维护性和性能不断取舍的过程。\n\n### Vue 三种状态\n\n1. 编译时：complier\n2. 运行时：runtime\n3. 运行时 + 编译时：runtime + compiler\n\n### 运行时\n\n定义：运行时可以利用`render`把`vnode`渲染成真实`dom`节点\n\n- 渲染函数（render）：用于编程式地创建组件虚拟 dom 树的函数\n\n### 编译时\n\n文件：complier-core\n作用：可以把 HTML 生成 render 函数，之后再运行时 render 函数把 vnode 渲染真实 dom 节点\n\n### vue 的 dom 渲染\n\n1. 初次渲染：挂载\n2. 更新渲染：打补丁（diff 算法）\n   > 测试：console.time('element')、console.timeEnd('element')对比 1 万个 element 的耗时和 1 万个 js 对象耗时，可得知用 diff 算法\n\n### 为什么 vue 要设计成一个运行时+编译时的框架呢？\n\n1. 针对于纯运行时而言：因为不存在编辑器，所以我们只能提供一个复杂的 js 对象。\n2. 针对于纯编译时而言：因为缺少运行时，所以只能把分析差异的操作，放到**编译时**进行，同样因为省略了运行时，所以速度可能更快。但是这样方式将损失灵活性。\n3. 运行时 + 编译时：保持灵活性的基础上，尽量进行性能的优化，从而达到一种平衡。\n\n### 副作用\n\n- 定义：对数据进行 setter（赋值）或者 getter（取值）操作，所产生的一系列后果。\n- 副作用可以产生多个\n\n### 三大模块\n\n1. 响应式：reactivity\n2. 运行时：runtime\n3. 编译器：compiler\n\n### typescript 支持友好真实的原因？\n\n- 内部提供了很多 ts 类型\n\n> 学习链接: https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\n","slug":"Vue3深入/基本概念","published":1,"updated":"2023-07-31T04:43:30.472Z","_id":"clkpywdll000336l158la2h3x","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"命令式和声明式\"><a href=\"#命令式和声明式\" class=\"headerlink\" title=\"命令式和声明式\"></a>命令式和声明式</h3><ul>\n<li>命令式：<strong>详细描述做事过程</strong>的方式（关注过程）</li>\n<li>声明式：<strong>模板语法</strong>（不关注过程，只关注结果）</li>\n</ul>\n<h3 id=\"命令式-VS-声明式\"><a href=\"#命令式-VS-声明式\" class=\"headerlink\" title=\"命令式 VS 声明式\"></a>命令式 VS 声明式</h3><ol>\n<li>性能：命令式高于声明式</li>\n<li>可维护性：命令式比声明式的维护性差</li>\n</ol>\n<h3 id=\"企业应用开发与设计原则\"><a href=\"#企业应用开发与设计原则\" class=\"headerlink\" title=\"企业应用开发与设计原则\"></a>企业应用开发与设计原则</h3><ol>\n<li>项目开发成本（可维护性上对比）</li>\n<li>开发体验（心智负担对比）</li>\n</ol>\n<h3 id=\"为什么说框架设计过程其实是一个不断取舍的过程？\"><a href=\"#为什么说框架设计过程其实是一个不断取舍的过程？\" class=\"headerlink\" title=\"为什么说框架设计过程其实是一个不断取舍的过程？\"></a>为什么说框架设计过程其实是一个不断取舍的过程？</h3><ol>\n<li>命令式的性能 &gt; 声明式的性能</li>\n<li>命令式的可维护性 &lt; 声明式的可维护性</li>\n<li>声明式的框架本质是由命令式的代码去实现的</li>\n<li>企业项目开发过程中，大多使用声明式框架</li>\n</ol>\n<p>开发设计原则：Vue 封装了命令式的逻辑，而对外暴露出声明式的接口。可维护性和性能不断取舍的过程。</p>\n<h3 id=\"Vue-三种状态\"><a href=\"#Vue-三种状态\" class=\"headerlink\" title=\"Vue 三种状态\"></a>Vue 三种状态</h3><ol>\n<li>编译时：complier</li>\n<li>运行时：runtime</li>\n<li>运行时 + 编译时：runtime + compiler</li>\n</ol>\n<h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>定义：运行时可以利用<code>render</code>把<code>vnode</code>渲染成真实<code>dom</code>节点</p>\n<ul>\n<li>渲染函数（render）：用于编程式地创建组件虚拟 dom 树的函数</li>\n</ul>\n<h3 id=\"编译时\"><a href=\"#编译时\" class=\"headerlink\" title=\"编译时\"></a>编译时</h3><p>文件：complier-core<br>作用：可以把 HTML 生成 render 函数，之后再运行时 render 函数把 vnode 渲染真实 dom 节点</p>\n<h3 id=\"vue-的-dom-渲染\"><a href=\"#vue-的-dom-渲染\" class=\"headerlink\" title=\"vue 的 dom 渲染\"></a>vue 的 dom 渲染</h3><ol>\n<li>初次渲染：挂载</li>\n<li>更新渲染：打补丁（diff 算法）<blockquote>\n<p>测试：console.time(‘element’)、console.timeEnd(‘element’)对比 1 万个 element 的耗时和 1 万个 js 对象耗时，可得知用 diff 算法</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"为什么-vue-要设计成一个运行时-编译时的框架呢？\"><a href=\"#为什么-vue-要设计成一个运行时-编译时的框架呢？\" class=\"headerlink\" title=\"为什么 vue 要设计成一个运行时+编译时的框架呢？\"></a>为什么 vue 要设计成一个运行时+编译时的框架呢？</h3><ol>\n<li>针对于纯运行时而言：因为不存在编辑器，所以我们只能提供一个复杂的 js 对象。</li>\n<li>针对于纯编译时而言：因为缺少运行时，所以只能把分析差异的操作，放到<strong>编译时</strong>进行，同样因为省略了运行时，所以速度可能更快。但是这样方式将损失灵活性。</li>\n<li>运行时 + 编译时：保持灵活性的基础上，尽量进行性能的优化，从而达到一种平衡。</li>\n</ol>\n<h3 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h3><ul>\n<li>定义：对数据进行 setter（赋值）或者 getter（取值）操作，所产生的一系列后果。</li>\n<li>副作用可以产生多个</li>\n</ul>\n<h3 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h3><ol>\n<li>响应式：reactivity</li>\n<li>运行时：runtime</li>\n<li>编译器：compiler</li>\n</ol>\n<h3 id=\"typescript-支持友好真实的原因？\"><a href=\"#typescript-支持友好真实的原因？\" class=\"headerlink\" title=\"typescript 支持友好真实的原因？\"></a>typescript 支持友好真实的原因？</h3><ul>\n<li>内部提供了很多 ts 类型</li>\n</ul>\n<blockquote>\n<p>学习链接: <a href=\"https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p>\n</blockquote>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"命令式和声明式\"><a href=\"#命令式和声明式\" class=\"headerlink\" title=\"命令式和声明式\"></a>命令式和声明式</h3><ul>\n<li>命令式：<strong>详细描述做事过程</strong>的方式（关注过程）</li>\n<li>声明式：<strong>模板语法</strong>（不关注过程，只关注结果）</li>\n</ul>\n<h3 id=\"命令式-VS-声明式\"><a href=\"#命令式-VS-声明式\" class=\"headerlink\" title=\"命令式 VS 声明式\"></a>命令式 VS 声明式</h3><ol>\n<li>性能：命令式高于声明式</li>\n<li>可维护性：命令式比声明式的维护性差</li>\n</ol>\n<h3 id=\"企业应用开发与设计原则\"><a href=\"#企业应用开发与设计原则\" class=\"headerlink\" title=\"企业应用开发与设计原则\"></a>企业应用开发与设计原则</h3><ol>\n<li>项目开发成本（可维护性上对比）</li>\n<li>开发体验（心智负担对比）</li>\n</ol>\n<h3 id=\"为什么说框架设计过程其实是一个不断取舍的过程？\"><a href=\"#为什么说框架设计过程其实是一个不断取舍的过程？\" class=\"headerlink\" title=\"为什么说框架设计过程其实是一个不断取舍的过程？\"></a>为什么说框架设计过程其实是一个不断取舍的过程？</h3><ol>\n<li>命令式的性能 &gt; 声明式的性能</li>\n<li>命令式的可维护性 &lt; 声明式的可维护性</li>\n<li>声明式的框架本质是由命令式的代码去实现的</li>\n<li>企业项目开发过程中，大多使用声明式框架</li>\n</ol>\n<p>开发设计原则：Vue 封装了命令式的逻辑，而对外暴露出声明式的接口。可维护性和性能不断取舍的过程。</p>\n<h3 id=\"Vue-三种状态\"><a href=\"#Vue-三种状态\" class=\"headerlink\" title=\"Vue 三种状态\"></a>Vue 三种状态</h3><ol>\n<li>编译时：complier</li>\n<li>运行时：runtime</li>\n<li>运行时 + 编译时：runtime + compiler</li>\n</ol>\n<h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>定义：运行时可以利用<code>render</code>把<code>vnode</code>渲染成真实<code>dom</code>节点</p>\n<ul>\n<li>渲染函数（render）：用于编程式地创建组件虚拟 dom 树的函数</li>\n</ul>\n<h3 id=\"编译时\"><a href=\"#编译时\" class=\"headerlink\" title=\"编译时\"></a>编译时</h3><p>文件：complier-core<br>作用：可以把 HTML 生成 render 函数，之后再运行时 render 函数把 vnode 渲染真实 dom 节点</p>\n<h3 id=\"vue-的-dom-渲染\"><a href=\"#vue-的-dom-渲染\" class=\"headerlink\" title=\"vue 的 dom 渲染\"></a>vue 的 dom 渲染</h3><ol>\n<li>初次渲染：挂载</li>\n<li>更新渲染：打补丁（diff 算法）<blockquote>\n<p>测试：console.time(‘element’)、console.timeEnd(‘element’)对比 1 万个 element 的耗时和 1 万个 js 对象耗时，可得知用 diff 算法</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"为什么-vue-要设计成一个运行时-编译时的框架呢？\"><a href=\"#为什么-vue-要设计成一个运行时-编译时的框架呢？\" class=\"headerlink\" title=\"为什么 vue 要设计成一个运行时+编译时的框架呢？\"></a>为什么 vue 要设计成一个运行时+编译时的框架呢？</h3><ol>\n<li>针对于纯运行时而言：因为不存在编辑器，所以我们只能提供一个复杂的 js 对象。</li>\n<li>针对于纯编译时而言：因为缺少运行时，所以只能把分析差异的操作，放到<strong>编译时</strong>进行，同样因为省略了运行时，所以速度可能更快。但是这样方式将损失灵活性。</li>\n<li>运行时 + 编译时：保持灵活性的基础上，尽量进行性能的优化，从而达到一种平衡。</li>\n</ol>\n<h3 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h3><ul>\n<li>定义：对数据进行 setter（赋值）或者 getter（取值）操作，所产生的一系列后果。</li>\n<li>副作用可以产生多个</li>\n</ul>\n<h3 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h3><ol>\n<li>响应式：reactivity</li>\n<li>运行时：runtime</li>\n<li>编译器：compiler</li>\n</ol>\n<h3 id=\"typescript-支持友好真实的原因？\"><a href=\"#typescript-支持友好真实的原因？\" class=\"headerlink\" title=\"typescript 支持友好真实的原因？\"></a>typescript 支持友好真实的原因？</h3><ul>\n<li>内部提供了很多 ts 类型</li>\n</ul>\n<blockquote>\n<p>学习链接: <a href=\"https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p>\n</blockquote>\n"},{"title":"css弹窗动画","description":"css弹窗动画","date":"2022-07-30T16:00:00.000Z","cover":"https://is.gd/NScMBX","_content":"\n# css弹窗动画\n\n### 前言\n\n项目地址：[地址](https://github.com/kangkang123269/kate-demo/tree/main/css/css-animation-demo)\n\n### js操作css类\n\n1. 添加类名\n\n~~~js\ndocument.getElementById(\"myDiv\").classList.add('mystyle');\n~~~\n\n2. 删除类名\n\n~~~js\ndocument.getElementById(\"myDiv\").classList.remove('mystyle');\n~~~\n\n3. 检查是否含有某个css类：\n\n~~~js\nmyDiv.classList.contains('myCssClass');\n~~~\n\n> 注意：`document.querySelector('class').classList`是静态获取类名，不能操作类名\n\n\n### 导入css\n\n~~~css\n@import url('./fadeIn.css');\n@import url('./fadeleftIn.css');\n@import url('./fadelogIn.css');\n@import url('./popIn.css');\n~~~\n\n### 弹窗动画\n\n- 从上往下：\n\n~~~css\n.fadeIn {\n    -webkit-animation: fadeInDown .3s;\n    animation: fadeInDown .3s;\n}\n@keyframes fadeInDown {\n    0% {\n        -webkit-transform: translate3d(0, -20%, 0);\n        -webkit-transform: translate3d(0, -20%, 0);\n        transform: translate3d(0, -20%, 0);\n        transform: translate3d(0, -20%, 0);\n        opacity: 0;\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n        opacity: 1;\n    }\n}\n@-webkit-keyframes fadeInDown {\n    0% {\n        -webkit-transform: translate3d(0, -20%, 0);\n        opacity: 0;\n    }\n    100% {\n        -webkit-transform: none;\n        opacity: 1;\n    }\n}\n~~~\n\n- 从右往左：\n\n~~~css\n.fadelogIn {\n    -webkit-animation: fadelogIn .4s;\n    animation: fadelogIn .4s;\n}\n@keyframes fadelogIn {\n    0% {\n        -webkit-transform: translate3d(0, 100%, 0);\n        -webkit-transform: translate3d(0, 100%, 0);\n        transform: translate3d(0, 100%, 0);\n        transform: translate3d(0, 100%, 0);\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n    }\n}\n@-webkit-keyframes fadelogIn {\n    0% {\n        -webkit-transform: translate3d(0, 100%, 0);\n    }\n    100% {\n        -webkit-transform: none;\n    }\n}\n\n~~~\n\n- 从右往左：\n\n~~~css\n.fadeleftIn {\n    -webkit-animation: fadeleftIn .4s;\n    animation: fadeleftIn .4s;\n}\n@keyframes fadeleftIn {\n    0% {\n        -webkit-transform: translate3d(100%, 0, 0);\n        -webkit-transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n    }\n}\n@-webkit-keyframes fadeleftIn {\n    0% {\n        -webkit-transform: translate3d(100%, 0, 0);\n    }\n    100% {\n        -webkit-transform: none;\n    }\n}\n~~~\n\n- 放大：\n\n~~~css\n.popIn {\n    -webkit-animation: fadeleftIn .4s;\n    animation: fadeleftIn .4s;\n    -webkit-animation-name: popIn;\n    animation-name: popIn;\n}\n@-webkit-keyframes popIn {\n    0% {\n        -webkit-transform: scale3d(0, 0, 0);\n        transform: scale3d(0.5, 0.5, 0.5);\n        opacity: 0;\n    }\n    50% {\n        -webkit-animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n        animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n    }\n    100% {\n        -webkit-transform: scale3d(1, 1, 1);\n        transform: scale3d(1, 1, 1);\n        -webkit-animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        opacity: 1;\n    }\n}\n@keyframes popIn {\n    0% {\n        -webkit-transform: scale3d(0, 0, 0);\n        transform: scale3d(0.5, 0.5, 0.5);\n        opacity: 0;\n    }\n    50% {\n        -webkit-animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n        animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n    }\n    100% {\n        -webkit-transform: scale3d(1, 1, 1);\n        transform: scale3d(1, 1, 1);\n        -webkit-animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        opacity: 1;\n    }\n}\n~~~","source":"_posts/css/css弹窗动画.md","raw":"---\ntitle: css弹窗动画\ntags: [前端]\ncategories: [css]\ndescription: css弹窗动画\ndate: 2022-07-31\ncover: https://is.gd/NScMBX\n---\n\n# css弹窗动画\n\n### 前言\n\n项目地址：[地址](https://github.com/kangkang123269/kate-demo/tree/main/css/css-animation-demo)\n\n### js操作css类\n\n1. 添加类名\n\n~~~js\ndocument.getElementById(\"myDiv\").classList.add('mystyle');\n~~~\n\n2. 删除类名\n\n~~~js\ndocument.getElementById(\"myDiv\").classList.remove('mystyle');\n~~~\n\n3. 检查是否含有某个css类：\n\n~~~js\nmyDiv.classList.contains('myCssClass');\n~~~\n\n> 注意：`document.querySelector('class').classList`是静态获取类名，不能操作类名\n\n\n### 导入css\n\n~~~css\n@import url('./fadeIn.css');\n@import url('./fadeleftIn.css');\n@import url('./fadelogIn.css');\n@import url('./popIn.css');\n~~~\n\n### 弹窗动画\n\n- 从上往下：\n\n~~~css\n.fadeIn {\n    -webkit-animation: fadeInDown .3s;\n    animation: fadeInDown .3s;\n}\n@keyframes fadeInDown {\n    0% {\n        -webkit-transform: translate3d(0, -20%, 0);\n        -webkit-transform: translate3d(0, -20%, 0);\n        transform: translate3d(0, -20%, 0);\n        transform: translate3d(0, -20%, 0);\n        opacity: 0;\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n        opacity: 1;\n    }\n}\n@-webkit-keyframes fadeInDown {\n    0% {\n        -webkit-transform: translate3d(0, -20%, 0);\n        opacity: 0;\n    }\n    100% {\n        -webkit-transform: none;\n        opacity: 1;\n    }\n}\n~~~\n\n- 从右往左：\n\n~~~css\n.fadelogIn {\n    -webkit-animation: fadelogIn .4s;\n    animation: fadelogIn .4s;\n}\n@keyframes fadelogIn {\n    0% {\n        -webkit-transform: translate3d(0, 100%, 0);\n        -webkit-transform: translate3d(0, 100%, 0);\n        transform: translate3d(0, 100%, 0);\n        transform: translate3d(0, 100%, 0);\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n    }\n}\n@-webkit-keyframes fadelogIn {\n    0% {\n        -webkit-transform: translate3d(0, 100%, 0);\n    }\n    100% {\n        -webkit-transform: none;\n    }\n}\n\n~~~\n\n- 从右往左：\n\n~~~css\n.fadeleftIn {\n    -webkit-animation: fadeleftIn .4s;\n    animation: fadeleftIn .4s;\n}\n@keyframes fadeleftIn {\n    0% {\n        -webkit-transform: translate3d(100%, 0, 0);\n        -webkit-transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n    }\n    100% {\n        -webkit-transform: none;\n        transform: none;\n    }\n}\n@-webkit-keyframes fadeleftIn {\n    0% {\n        -webkit-transform: translate3d(100%, 0, 0);\n    }\n    100% {\n        -webkit-transform: none;\n    }\n}\n~~~\n\n- 放大：\n\n~~~css\n.popIn {\n    -webkit-animation: fadeleftIn .4s;\n    animation: fadeleftIn .4s;\n    -webkit-animation-name: popIn;\n    animation-name: popIn;\n}\n@-webkit-keyframes popIn {\n    0% {\n        -webkit-transform: scale3d(0, 0, 0);\n        transform: scale3d(0.5, 0.5, 0.5);\n        opacity: 0;\n    }\n    50% {\n        -webkit-animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n        animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n    }\n    100% {\n        -webkit-transform: scale3d(1, 1, 1);\n        transform: scale3d(1, 1, 1);\n        -webkit-animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        opacity: 1;\n    }\n}\n@keyframes popIn {\n    0% {\n        -webkit-transform: scale3d(0, 0, 0);\n        transform: scale3d(0.5, 0.5, 0.5);\n        opacity: 0;\n    }\n    50% {\n        -webkit-animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n        animation-timing-function: cubic-bezier(0.47, 0, 0.745, 0.715);\n    }\n    100% {\n        -webkit-transform: scale3d(1, 1, 1);\n        transform: scale3d(1, 1, 1);\n        -webkit-animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        opacity: 1;\n    }\n}\n~~~","slug":"css/css弹窗动画","published":1,"updated":"2023-07-30T18:23:59.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdlp000736l14ygs49ez","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"css弹窗动画\"><a href=\"#css弹窗动画\" class=\"headerlink\" title=\"css弹窗动画\"></a>css弹窗动画</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>项目地址：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/css/css-animation-demo\">地址</a></p>\n<h3 id=\"js操作css类\"><a href=\"#js操作css类\" class=\"headerlink\" title=\"js操作css类\"></a>js操作css类</h3><ol>\n<li>添加类名</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>).<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>删除类名</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>).<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>检查是否含有某个css类：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiv.<span class=\"property\">classList</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<code>document.querySelector(&#39;class&#39;).classList</code>是静态获取类名，不能操作类名</p>\n</blockquote>\n<h3 id=\"导入css\"><a href=\"#导入css\" class=\"headerlink\" title=\"导入css\"></a>导入css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadeIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadeleftIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadelogIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./popIn.css&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弹窗动画\"><a href=\"#弹窗动画\" class=\"headerlink\" title=\"弹窗动画\"></a>弹窗动画</h3><ul>\n<li>从上往下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadeIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeInDown .<span class=\"number\">3s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeInDown .<span class=\"number\">3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadeInDown &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadeInDown &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从右往左：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadelogIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadelogIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadelogIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadelogIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadelogIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从右往左：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadeleftIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadeleftIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadeleftIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>放大：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.popIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation-name</span>: popIn;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: popIn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> popIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> popIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"css弹窗动画\"><a href=\"#css弹窗动画\" class=\"headerlink\" title=\"css弹窗动画\"></a>css弹窗动画</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>项目地址：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/css/css-animation-demo\">地址</a></p>\n<h3 id=\"js操作css类\"><a href=\"#js操作css类\" class=\"headerlink\" title=\"js操作css类\"></a>js操作css类</h3><ol>\n<li>添加类名</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>).<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>删除类名</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>).<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>检查是否含有某个css类：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiv.<span class=\"property\">classList</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<code>document.querySelector(&#39;class&#39;).classList</code>是静态获取类名，不能操作类名</p>\n</blockquote>\n<h3 id=\"导入css\"><a href=\"#导入css\" class=\"headerlink\" title=\"导入css\"></a>导入css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadeIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadeleftIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./fadelogIn.css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;./popIn.css&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弹窗动画\"><a href=\"#弹窗动画\" class=\"headerlink\" title=\"弹窗动画\"></a>弹窗动画</h3><ul>\n<li>从上往下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadeIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeInDown .<span class=\"number\">3s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeInDown .<span class=\"number\">3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadeInDown &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadeInDown &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, -<span class=\"number\">20%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从右往左：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadelogIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadelogIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadelogIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadelogIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadelogIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从右往左：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fadeleftIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> fadeleftIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> fadeleftIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>放大：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.popIn</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: fadeleftIn .<span class=\"number\">4s</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">animation-name</span>: popIn;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: popIn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> popIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> popIn &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.47</span>, <span class=\"number\">0</span>, <span class=\"number\">0.745</span>, <span class=\"number\">0.715</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale3d</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        -webkit-<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.25</span>, <span class=\"number\">0.46</span>, <span class=\"number\">0.45</span>, <span class=\"number\">0.94</span>);</span><br><span class=\"line\">        <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue3 新特性","description":"在Vue中使用keep-alive","date":"2022-11-01T16:00:00.000Z","cover":"https://is.gd/Bp0B59","_content":"\n# Vue3 新特性\n\n### 1. 响应式系统不同\n\nvue2 响应式机制是基于 `Object.defineProperty()`这个 api 实现的，只是对对象拦截，`Proxy` 才是真正代理，Vue2 还需要对数组方法重写，监听数组长度的变化还需要`$set` api\n\n### 2. 自定义渲染器\n\nvue2 所有的模块都是糅在一起的，只服务于 Vue，这样拓展性不好。Vue3 把模块拆分开来，使用最近流行的 monorepo 管理方式、响应式、编译和运行时全部独立开来，渲染逻辑也拆成平台渲染逻辑和浏览器 api 两部分，这样更适用于跨端应用。\n\n### 3. 全部模块使用 TypeScript 重构\n\n- 更方便的提示\n- 更健壮的代码\n\n### 4. Composition API 组合语法\n\n#### 4.1 Options API 对比 Composistion API 暴露出的问题\n\n- 由于所有的数据都挂载在 this 之上，因而 Options API 对写 TypeScript 的类型引导不是很友好，并且这样也不好做 Tree-shaking 清除代码\n- 新增功能基本都修改 data、method 等配置、并且代码 300 行之后，会经常上下反复横跳，开发很痛苦\n- 代码不好复用，Vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突问题。\n\n#### 4.2 Composition API 带来的好处\n\n- 所有 API 都是 import 引入的。用到的功能都是 import 进来，对 Tree-shaking 很友好。\n- 可以把 methods、data 一起书写，维护更轻松。\n- 代码方便复用，可以把一个功能所有的 methods、data 封装到一个独立的函数中，复用代码更容易。\n\n### 5. 新的组件\n\nVue3 内置了 Frgment、Teleport 和 Suspense 三个新组件。\n\n- Fragment：Vue3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。\n- Teleport：允许组件渲染在别的元素内，主要开发弹窗组件特别有用。\n- Suspense：异步组件，更方便开发有异步请求的组件。\n\n### 6. 新一代工程化工具 Vite\n\n原先的 webpack 需要项目全部预打包，而 vite 只是把首页依赖的文件，依次通过网络请求去获取，整个开发体验得到巨大提升，做到复杂项目的秒级调试和热更新。\n\n### 总结\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/385ea922b6044c08bf10f61b0bc46a83.png)\n","source":"_posts/Vue3深入/新特性.md","raw":"---\ntitle: Vue3 新特性\ntags: [Vue深入]\ncategories: [Vue深入]\ndescription: 在Vue中使用keep-alive\ndate: 2022-11-02\ncover: https://is.gd/Bp0B59\n---\n\n# Vue3 新特性\n\n### 1. 响应式系统不同\n\nvue2 响应式机制是基于 `Object.defineProperty()`这个 api 实现的，只是对对象拦截，`Proxy` 才是真正代理，Vue2 还需要对数组方法重写，监听数组长度的变化还需要`$set` api\n\n### 2. 自定义渲染器\n\nvue2 所有的模块都是糅在一起的，只服务于 Vue，这样拓展性不好。Vue3 把模块拆分开来，使用最近流行的 monorepo 管理方式、响应式、编译和运行时全部独立开来，渲染逻辑也拆成平台渲染逻辑和浏览器 api 两部分，这样更适用于跨端应用。\n\n### 3. 全部模块使用 TypeScript 重构\n\n- 更方便的提示\n- 更健壮的代码\n\n### 4. Composition API 组合语法\n\n#### 4.1 Options API 对比 Composistion API 暴露出的问题\n\n- 由于所有的数据都挂载在 this 之上，因而 Options API 对写 TypeScript 的类型引导不是很友好，并且这样也不好做 Tree-shaking 清除代码\n- 新增功能基本都修改 data、method 等配置、并且代码 300 行之后，会经常上下反复横跳，开发很痛苦\n- 代码不好复用，Vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突问题。\n\n#### 4.2 Composition API 带来的好处\n\n- 所有 API 都是 import 引入的。用到的功能都是 import 进来，对 Tree-shaking 很友好。\n- 可以把 methods、data 一起书写，维护更轻松。\n- 代码方便复用，可以把一个功能所有的 methods、data 封装到一个独立的函数中，复用代码更容易。\n\n### 5. 新的组件\n\nVue3 内置了 Frgment、Teleport 和 Suspense 三个新组件。\n\n- Fragment：Vue3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。\n- Teleport：允许组件渲染在别的元素内，主要开发弹窗组件特别有用。\n- Suspense：异步组件，更方便开发有异步请求的组件。\n\n### 6. 新一代工程化工具 Vite\n\n原先的 webpack 需要项目全部预打包，而 vite 只是把首页依赖的文件，依次通过网络请求去获取，整个开发体验得到巨大提升，做到复杂项目的秒级调试和热更新。\n\n### 总结\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/385ea922b6044c08bf10f61b0bc46a83.png)\n","slug":"Vue3深入/新特性","published":1,"updated":"2023-07-30T18:30:33.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdlq000936l16xwdgqwf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue3-新特性\"><a href=\"#Vue3-新特性\" class=\"headerlink\" title=\"Vue3 新特性\"></a>Vue3 新特性</h1><h3 id=\"1-响应式系统不同\"><a href=\"#1-响应式系统不同\" class=\"headerlink\" title=\"1. 响应式系统不同\"></a>1. 响应式系统不同</h3><p>vue2 响应式机制是基于 <code>Object.defineProperty()</code>这个 api 实现的，只是对对象拦截，<code>Proxy</code> 才是真正代理，Vue2 还需要对数组方法重写，监听数组长度的变化还需要<code>$set</code> api</p>\n<h3 id=\"2-自定义渲染器\"><a href=\"#2-自定义渲染器\" class=\"headerlink\" title=\"2. 自定义渲染器\"></a>2. 自定义渲染器</h3><p>vue2 所有的模块都是糅在一起的，只服务于 Vue，这样拓展性不好。Vue3 把模块拆分开来，使用最近流行的 monorepo 管理方式、响应式、编译和运行时全部独立开来，渲染逻辑也拆成平台渲染逻辑和浏览器 api 两部分，这样更适用于跨端应用。</p>\n<h3 id=\"3-全部模块使用-TypeScript-重构\"><a href=\"#3-全部模块使用-TypeScript-重构\" class=\"headerlink\" title=\"3. 全部模块使用 TypeScript 重构\"></a>3. 全部模块使用 TypeScript 重构</h3><ul>\n<li>更方便的提示</li>\n<li>更健壮的代码</li>\n</ul>\n<h3 id=\"4-Composition-API-组合语法\"><a href=\"#4-Composition-API-组合语法\" class=\"headerlink\" title=\"4. Composition API 组合语法\"></a>4. Composition API 组合语法</h3><h4 id=\"4-1-Options-API-对比-Composistion-API-暴露出的问题\"><a href=\"#4-1-Options-API-对比-Composistion-API-暴露出的问题\" class=\"headerlink\" title=\"4.1 Options API 对比 Composistion API 暴露出的问题\"></a>4.1 Options API 对比 Composistion API 暴露出的问题</h4><ul>\n<li>由于所有的数据都挂载在 this 之上，因而 Options API 对写 TypeScript 的类型引导不是很友好，并且这样也不好做 Tree-shaking 清除代码</li>\n<li>新增功能基本都修改 data、method 等配置、并且代码 300 行之后，会经常上下反复横跳，开发很痛苦</li>\n<li>代码不好复用，Vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突问题。</li>\n</ul>\n<h4 id=\"4-2-Composition-API-带来的好处\"><a href=\"#4-2-Composition-API-带来的好处\" class=\"headerlink\" title=\"4.2 Composition API 带来的好处\"></a>4.2 Composition API 带来的好处</h4><ul>\n<li>所有 API 都是 import 引入的。用到的功能都是 import 进来，对 Tree-shaking 很友好。</li>\n<li>可以把 methods、data 一起书写，维护更轻松。</li>\n<li>代码方便复用，可以把一个功能所有的 methods、data 封装到一个独立的函数中，复用代码更容易。</li>\n</ul>\n<h3 id=\"5-新的组件\"><a href=\"#5-新的组件\" class=\"headerlink\" title=\"5. 新的组件\"></a>5. 新的组件</h3><p>Vue3 内置了 Frgment、Teleport 和 Suspense 三个新组件。</p>\n<ul>\n<li>Fragment：Vue3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li>\n<li>Teleport：允许组件渲染在别的元素内，主要开发弹窗组件特别有用。</li>\n<li>Suspense：异步组件，更方便开发有异步请求的组件。</li>\n</ul>\n<h3 id=\"6-新一代工程化工具-Vite\"><a href=\"#6-新一代工程化工具-Vite\" class=\"headerlink\" title=\"6. 新一代工程化工具 Vite\"></a>6. 新一代工程化工具 Vite</h3><p>原先的 webpack 需要项目全部预打包，而 vite 只是把首页依赖的文件，依次通过网络请求去获取，整个开发体验得到巨大提升，做到复杂项目的秒级调试和热更新。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://img-blog.csdnimg.cn/385ea922b6044c08bf10f61b0bc46a83.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Vue3-新特性\"><a href=\"#Vue3-新特性\" class=\"headerlink\" title=\"Vue3 新特性\"></a>Vue3 新特性</h1><h3 id=\"1-响应式系统不同\"><a href=\"#1-响应式系统不同\" class=\"headerlink\" title=\"1. 响应式系统不同\"></a>1. 响应式系统不同</h3><p>vue2 响应式机制是基于 <code>Object.defineProperty()</code>这个 api 实现的，只是对对象拦截，<code>Proxy</code> 才是真正代理，Vue2 还需要对数组方法重写，监听数组长度的变化还需要<code>$set</code> api</p>\n<h3 id=\"2-自定义渲染器\"><a href=\"#2-自定义渲染器\" class=\"headerlink\" title=\"2. 自定义渲染器\"></a>2. 自定义渲染器</h3><p>vue2 所有的模块都是糅在一起的，只服务于 Vue，这样拓展性不好。Vue3 把模块拆分开来，使用最近流行的 monorepo 管理方式、响应式、编译和运行时全部独立开来，渲染逻辑也拆成平台渲染逻辑和浏览器 api 两部分，这样更适用于跨端应用。</p>\n<h3 id=\"3-全部模块使用-TypeScript-重构\"><a href=\"#3-全部模块使用-TypeScript-重构\" class=\"headerlink\" title=\"3. 全部模块使用 TypeScript 重构\"></a>3. 全部模块使用 TypeScript 重构</h3><ul>\n<li>更方便的提示</li>\n<li>更健壮的代码</li>\n</ul>\n<h3 id=\"4-Composition-API-组合语法\"><a href=\"#4-Composition-API-组合语法\" class=\"headerlink\" title=\"4. Composition API 组合语法\"></a>4. Composition API 组合语法</h3><h4 id=\"4-1-Options-API-对比-Composistion-API-暴露出的问题\"><a href=\"#4-1-Options-API-对比-Composistion-API-暴露出的问题\" class=\"headerlink\" title=\"4.1 Options API 对比 Composistion API 暴露出的问题\"></a>4.1 Options API 对比 Composistion API 暴露出的问题</h4><ul>\n<li>由于所有的数据都挂载在 this 之上，因而 Options API 对写 TypeScript 的类型引导不是很友好，并且这样也不好做 Tree-shaking 清除代码</li>\n<li>新增功能基本都修改 data、method 等配置、并且代码 300 行之后，会经常上下反复横跳，开发很痛苦</li>\n<li>代码不好复用，Vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突问题。</li>\n</ul>\n<h4 id=\"4-2-Composition-API-带来的好处\"><a href=\"#4-2-Composition-API-带来的好处\" class=\"headerlink\" title=\"4.2 Composition API 带来的好处\"></a>4.2 Composition API 带来的好处</h4><ul>\n<li>所有 API 都是 import 引入的。用到的功能都是 import 进来，对 Tree-shaking 很友好。</li>\n<li>可以把 methods、data 一起书写，维护更轻松。</li>\n<li>代码方便复用，可以把一个功能所有的 methods、data 封装到一个独立的函数中，复用代码更容易。</li>\n</ul>\n<h3 id=\"5-新的组件\"><a href=\"#5-新的组件\" class=\"headerlink\" title=\"5. 新的组件\"></a>5. 新的组件</h3><p>Vue3 内置了 Frgment、Teleport 和 Suspense 三个新组件。</p>\n<ul>\n<li>Fragment：Vue3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li>\n<li>Teleport：允许组件渲染在别的元素内，主要开发弹窗组件特别有用。</li>\n<li>Suspense：异步组件，更方便开发有异步请求的组件。</li>\n</ul>\n<h3 id=\"6-新一代工程化工具-Vite\"><a href=\"#6-新一代工程化工具-Vite\" class=\"headerlink\" title=\"6. 新一代工程化工具 Vite\"></a>6. 新一代工程化工具 Vite</h3><p>原先的 webpack 需要项目全部预打包，而 vite 只是把首页依赖的文件，依次通过网络请求去获取，整个开发体验得到巨大提升，做到复杂项目的秒级调试和热更新。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://img-blog.csdnimg.cn/385ea922b6044c08bf10f61b0bc46a83.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"封装class一次性解决实现全屏功能","description":"封装class一次性解决实现全屏功能","date":"2022-07-30T16:00:00.000Z","cover":"https://is.gd/rht8Ij","_content":"\n# 封装 class 一次性解决实现全屏功能\n\n### 前言\n\n这里先给项目地址：[地址](https://github.com/kangkang123269/kate-demo/tree/main/html5/fullScreen-demo)\n\n### 支持全屏的 api\n\n1. 浏览器是否支持全屏模式：`document.fullscreenEnabled`\n2. 使元素进入全屏模式：`Element.requestFullscreen()`\n3. 退出全屏：`document.exitFullscreen()`\n4. 检查当前是否有节点处于全屏状态：`document.fullscreenElement`\n5. 进入全屏/离开全屏，触发事件：`document.fullscreenchange`\n6. 无法进入全屏时触发: `document.fullscreenerror`\n\n### 浏览器前缀：\n\n目前并不是所有的浏览器都实现了 API 的无前缀版本，所以我们需要针对不同浏览器，做一下 API 的兼容:\n\n我们需要写成类的形式：\n\n```js\n/**\n * @description: 是否支持全屏+判断浏览器前缀\n * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值\n */\nisFullscreen(fn) {\n  let fullscreenEnabled;\n  // 判断浏览器前缀\n  if (document.fullscreenEnabled) {\n    fullscreenEnabled = document.fullscreenEnabled;\n  } else if (document.webkitFullscreenEnabled) {\n    fullscreenEnabled = document.webkitFullscreenEnabled;\n    this.prefixName = 'webkit';\n  } else if (document.mozFullScreenEnabled) {\n    fullscreenEnabled = document.mozFullScreenEnabled;\n    this.prefixName = 'moz';\n  } else if (document.msFullscreenEnabled) {\n    fullscreenEnabled = document.msFullscreenEnabled;\n    this.prefixName = 'ms';\n  }\n  if (!fullscreenEnabled) {\n    if (fn !== undefined) fn(); // 执行不支持全屏的回调\n    this.isFullscreenData = false;\n  }\n}\n```\n\n### 1. 浏览器是否支持全屏模式：document.fullscreenEnabled\n\n`document.fullscreenEnabled`属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。\n\n### 2. 使元素进入全屏模式：Element.requestFullscreen()\n\n```js\n/**\n * @description: 将传进来的元素全屏\n * @param {String} domName 要全屏的dom名称\n */\nFullscreen(domName) {\n  const element = document.querySelector(domName); // 获取dom\n  const methodName =\n    this.prefixName === ''\n      ? 'requestFullscreen'\n      : `${this.prefixName}RequestFullScreen`; // API前缀\n  element[methodName](); // 调用全屏\n}\n```\n\n### 3. 退出全屏：document.exitFullscreen()\n\n```js\nexitFullscreen() {\n  const methodName =\n    this.prefixName === ''\n      ? 'exitFullscreen'\n      : `${this.prefixName}ExitFullscreen`; // API 前缀\n  document[methodName](); // 调用\n}\n```\n\n### 4. 检查当前是否有节点处于全屏状态：document.fullscreenElement\n\n```js\n/**\n * @description: 检测有没有元素处于全屏状态\n * @return 布尔值\n */\nisElementFullScreen() {\n  const fullscreenElement =\n    document.fullscreenElement ||\n    document.msFullscreenElement ||\n    document.mozFullScreenElement ||\n    document.webkitFullscreenElement; // 有前缀的f是大写，没前缀是小写\n  if (fullscreenElement === null) {\n    return false; // 当前没有元素在全屏状态\n  } else {\n    return true; // 有元素在全屏状态\n  }\n}\n```\n\n事实上，还有一个属性`document.fullscreen`，返回一个布尔值，表示文档是否处于全屏模式。\n\n两个方法效果是一样，但因为 IE 不支持这个属性，所以这里用的是`document.fullscreenElement`.\n\n### 5. 进入全屏/离开全屏，触发事件：document.fullscreenchange\n\n当我们进入全屏和离开全屏的时候，都会触发一个`fullscreenchange`事件。\n\n> 注意：此事件不会提供任何信息，表明是进入全屏或退出全屏。\n\n```js\n/**\n * @description: 监听进入/离开全屏\n * @param {Function} enter 进入全屏的回调\n *  @param {Function} quit 离开全屏的回调\n */\nscreenChange(enter,quit) {\n  if (!this.isFullscreenData) return;\n  const methodName = `on${this.prefixName}fullscreenchange`;\n  document[methodName] = e => {\n    if (this.isElementFullScreen()) {\n      enter && enter(e); // 进入全屏回调\n    } else {\n      quit && quit(e); // 离开全屏的回调\n    }\n  };\n}\n```\n\n**注意：多层全屏的情况**\n\n1. 先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)\n2. 退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)\n3. 出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的 dom 信息来进行判断。\n\n### 6. 无法进入全屏时触发: document.fullscreenerror\n\n比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误:\n\n```js\n/**\n * @description: 浏览器无法进入全屏时触发\n * @param {Function} enterErrorFn 回调\n */\nscreenError(enterErrorFn) {\n  const methodName = `on${this.prefixName}fullscreenerror`;\n  document[methodName] = e => {\n    enterErrorFn && enterErrorFn(e)\n  };\n}\n```\n\n### Css： 全屏模式下的样式\n\n1. 默认设置黑色背景\n\n```css\n:not(:root):-webkit-full-screen::backdrop {\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  background: black; // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色\n}\n```\n\n2. 默认样式：\n\n```css\n:not(:root):-webkit-full-screen {\n  object-fit: contain;\n  position: fixed !important;\n  top: 0px !important;\n  right: 0px !important;\n  bottom: 0px !important;\n  left: 0px !important;\n  box-sizing: border-box !important;\n  min-width: 0px !important;\n  max-width: none !important;\n  min-height: 0px !important;\n  max-height: none !important;\n  width: 100% !important;\n  height: 100% !important;\n  transform: none !important;\n  margin: 0px !important;\n}\n```\n\n### 全屏状态的 CSS：\n\n全屏状态下，大多数浏览器的 CSS 支持:full-screen 伪类，只有 IE11 支持:fullscreen 伪类。使用这个伪类，可以对全屏状态设置单独的 CSS 属性。\n\n```css\n/* 针对dom的全屏设置 */\n.div:-webkit-full-screen {\n  background: #fff;\n}\n/* 全屏属性 */\n:-webkit-full-screen {\n}\n:-moz-full-screen {\n}\n:-ms-fullscreen {\n}\n/* 全屏伪类 当前chrome:70 不支持 */\n:full-screen {\n}\n:fullscreen {\n  /* IE11支持 */\n}\n```\n\n参考资料：阮一峰老师的[Fullscreen API：全屏操作](https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0)\n\n这里是一条华丽的分割线，讲完原理开始实战\n\n---\n\n### 项目的 html\n\nindex.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Document</title>\n</head>\n\n<body>\n  <iframe src=\"https://codesandbox.io/s/\" id=\"iframe-one\" name=\"iframe-one\n      width=\" 100%\" height=\"200\" scrolling=\"no\" frameborder=\"0\"></iframe>\n  <img src=\"vscode.svg\" onclick=\"iframeScreen()\" id=\"vscode\" width=\"100\" height=\"100\" alt=\"\">\n  <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```\n\n### 项目中的 css\n\nindex.css：\n\n```css\n#iframe-one {\n  // 随便是什么元素，一开始不展示元素\n  display: none;\n}\n/* 针对dom的全屏设置 */\n.left:-webkit-full-screen {\n  background: #fff;\n}\n/* 全屏属性 */\n:-webkit-full-screen {\n}\n:-moz-full-screen {\n}\n:-ms-fullscreen {\n}\n/* 全屏伪类 当前chrome:70 不支持 */\n:full-screen {\n}\n:fullscreen {\n  /* IE11支持 */\n}\n```\n\n### 封装完成的 js 文件\n\n以后无论遇到什么全屏问题都可以用改封装得 class\n\nindex.js：\n\n```js\nclass fullScreen {\n  constructor(fn) {\n    // fn是失败的回调函数\n    this.prefixName = \"\"; // 浏览器前缀\n    this.isFullscreenData = true; // 浏览器支持全屏\n    this.isFullscreen(fn);\n  }\n  /**\n   * @description: 是否支持全屏+判断浏览器前缀\n   * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值\n   */\n  isFullscreen(fn) {\n    let fullscreenEnabled; // 是否支持全屏\n    // 判断浏览器前缀\n    if (document.fullscreenEnabled) {\n      fullscreenEnabled = document.fullscreenEnabled;\n    } else if (document.webkitFullscreenEnabled) {\n      fullscreenEnabled = document.webkitFullscreenEnabled;\n      this.prefixName = \"webkit\";\n    } else if (document.mozFullScreenEnabled) {\n      fullscreenEnabled = document.mozFullScreenEnabled;\n      this.prefixName = \"moz\";\n    } else if (document.msFullscreenEnabled) {\n      fullscreenEnabled = document.msFullscreenEnabled;\n      this.prefixName = \"ms\";\n    }\n    if (!fullscreenEnabled) {\n      if (fn !== undefined) fn(); // 执行不支持全屏的回调\n      this.isFullscreenData = false;\n    }\n  }\n\n  /**\n   * @description: 将传进来的元素全屏\n   * @param {String} domName 要全屏的dom名称\n   */\n  Fullscreen(element) {\n    const methodName =\n      this.prefixName === \"\"\n        ? \"requestFullscreen\"\n        : `${this.prefixName}RequestFullScreen`; // API前缀\n    element[methodName](); // 调用全屏\n  }\n\n  // 退出全屏\n  exitFullscreen() {\n    const methodName =\n      this.prefixName === \"\"\n        ? \"exitFullscreen\"\n        : `${this.prefixName}ExitFullscreen`; // API 前缀\n    document[methodName](); // 调用\n  }\n\n  /**\n   * @description: 检测有没有元素处于全屏状态\n   * @return 布尔值\n   */\n  isElementFullScreen() {\n    const fullscreenElement =\n      document.fullscreenElement ||\n      document.msFullscreenElement ||\n      document.mozFullScreenElement ||\n      document.webkitFullscreenElement; // 有前缀的f是大写，没前缀是小写\n    if (fullscreenElement === null) {\n      return false; // 当前没有元素在全屏状态\n    } else {\n      return true; // 有元素在全屏状态\n    }\n  }\n\n  /**\n   * @description: 监听进入/离开全屏\n   * @param {Function} enter 进入全屏的回调\n   *  @param {Function} quit 离开全屏的回调\n   */\n  screenChange(enter, quit) {\n    if (!this.isFullscreenData) return;\n    const methodName = `on${this.prefixName}fullscreenchange`;\n    document[methodName] = (e) => {\n      console.log(e);\n      if (this.isElementFullScreen()) {\n        enter && enter(); // 进入全屏回调\n      } else {\n        quit && quit(); // 离开全屏的回调\n      }\n    };\n  }\n\n  /**\n   * @description: 浏览器无法进入全屏时触发\n   * @param {Function} enterErrorFn 回调\n   */\n  screenError(enterErrorFn) {\n    const methodName = `on${this.prefixName}fullscreenerror`;\n    document[methodName] = (e) => {\n      enterErrorFn && enterErrorFn(e);\n    };\n  }\n}\n```\n\n### 对元素一开始显示或者隐藏处理\n\n这里可以这样处理调用`screenChange`方法，里面执行进入屏幕的回调和离开屏幕的回调，既进入显示，离开隐藏\n\nindex.js：\n\n```js\nlet full = new fullScreen(() => {\n  console.log(\"不支持\");\n});\n\nconst iframe = {\n  enter: function (element) {\n    // 显示\n    element.style.display = \"block\";\n  },\n  quit: function (element) {\n    // 隐藏\n    element.style.display = \"none\";\n  },\n};\n\nfunction iframeScreen() {\n  const element = document.querySelector(\"#iframe-one\");\n  full.Fullscreen(element);\n  full.screenChange(\n    () => iframe.enter(element),\n    () => iframe.quit(element)\n  );\n}\n```\n","source":"_posts/html5/实现全屏功能.md","raw":"---\ntitle: 封装class一次性解决实现全屏功能\ntags: [前端]\ncategories: [html]\ndescription: 封装class一次性解决实现全屏功能\ndate: 2022-07-31\ncover: https://is.gd/rht8Ij\n---\n\n# 封装 class 一次性解决实现全屏功能\n\n### 前言\n\n这里先给项目地址：[地址](https://github.com/kangkang123269/kate-demo/tree/main/html5/fullScreen-demo)\n\n### 支持全屏的 api\n\n1. 浏览器是否支持全屏模式：`document.fullscreenEnabled`\n2. 使元素进入全屏模式：`Element.requestFullscreen()`\n3. 退出全屏：`document.exitFullscreen()`\n4. 检查当前是否有节点处于全屏状态：`document.fullscreenElement`\n5. 进入全屏/离开全屏，触发事件：`document.fullscreenchange`\n6. 无法进入全屏时触发: `document.fullscreenerror`\n\n### 浏览器前缀：\n\n目前并不是所有的浏览器都实现了 API 的无前缀版本，所以我们需要针对不同浏览器，做一下 API 的兼容:\n\n我们需要写成类的形式：\n\n```js\n/**\n * @description: 是否支持全屏+判断浏览器前缀\n * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值\n */\nisFullscreen(fn) {\n  let fullscreenEnabled;\n  // 判断浏览器前缀\n  if (document.fullscreenEnabled) {\n    fullscreenEnabled = document.fullscreenEnabled;\n  } else if (document.webkitFullscreenEnabled) {\n    fullscreenEnabled = document.webkitFullscreenEnabled;\n    this.prefixName = 'webkit';\n  } else if (document.mozFullScreenEnabled) {\n    fullscreenEnabled = document.mozFullScreenEnabled;\n    this.prefixName = 'moz';\n  } else if (document.msFullscreenEnabled) {\n    fullscreenEnabled = document.msFullscreenEnabled;\n    this.prefixName = 'ms';\n  }\n  if (!fullscreenEnabled) {\n    if (fn !== undefined) fn(); // 执行不支持全屏的回调\n    this.isFullscreenData = false;\n  }\n}\n```\n\n### 1. 浏览器是否支持全屏模式：document.fullscreenEnabled\n\n`document.fullscreenEnabled`属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。\n\n### 2. 使元素进入全屏模式：Element.requestFullscreen()\n\n```js\n/**\n * @description: 将传进来的元素全屏\n * @param {String} domName 要全屏的dom名称\n */\nFullscreen(domName) {\n  const element = document.querySelector(domName); // 获取dom\n  const methodName =\n    this.prefixName === ''\n      ? 'requestFullscreen'\n      : `${this.prefixName}RequestFullScreen`; // API前缀\n  element[methodName](); // 调用全屏\n}\n```\n\n### 3. 退出全屏：document.exitFullscreen()\n\n```js\nexitFullscreen() {\n  const methodName =\n    this.prefixName === ''\n      ? 'exitFullscreen'\n      : `${this.prefixName}ExitFullscreen`; // API 前缀\n  document[methodName](); // 调用\n}\n```\n\n### 4. 检查当前是否有节点处于全屏状态：document.fullscreenElement\n\n```js\n/**\n * @description: 检测有没有元素处于全屏状态\n * @return 布尔值\n */\nisElementFullScreen() {\n  const fullscreenElement =\n    document.fullscreenElement ||\n    document.msFullscreenElement ||\n    document.mozFullScreenElement ||\n    document.webkitFullscreenElement; // 有前缀的f是大写，没前缀是小写\n  if (fullscreenElement === null) {\n    return false; // 当前没有元素在全屏状态\n  } else {\n    return true; // 有元素在全屏状态\n  }\n}\n```\n\n事实上，还有一个属性`document.fullscreen`，返回一个布尔值，表示文档是否处于全屏模式。\n\n两个方法效果是一样，但因为 IE 不支持这个属性，所以这里用的是`document.fullscreenElement`.\n\n### 5. 进入全屏/离开全屏，触发事件：document.fullscreenchange\n\n当我们进入全屏和离开全屏的时候，都会触发一个`fullscreenchange`事件。\n\n> 注意：此事件不会提供任何信息，表明是进入全屏或退出全屏。\n\n```js\n/**\n * @description: 监听进入/离开全屏\n * @param {Function} enter 进入全屏的回调\n *  @param {Function} quit 离开全屏的回调\n */\nscreenChange(enter,quit) {\n  if (!this.isFullscreenData) return;\n  const methodName = `on${this.prefixName}fullscreenchange`;\n  document[methodName] = e => {\n    if (this.isElementFullScreen()) {\n      enter && enter(e); // 进入全屏回调\n    } else {\n      quit && quit(e); // 离开全屏的回调\n    }\n  };\n}\n```\n\n**注意：多层全屏的情况**\n\n1. 先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)\n2. 退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)\n3. 出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的 dom 信息来进行判断。\n\n### 6. 无法进入全屏时触发: document.fullscreenerror\n\n比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误:\n\n```js\n/**\n * @description: 浏览器无法进入全屏时触发\n * @param {Function} enterErrorFn 回调\n */\nscreenError(enterErrorFn) {\n  const methodName = `on${this.prefixName}fullscreenerror`;\n  document[methodName] = e => {\n    enterErrorFn && enterErrorFn(e)\n  };\n}\n```\n\n### Css： 全屏模式下的样式\n\n1. 默认设置黑色背景\n\n```css\n:not(:root):-webkit-full-screen::backdrop {\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  background: black; // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色\n}\n```\n\n2. 默认样式：\n\n```css\n:not(:root):-webkit-full-screen {\n  object-fit: contain;\n  position: fixed !important;\n  top: 0px !important;\n  right: 0px !important;\n  bottom: 0px !important;\n  left: 0px !important;\n  box-sizing: border-box !important;\n  min-width: 0px !important;\n  max-width: none !important;\n  min-height: 0px !important;\n  max-height: none !important;\n  width: 100% !important;\n  height: 100% !important;\n  transform: none !important;\n  margin: 0px !important;\n}\n```\n\n### 全屏状态的 CSS：\n\n全屏状态下，大多数浏览器的 CSS 支持:full-screen 伪类，只有 IE11 支持:fullscreen 伪类。使用这个伪类，可以对全屏状态设置单独的 CSS 属性。\n\n```css\n/* 针对dom的全屏设置 */\n.div:-webkit-full-screen {\n  background: #fff;\n}\n/* 全屏属性 */\n:-webkit-full-screen {\n}\n:-moz-full-screen {\n}\n:-ms-fullscreen {\n}\n/* 全屏伪类 当前chrome:70 不支持 */\n:full-screen {\n}\n:fullscreen {\n  /* IE11支持 */\n}\n```\n\n参考资料：阮一峰老师的[Fullscreen API：全屏操作](https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0)\n\n这里是一条华丽的分割线，讲完原理开始实战\n\n---\n\n### 项目的 html\n\nindex.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Document</title>\n</head>\n\n<body>\n  <iframe src=\"https://codesandbox.io/s/\" id=\"iframe-one\" name=\"iframe-one\n      width=\" 100%\" height=\"200\" scrolling=\"no\" frameborder=\"0\"></iframe>\n  <img src=\"vscode.svg\" onclick=\"iframeScreen()\" id=\"vscode\" width=\"100\" height=\"100\" alt=\"\">\n  <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```\n\n### 项目中的 css\n\nindex.css：\n\n```css\n#iframe-one {\n  // 随便是什么元素，一开始不展示元素\n  display: none;\n}\n/* 针对dom的全屏设置 */\n.left:-webkit-full-screen {\n  background: #fff;\n}\n/* 全屏属性 */\n:-webkit-full-screen {\n}\n:-moz-full-screen {\n}\n:-ms-fullscreen {\n}\n/* 全屏伪类 当前chrome:70 不支持 */\n:full-screen {\n}\n:fullscreen {\n  /* IE11支持 */\n}\n```\n\n### 封装完成的 js 文件\n\n以后无论遇到什么全屏问题都可以用改封装得 class\n\nindex.js：\n\n```js\nclass fullScreen {\n  constructor(fn) {\n    // fn是失败的回调函数\n    this.prefixName = \"\"; // 浏览器前缀\n    this.isFullscreenData = true; // 浏览器支持全屏\n    this.isFullscreen(fn);\n  }\n  /**\n   * @description: 是否支持全屏+判断浏览器前缀\n   * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值\n   */\n  isFullscreen(fn) {\n    let fullscreenEnabled; // 是否支持全屏\n    // 判断浏览器前缀\n    if (document.fullscreenEnabled) {\n      fullscreenEnabled = document.fullscreenEnabled;\n    } else if (document.webkitFullscreenEnabled) {\n      fullscreenEnabled = document.webkitFullscreenEnabled;\n      this.prefixName = \"webkit\";\n    } else if (document.mozFullScreenEnabled) {\n      fullscreenEnabled = document.mozFullScreenEnabled;\n      this.prefixName = \"moz\";\n    } else if (document.msFullscreenEnabled) {\n      fullscreenEnabled = document.msFullscreenEnabled;\n      this.prefixName = \"ms\";\n    }\n    if (!fullscreenEnabled) {\n      if (fn !== undefined) fn(); // 执行不支持全屏的回调\n      this.isFullscreenData = false;\n    }\n  }\n\n  /**\n   * @description: 将传进来的元素全屏\n   * @param {String} domName 要全屏的dom名称\n   */\n  Fullscreen(element) {\n    const methodName =\n      this.prefixName === \"\"\n        ? \"requestFullscreen\"\n        : `${this.prefixName}RequestFullScreen`; // API前缀\n    element[methodName](); // 调用全屏\n  }\n\n  // 退出全屏\n  exitFullscreen() {\n    const methodName =\n      this.prefixName === \"\"\n        ? \"exitFullscreen\"\n        : `${this.prefixName}ExitFullscreen`; // API 前缀\n    document[methodName](); // 调用\n  }\n\n  /**\n   * @description: 检测有没有元素处于全屏状态\n   * @return 布尔值\n   */\n  isElementFullScreen() {\n    const fullscreenElement =\n      document.fullscreenElement ||\n      document.msFullscreenElement ||\n      document.mozFullScreenElement ||\n      document.webkitFullscreenElement; // 有前缀的f是大写，没前缀是小写\n    if (fullscreenElement === null) {\n      return false; // 当前没有元素在全屏状态\n    } else {\n      return true; // 有元素在全屏状态\n    }\n  }\n\n  /**\n   * @description: 监听进入/离开全屏\n   * @param {Function} enter 进入全屏的回调\n   *  @param {Function} quit 离开全屏的回调\n   */\n  screenChange(enter, quit) {\n    if (!this.isFullscreenData) return;\n    const methodName = `on${this.prefixName}fullscreenchange`;\n    document[methodName] = (e) => {\n      console.log(e);\n      if (this.isElementFullScreen()) {\n        enter && enter(); // 进入全屏回调\n      } else {\n        quit && quit(); // 离开全屏的回调\n      }\n    };\n  }\n\n  /**\n   * @description: 浏览器无法进入全屏时触发\n   * @param {Function} enterErrorFn 回调\n   */\n  screenError(enterErrorFn) {\n    const methodName = `on${this.prefixName}fullscreenerror`;\n    document[methodName] = (e) => {\n      enterErrorFn && enterErrorFn(e);\n    };\n  }\n}\n```\n\n### 对元素一开始显示或者隐藏处理\n\n这里可以这样处理调用`screenChange`方法，里面执行进入屏幕的回调和离开屏幕的回调，既进入显示，离开隐藏\n\nindex.js：\n\n```js\nlet full = new fullScreen(() => {\n  console.log(\"不支持\");\n});\n\nconst iframe = {\n  enter: function (element) {\n    // 显示\n    element.style.display = \"block\";\n  },\n  quit: function (element) {\n    // 隐藏\n    element.style.display = \"none\";\n  },\n};\n\nfunction iframeScreen() {\n  const element = document.querySelector(\"#iframe-one\");\n  full.Fullscreen(element);\n  full.screenChange(\n    () => iframe.enter(element),\n    () => iframe.quit(element)\n  );\n}\n```\n","slug":"html5/实现全屏功能","published":1,"updated":"2023-07-30T22:01:25.915Z","_id":"clkpywdlr000b36l1b4gteu1r","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"封装-class-一次性解决实现全屏功能\"><a href=\"#封装-class-一次性解决实现全屏功能\" class=\"headerlink\" title=\"封装 class 一次性解决实现全屏功能\"></a>封装 class 一次性解决实现全屏功能</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里先给项目地址：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/html5/fullScreen-demo\">地址</a></p>\n<h3 id=\"支持全屏的-api\"><a href=\"#支持全屏的-api\" class=\"headerlink\" title=\"支持全屏的 api\"></a>支持全屏的 api</h3><ol>\n<li>浏览器是否支持全屏模式：<code>document.fullscreenEnabled</code></li>\n<li>使元素进入全屏模式：<code>Element.requestFullscreen()</code></li>\n<li>退出全屏：<code>document.exitFullscreen()</code></li>\n<li>检查当前是否有节点处于全屏状态：<code>document.fullscreenElement</code></li>\n<li>进入全屏&#x2F;离开全屏，触发事件：<code>document.fullscreenchange</code></li>\n<li>无法进入全屏时触发: <code>document.fullscreenerror</code></li>\n</ol>\n<h3 id=\"浏览器前缀：\"><a href=\"#浏览器前缀：\" class=\"headerlink\" title=\"浏览器前缀：\"></a>浏览器前缀：</h3><p>目前并不是所有的浏览器都实现了 API 的无前缀版本，所以我们需要针对不同浏览器，做一下 API 的兼容:</p>\n<p>我们需要写成类的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isFullscreen</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fullscreenEnabled;</span><br><span class=\"line\">  <span class=\"comment\">// 判断浏览器前缀</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;webkit&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;moz&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;ms&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fullscreenEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fn !== <span class=\"literal\">undefined</span>) <span class=\"title function_\">fn</span>(); <span class=\"comment\">// 执行不支持全屏的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-浏览器是否支持全屏模式：document-fullscreenEnabled\"><a href=\"#1-浏览器是否支持全屏模式：document-fullscreenEnabled\" class=\"headerlink\" title=\"1. 浏览器是否支持全屏模式：document.fullscreenEnabled\"></a>1. 浏览器是否支持全屏模式：document.fullscreenEnabled</h3><p><code>document.fullscreenEnabled</code>属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。</p>\n<h3 id=\"2-使元素进入全屏模式：Element-requestFullscreen\"><a href=\"#2-使元素进入全屏模式：Element-requestFullscreen\" class=\"headerlink\" title=\"2. 使元素进入全屏模式：Element.requestFullscreen()\"></a>2. 使元素进入全屏模式：Element.requestFullscreen()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 将传进来的元素全屏</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">Fullscreen</span>(domName) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(domName); <span class=\"comment\">// 获取dom</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;requestFullscreen&#x27;</span></span><br><span class=\"line\">      : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class=\"comment\">// API前缀</span></span><br><span class=\"line\">  element[methodName](); <span class=\"comment\">// 调用全屏</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-退出全屏：document-exitFullscreen\"><a href=\"#3-退出全屏：document-exitFullscreen\" class=\"headerlink\" title=\"3. 退出全屏：document.exitFullscreen()\"></a>3. 退出全屏：document.exitFullscreen()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">exitFullscreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;exitFullscreen&#x27;</span></span><br><span class=\"line\">      : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class=\"comment\">// API 前缀</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName](); <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-检查当前是否有节点处于全屏状态：document-fullscreenElement\"><a href=\"#4-检查当前是否有节点处于全屏状态：document-fullscreenElement\" class=\"headerlink\" title=\"4. 检查当前是否有节点处于全屏状态：document.fullscreenElement\"></a>4. 检查当前是否有节点处于全屏状态：document.fullscreenElement</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isElementFullScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fullscreenElement =</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenElement</span>; <span class=\"comment\">// 有前缀的f是大写，没前缀是小写</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fullscreenElement === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 当前没有元素在全屏状态</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 有元素在全屏状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事实上，还有一个属性<code>document.fullscreen</code>，返回一个布尔值，表示文档是否处于全屏模式。</p>\n<p>两个方法效果是一样，但因为 IE 不支持这个属性，所以这里用的是<code>document.fullscreenElement</code>.</p>\n<h3 id=\"5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange\"><a href=\"#5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange\" class=\"headerlink\" title=\"5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange\"></a>5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange</h3><p>当我们进入全屏和离开全屏的时候，都会触发一个<code>fullscreenchange</code>事件。</p>\n<blockquote>\n<p>注意：此事件不会提供任何信息，表明是进入全屏或退出全屏。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 监听进入/离开全屏</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">screenChange</span>(<span class=\"params\">enter,quit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isElementFullScreen</span>()) &#123;</span><br><span class=\"line\">      enter &amp;&amp; <span class=\"title function_\">enter</span>(e); <span class=\"comment\">// 进入全屏回调</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      quit &amp;&amp; <span class=\"title function_\">quit</span>(e); <span class=\"comment\">// 离开全屏的回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：多层全屏的情况</strong></p>\n<ol>\n<li>先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)</li>\n<li>退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)</li>\n<li>出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的 dom 信息来进行判断。</li>\n</ol>\n<h3 id=\"6-无法进入全屏时触发-document-fullscreenerror\"><a href=\"#6-无法进入全屏时触发-document-fullscreenerror\" class=\"headerlink\" title=\"6. 无法进入全屏时触发: document.fullscreenerror\"></a>6. 无法进入全屏时触发: document.fullscreenerror</h3><p>比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enterErrorFn 回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">screenError</span>(<span class=\"params\">enterErrorFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    enterErrorFn &amp;&amp; <span class=\"title function_\">enterErrorFn</span>(e)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Css：-全屏模式下的样式\"><a href=\"#Css：-全屏模式下的样式\" class=\"headerlink\" title=\"Css： 全屏模式下的样式\"></a>Css： 全屏模式下的样式</h3><ol>\n<li>默认设置黑色背景</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:root</span>):-webkit-full-screen::backdrop &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black; // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>默认样式：</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:root</span>):-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">object-fit</span>: contain;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全屏状态的-CSS：\"><a href=\"#全屏状态的-CSS：\" class=\"headerlink\" title=\"全屏状态的 CSS：\"></a>全屏状态的 CSS：</h3><p>全屏状态下，大多数浏览器的 CSS 支持:full-screen 伪类，只有 IE11 支持:fullscreen 伪类。使用这个伪类，可以对全屏状态设置单独的 CSS 属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 针对dom的全屏设置 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.div</span>:-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏属性 */</span></span><br><span class=\"line\">:-webkit-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-moz-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-ms-fullscreen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class=\"line\">:full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE11支持 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：阮一峰老师的<a href=\"https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0\">Fullscreen API：全屏操作</a></p>\n<p>这里是一条华丽的分割线，讲完原理开始实战</p>\n<hr>\n<h3 id=\"项目的-html\"><a href=\"#项目的-html\" class=\"headerlink\" title=\"项目的 html\"></a>项目的 html</h3><p>index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./index.css&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codesandbox.io/s/&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;iframe-one&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;iframe-one</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      width=&quot;</span> <span class=\"attr\">100</span>%&quot; <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">&quot;no&quot;</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;vscode.svg&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;iframeScreen()&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vscode&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目中的-css\"><a href=\"#项目中的-css\" class=\"headerlink\" title=\"项目中的 css\"></a>项目中的 css</h3><p>index.css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#iframe-one</span> &#123;</span><br><span class=\"line\">  // 随便是什么元素，一开始不展示元素</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 针对dom的全屏设置 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>:-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏属性 */</span></span><br><span class=\"line\">:-webkit-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-moz-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-ms-fullscreen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class=\"line\">:full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE11支持 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装完成的-js-文件\"><a href=\"#封装完成的-js-文件\" class=\"headerlink\" title=\"封装完成的 js 文件\"></a>封装完成的 js 文件</h3><p>以后无论遇到什么全屏问题都可以用改封装得 class</p>\n<p>index.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">fullScreen</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn是失败的回调函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// 浏览器前缀</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 浏览器支持全屏</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">isFullscreen</span>(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isFullscreen</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullscreenEnabled; <span class=\"comment\">// 是否支持全屏</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断浏览器前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;webkit&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;moz&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;ms&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fullscreenEnabled) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fn !== <span class=\"literal\">undefined</span>) <span class=\"title function_\">fn</span>(); <span class=\"comment\">// 执行不支持全屏的回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 将传进来的元素全屏</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title class_\">Fullscreen</span>(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        ? <span class=\"string\">&quot;requestFullscreen&quot;</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class=\"comment\">// API前缀</span></span><br><span class=\"line\">    element[methodName](); <span class=\"comment\">// 调用全屏</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 退出全屏</span></span><br><span class=\"line\">  <span class=\"title function_\">exitFullscreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        ? <span class=\"string\">&quot;exitFullscreen&quot;</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class=\"comment\">// API 前缀</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName](); <span class=\"comment\">// 调用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> 布尔值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isElementFullScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullscreenElement =</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenElement</span>; <span class=\"comment\">// 有前缀的f是大写，没前缀是小写</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fullscreenElement === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 当前没有元素在全屏状态</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 有元素在全屏状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 监听进入/离开全屏</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\">   *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">screenChange</span>(<span class=\"params\">enter, quit</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isElementFullScreen</span>()) &#123;</span><br><span class=\"line\">        enter &amp;&amp; <span class=\"title function_\">enter</span>(); <span class=\"comment\">// 进入全屏回调</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        quit &amp;&amp; <span class=\"title function_\">quit</span>(); <span class=\"comment\">// 离开全屏的回调</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enterErrorFn 回调</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">screenError</span>(<span class=\"params\">enterErrorFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      enterErrorFn &amp;&amp; <span class=\"title function_\">enterErrorFn</span>(e);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对元素一开始显示或者隐藏处理\"><a href=\"#对元素一开始显示或者隐藏处理\" class=\"headerlink\" title=\"对元素一开始显示或者隐藏处理\"></a>对元素一开始显示或者隐藏处理</h3><p>这里可以这样处理调用<code>screenChange</code>方法，里面执行进入屏幕的回调和离开屏幕的回调，既进入显示，离开隐藏</p>\n<p>index.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> full = <span class=\"keyword\">new</span> <span class=\"title function_\">fullScreen</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;不支持&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iframe = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">quit</span>: <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">    element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">iframeScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#iframe-one&quot;</span>);</span><br><span class=\"line\">  full.<span class=\"title class_\">Fullscreen</span>(element);</span><br><span class=\"line\">  full.<span class=\"title function_\">screenChange</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> iframe.<span class=\"title function_\">enter</span>(element),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> iframe.<span class=\"title function_\">quit</span>(element)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"封装-class-一次性解决实现全屏功能\"><a href=\"#封装-class-一次性解决实现全屏功能\" class=\"headerlink\" title=\"封装 class 一次性解决实现全屏功能\"></a>封装 class 一次性解决实现全屏功能</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里先给项目地址：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/html5/fullScreen-demo\">地址</a></p>\n<h3 id=\"支持全屏的-api\"><a href=\"#支持全屏的-api\" class=\"headerlink\" title=\"支持全屏的 api\"></a>支持全屏的 api</h3><ol>\n<li>浏览器是否支持全屏模式：<code>document.fullscreenEnabled</code></li>\n<li>使元素进入全屏模式：<code>Element.requestFullscreen()</code></li>\n<li>退出全屏：<code>document.exitFullscreen()</code></li>\n<li>检查当前是否有节点处于全屏状态：<code>document.fullscreenElement</code></li>\n<li>进入全屏&#x2F;离开全屏，触发事件：<code>document.fullscreenchange</code></li>\n<li>无法进入全屏时触发: <code>document.fullscreenerror</code></li>\n</ol>\n<h3 id=\"浏览器前缀：\"><a href=\"#浏览器前缀：\" class=\"headerlink\" title=\"浏览器前缀：\"></a>浏览器前缀：</h3><p>目前并不是所有的浏览器都实现了 API 的无前缀版本，所以我们需要针对不同浏览器，做一下 API 的兼容:</p>\n<p>我们需要写成类的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isFullscreen</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fullscreenEnabled;</span><br><span class=\"line\">  <span class=\"comment\">// 判断浏览器前缀</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;webkit&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;moz&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">    fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&#x27;ms&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fullscreenEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fn !== <span class=\"literal\">undefined</span>) <span class=\"title function_\">fn</span>(); <span class=\"comment\">// 执行不支持全屏的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-浏览器是否支持全屏模式：document-fullscreenEnabled\"><a href=\"#1-浏览器是否支持全屏模式：document-fullscreenEnabled\" class=\"headerlink\" title=\"1. 浏览器是否支持全屏模式：document.fullscreenEnabled\"></a>1. 浏览器是否支持全屏模式：document.fullscreenEnabled</h3><p><code>document.fullscreenEnabled</code>属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。</p>\n<h3 id=\"2-使元素进入全屏模式：Element-requestFullscreen\"><a href=\"#2-使元素进入全屏模式：Element-requestFullscreen\" class=\"headerlink\" title=\"2. 使元素进入全屏模式：Element.requestFullscreen()\"></a>2. 使元素进入全屏模式：Element.requestFullscreen()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 将传进来的元素全屏</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">Fullscreen</span>(domName) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(domName); <span class=\"comment\">// 获取dom</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;requestFullscreen&#x27;</span></span><br><span class=\"line\">      : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class=\"comment\">// API前缀</span></span><br><span class=\"line\">  element[methodName](); <span class=\"comment\">// 调用全屏</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-退出全屏：document-exitFullscreen\"><a href=\"#3-退出全屏：document-exitFullscreen\" class=\"headerlink\" title=\"3. 退出全屏：document.exitFullscreen()\"></a>3. 退出全屏：document.exitFullscreen()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">exitFullscreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;exitFullscreen&#x27;</span></span><br><span class=\"line\">      : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class=\"comment\">// API 前缀</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName](); <span class=\"comment\">// 调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-检查当前是否有节点处于全屏状态：document-fullscreenElement\"><a href=\"#4-检查当前是否有节点处于全屏状态：document-fullscreenElement\" class=\"headerlink\" title=\"4. 检查当前是否有节点处于全屏状态：document.fullscreenElement\"></a>4. 检查当前是否有节点处于全屏状态：document.fullscreenElement</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isElementFullScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fullscreenElement =</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenElement</span> ||</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenElement</span>; <span class=\"comment\">// 有前缀的f是大写，没前缀是小写</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fullscreenElement === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 当前没有元素在全屏状态</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 有元素在全屏状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事实上，还有一个属性<code>document.fullscreen</code>，返回一个布尔值，表示文档是否处于全屏模式。</p>\n<p>两个方法效果是一样，但因为 IE 不支持这个属性，所以这里用的是<code>document.fullscreenElement</code>.</p>\n<h3 id=\"5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange\"><a href=\"#5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange\" class=\"headerlink\" title=\"5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange\"></a>5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange</h3><p>当我们进入全屏和离开全屏的时候，都会触发一个<code>fullscreenchange</code>事件。</p>\n<blockquote>\n<p>注意：此事件不会提供任何信息，表明是进入全屏或退出全屏。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 监听进入/离开全屏</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">screenChange</span>(<span class=\"params\">enter,quit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isElementFullScreen</span>()) &#123;</span><br><span class=\"line\">      enter &amp;&amp; <span class=\"title function_\">enter</span>(e); <span class=\"comment\">// 进入全屏回调</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      quit &amp;&amp; <span class=\"title function_\">quit</span>(e); <span class=\"comment\">// 离开全屏的回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：多层全屏的情况</strong></p>\n<ol>\n<li>先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)</li>\n<li>退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)</li>\n<li>出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的 dom 信息来进行判断。</li>\n</ol>\n<h3 id=\"6-无法进入全屏时触发-document-fullscreenerror\"><a href=\"#6-无法进入全屏时触发-document-fullscreenerror\" class=\"headerlink\" title=\"6. 无法进入全屏时触发: document.fullscreenerror\"></a>6. 无法进入全屏时触发: document.fullscreenerror</h3><p>比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enterErrorFn 回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">screenError</span>(<span class=\"params\">enterErrorFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    enterErrorFn &amp;&amp; <span class=\"title function_\">enterErrorFn</span>(e)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Css：-全屏模式下的样式\"><a href=\"#Css：-全屏模式下的样式\" class=\"headerlink\" title=\"Css： 全屏模式下的样式\"></a>Css： 全屏模式下的样式</h3><ol>\n<li>默认设置黑色背景</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:root</span>):-webkit-full-screen::backdrop &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black; // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>默认样式：</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:root</span>):-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">object-fit</span>: contain;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全屏状态的-CSS：\"><a href=\"#全屏状态的-CSS：\" class=\"headerlink\" title=\"全屏状态的 CSS：\"></a>全屏状态的 CSS：</h3><p>全屏状态下，大多数浏览器的 CSS 支持:full-screen 伪类，只有 IE11 支持:fullscreen 伪类。使用这个伪类，可以对全屏状态设置单独的 CSS 属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 针对dom的全屏设置 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.div</span>:-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏属性 */</span></span><br><span class=\"line\">:-webkit-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-moz-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-ms-fullscreen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class=\"line\">:full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE11支持 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：阮一峰老师的<a href=\"https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0\">Fullscreen API：全屏操作</a></p>\n<p>这里是一条华丽的分割线，讲完原理开始实战</p>\n<hr>\n<h3 id=\"项目的-html\"><a href=\"#项目的-html\" class=\"headerlink\" title=\"项目的 html\"></a>项目的 html</h3><p>index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./index.css&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codesandbox.io/s/&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;iframe-one&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;iframe-one</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      width=&quot;</span> <span class=\"attr\">100</span>%&quot; <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">&quot;no&quot;</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;vscode.svg&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;iframeScreen()&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vscode&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目中的-css\"><a href=\"#项目中的-css\" class=\"headerlink\" title=\"项目中的 css\"></a>项目中的 css</h3><p>index.css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#iframe-one</span> &#123;</span><br><span class=\"line\">  // 随便是什么元素，一开始不展示元素</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 针对dom的全屏设置 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>:-webkit-full-screen &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏属性 */</span></span><br><span class=\"line\">:-webkit-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-moz-full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:-ms-fullscreen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class=\"line\">:full-screen &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE11支持 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装完成的-js-文件\"><a href=\"#封装完成的-js-文件\" class=\"headerlink\" title=\"封装完成的 js 文件\"></a>封装完成的 js 文件</h3><p>以后无论遇到什么全屏问题都可以用改封装得 class</p>\n<p>index.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">fullScreen</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn是失败的回调函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// 浏览器前缀</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 浏览器支持全屏</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">isFullscreen</span>(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isFullscreen</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullscreenEnabled; <span class=\"comment\">// 是否支持全屏</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断浏览器前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;webkit&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;moz&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>) &#123;</span><br><span class=\"line\">      fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> = <span class=\"string\">&quot;ms&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fullscreenEnabled) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fn !== <span class=\"literal\">undefined</span>) <span class=\"title function_\">fn</span>(); <span class=\"comment\">// 执行不支持全屏的回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 将传进来的元素全屏</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title class_\">Fullscreen</span>(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        ? <span class=\"string\">&quot;requestFullscreen&quot;</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class=\"comment\">// API前缀</span></span><br><span class=\"line\">    element[methodName](); <span class=\"comment\">// 调用全屏</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 退出全屏</span></span><br><span class=\"line\">  <span class=\"title function_\">exitFullscreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName =</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">prefixName</span> === <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        ? <span class=\"string\">&quot;exitFullscreen&quot;</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class=\"comment\">// API 前缀</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName](); <span class=\"comment\">// 调用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> 布尔值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isElementFullScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullscreenElement =</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenElement</span> ||</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenElement</span>; <span class=\"comment\">// 有前缀的f是大写，没前缀是小写</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fullscreenElement === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 当前没有元素在全屏状态</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 有元素在全屏状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 监听进入/离开全屏</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\">   *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">screenChange</span>(<span class=\"params\">enter, quit</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFullscreenData</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isElementFullScreen</span>()) &#123;</span><br><span class=\"line\">        enter &amp;&amp; <span class=\"title function_\">enter</span>(); <span class=\"comment\">// 进入全屏回调</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        quit &amp;&amp; <span class=\"title function_\">quit</span>(); <span class=\"comment\">// 离开全屏的回调</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; enterErrorFn 回调</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">screenError</span>(<span class=\"params\">enterErrorFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodName = <span class=\"string\">`on<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>[methodName] = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      enterErrorFn &amp;&amp; <span class=\"title function_\">enterErrorFn</span>(e);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对元素一开始显示或者隐藏处理\"><a href=\"#对元素一开始显示或者隐藏处理\" class=\"headerlink\" title=\"对元素一开始显示或者隐藏处理\"></a>对元素一开始显示或者隐藏处理</h3><p>这里可以这样处理调用<code>screenChange</code>方法，里面执行进入屏幕的回调和离开屏幕的回调，既进入显示，离开隐藏</p>\n<p>index.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> full = <span class=\"keyword\">new</span> <span class=\"title function_\">fullScreen</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;不支持&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iframe = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">quit</span>: <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">    element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">iframeScreen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#iframe-one&quot;</span>);</span><br><span class=\"line\">  full.<span class=\"title class_\">Fullscreen</span>(element);</span><br><span class=\"line\">  full.<span class=\"title function_\">screenChange</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> iframe.<span class=\"title function_\">enter</span>(element),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> iframe.<span class=\"title function_\">quit</span>(element)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"docker基础学习","description":"docker基础学习","date":"2022-07-27T16:00:00.000Z","cover":"https://is.gd/ISMSi4","_content":"\n# docker 基础学习——（篇一）\n\n### 安装 Docker\n\n- Mac：[download.docker.com/mac/stable/…](https://download.docker.com/mac/stable/Docker.dmg)\n- Windows：[download.docker.com/win/stable/…](https://download.docker.com/win/stable/Docker for Windows Installer.exe)\n- Linux：[get.docker.com/](https://get.docker.com/)\n\n### Docker 的组成部分\n\n- 镜像(image)\n  - docker 镜像就好像是一个模板，可以通过这个模板来创建出来容器的服务，mysql 镜像--->run 命令--->mysql 容器(提供 mysql 服务)\n  - 通过这个镜像可以创建多个容器(最终服务运行或者项目运行就在容器中的)\n- 容器(container)\n  - Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像进行创建\n  - 启动，停止，删除，基本命令\n  - 目前就可以把这个容器理解为就是一个简易的 linux 系统\n- 仓库(repository)\n  - 仓库就是存放镜像的地方\n  - 仓库分为公有仓库和私有仓库\n  - Docker Hub(默认是国外的)\n  - 阿里云……都有容器服务器(配置镜像加速)\n\n#### **docker 的运行**\n\n- run 命令执行后到底发生了什么？\n\n  **在执行了 docker 这个命令后，从 client 端发送到 server 这个服务端，在服务中进行执行，这样首先 docker 会在本地进行查找，看看镜像是不是存在，存在直接运行，不存在的话，会发送指令到 docker-hub 中，进行查找，若找到了就进行下载，若没有找到，会从服务端返回错误信息，假设找到了，下载到本地，本地就会加载这个镜像，运行起来。**\n\n- **底层原理**\n\n  - docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端进行访问\n  - Docker-server 接收到 docker-client 的指令，就会执行这个命令\n\n### docker 一些基础的命令\n\n#### 镜像命令\n\n- 查看所有的镜像列表\n\n```\ndocker images\n```\n\n- 搜索镜像\n\n```\ndocker search 镜像名称\n```\n\n- 下载镜像\n\n```\ndocker pull 镜像名称\ndocker pull 镜像名称:tag\n```\n\n- 删除镜像\n\n```\nrmi -------remove image\nDocker rmi -f 镜像id/镜像名称                删除一个镜像\nDocker rmi -f 镜像id 镜像id  镜像id        删除多个镜像\nDocker rmi -f  $(docker images -aq)     删除所有镜像\n```\n\n#### 容器命令\n\n- **下载容器**\n\n```\ndocker pull centos\n```\n\n- **新建容器并启动**\n\n```\nDocker run [可选参数] image\n```\n\n可选参数：\n\n- `--name = \"Name\"` 给容器起名字 centos1 centos2 用来区分容器\n- `-d` 后台的方式进行运行\n- `-it` 使用交互式的运行方式，进入容器后查看内容\n- `-p` 指定容器的端口 -p 8080：8080\n  - 四种端口的指定方式\n    - -p ip:主机端口:容器端口\n    - **-p** **主机端口：容器端口** **（最常用）**\n    - -p 容器端口\n    - 端口号\n- **列出所有运行的容器**\n  - `无参数` 列出当前正在运行的容器\n  - `-a` 列出当前正在运行的容器+带出历史运行过的容器\n  - `-n=？` 显示最近创建的容器\n  - `-q` 只显示容器的编号\n- **退出容器**\n  - Exit 直接容器停止并且退出了\n  - Ctrl+Q 容器不停止但是退出了\n- **删除容器**\n  - `Docker rm` 容器 id\n  - `Docker rm` 容器 id 容器 id(删除多个)\n  - `Docker rm -f $(docker ps -aq)`\n    - Docker ps -a -q|xargs docker rm 管道的方式删除所有的容器\n    - -f 是强制删除\n- **启动和停止容器的操作**\n  - 启动\n    - docker start 容器 id\n  - 重启容器\n    - docker restart 容器 id\n  - 停止容器\n    - docker stop 容器 id\n  - 杀掉容器\n    - docker kill 容器 id\n\n#### 其他常见命令\n\n- 后台启动容器\n\n  - `Docker run -d` 镜像名\n    - 问题：docker ps 发现 centos 停止了\n    - 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动提停止\n      - 通俗的理解就是：我们在 run centos 的时候，之前会切换到容器之中让我们进行操作，但是-d 直接从后台进行启动，docker 会检测到这个部分是没有人操作或者容器没有动静，自己就会将相应的资源进行停止\n      - 所以 nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了\n\n- 查看日志\n\n  - Docker logs -tf --tail 10 容器 id\n\n- 测试\n\n  - 自己编写一段 shell 脚本让程序在后台自己跑\n    - Docker run -d centos /bin/sh -c \"while true;do echo hahaha;sleep 1;done\"\n  - docker ps\n  - Docker logs -tf --tail 10 容器 id\n\n- 查看容器内部的进程信息\n\n  - top 命令\n    - docker top 容器 id\n\n- 查看容器的元数据\n\n  - docker inspect 容器 id\n\n- 进入当前正在运行的容器\n\n  - exec\n    - 通常情况下的容器都是在后台方式运行的，需要我们进入容器 ，修改一些配置\n\n- 查看历史命令\n\n```\ndocker history 镜像id\n```\n\n#### 分层理解\n\n- 分层的镜像\n  - 我们可以去下载一个镜像，注意观察下载日志的输出，可以看到的是一层一层的下载\n- 思考：为什么 Docker 镜像要采用这种分层的结构那？\n  - 最大的好处，我觉得莫过于资源共享！比如有多个镜像团队都从相同的 Base 镜像构建而来，那么宿主机只需要在磁盘中保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。\n\n#### commit 镜像\n\nDocker commit 提交容器成为一个新的副本\n\n```\nDocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器id 目标镜像:[Tag]\n```\n\n- 实战测试\n  - 启动一个默认的 tomcat\n  - 发现这个 tomcat 是没写 webapps 应用的，镜像的原因，官方镜像默认 webapps 下面是没有东西的\n  - 自己拷贝文件进去\n  - 将我们修改过的镜像提交成一个新的镜像\n\n> 推荐学习：https://juejin.cn/post/6977180684376866847\n","source":"_posts/docker/docker基础学习.md","raw":"---\ntitle: docker基础学习\ntags: [运维]\ncategories: [docker]\ndescription: docker基础学习\ndate: 2022-07-28\ncover: https://is.gd/ISMSi4\n---\n\n# docker 基础学习——（篇一）\n\n### 安装 Docker\n\n- Mac：[download.docker.com/mac/stable/…](https://download.docker.com/mac/stable/Docker.dmg)\n- Windows：[download.docker.com/win/stable/…](https://download.docker.com/win/stable/Docker for Windows Installer.exe)\n- Linux：[get.docker.com/](https://get.docker.com/)\n\n### Docker 的组成部分\n\n- 镜像(image)\n  - docker 镜像就好像是一个模板，可以通过这个模板来创建出来容器的服务，mysql 镜像--->run 命令--->mysql 容器(提供 mysql 服务)\n  - 通过这个镜像可以创建多个容器(最终服务运行或者项目运行就在容器中的)\n- 容器(container)\n  - Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像进行创建\n  - 启动，停止，删除，基本命令\n  - 目前就可以把这个容器理解为就是一个简易的 linux 系统\n- 仓库(repository)\n  - 仓库就是存放镜像的地方\n  - 仓库分为公有仓库和私有仓库\n  - Docker Hub(默认是国外的)\n  - 阿里云……都有容器服务器(配置镜像加速)\n\n#### **docker 的运行**\n\n- run 命令执行后到底发生了什么？\n\n  **在执行了 docker 这个命令后，从 client 端发送到 server 这个服务端，在服务中进行执行，这样首先 docker 会在本地进行查找，看看镜像是不是存在，存在直接运行，不存在的话，会发送指令到 docker-hub 中，进行查找，若找到了就进行下载，若没有找到，会从服务端返回错误信息，假设找到了，下载到本地，本地就会加载这个镜像，运行起来。**\n\n- **底层原理**\n\n  - docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端进行访问\n  - Docker-server 接收到 docker-client 的指令，就会执行这个命令\n\n### docker 一些基础的命令\n\n#### 镜像命令\n\n- 查看所有的镜像列表\n\n```\ndocker images\n```\n\n- 搜索镜像\n\n```\ndocker search 镜像名称\n```\n\n- 下载镜像\n\n```\ndocker pull 镜像名称\ndocker pull 镜像名称:tag\n```\n\n- 删除镜像\n\n```\nrmi -------remove image\nDocker rmi -f 镜像id/镜像名称                删除一个镜像\nDocker rmi -f 镜像id 镜像id  镜像id        删除多个镜像\nDocker rmi -f  $(docker images -aq)     删除所有镜像\n```\n\n#### 容器命令\n\n- **下载容器**\n\n```\ndocker pull centos\n```\n\n- **新建容器并启动**\n\n```\nDocker run [可选参数] image\n```\n\n可选参数：\n\n- `--name = \"Name\"` 给容器起名字 centos1 centos2 用来区分容器\n- `-d` 后台的方式进行运行\n- `-it` 使用交互式的运行方式，进入容器后查看内容\n- `-p` 指定容器的端口 -p 8080：8080\n  - 四种端口的指定方式\n    - -p ip:主机端口:容器端口\n    - **-p** **主机端口：容器端口** **（最常用）**\n    - -p 容器端口\n    - 端口号\n- **列出所有运行的容器**\n  - `无参数` 列出当前正在运行的容器\n  - `-a` 列出当前正在运行的容器+带出历史运行过的容器\n  - `-n=？` 显示最近创建的容器\n  - `-q` 只显示容器的编号\n- **退出容器**\n  - Exit 直接容器停止并且退出了\n  - Ctrl+Q 容器不停止但是退出了\n- **删除容器**\n  - `Docker rm` 容器 id\n  - `Docker rm` 容器 id 容器 id(删除多个)\n  - `Docker rm -f $(docker ps -aq)`\n    - Docker ps -a -q|xargs docker rm 管道的方式删除所有的容器\n    - -f 是强制删除\n- **启动和停止容器的操作**\n  - 启动\n    - docker start 容器 id\n  - 重启容器\n    - docker restart 容器 id\n  - 停止容器\n    - docker stop 容器 id\n  - 杀掉容器\n    - docker kill 容器 id\n\n#### 其他常见命令\n\n- 后台启动容器\n\n  - `Docker run -d` 镜像名\n    - 问题：docker ps 发现 centos 停止了\n    - 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动提停止\n      - 通俗的理解就是：我们在 run centos 的时候，之前会切换到容器之中让我们进行操作，但是-d 直接从后台进行启动，docker 会检测到这个部分是没有人操作或者容器没有动静，自己就会将相应的资源进行停止\n      - 所以 nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了\n\n- 查看日志\n\n  - Docker logs -tf --tail 10 容器 id\n\n- 测试\n\n  - 自己编写一段 shell 脚本让程序在后台自己跑\n    - Docker run -d centos /bin/sh -c \"while true;do echo hahaha;sleep 1;done\"\n  - docker ps\n  - Docker logs -tf --tail 10 容器 id\n\n- 查看容器内部的进程信息\n\n  - top 命令\n    - docker top 容器 id\n\n- 查看容器的元数据\n\n  - docker inspect 容器 id\n\n- 进入当前正在运行的容器\n\n  - exec\n    - 通常情况下的容器都是在后台方式运行的，需要我们进入容器 ，修改一些配置\n\n- 查看历史命令\n\n```\ndocker history 镜像id\n```\n\n#### 分层理解\n\n- 分层的镜像\n  - 我们可以去下载一个镜像，注意观察下载日志的输出，可以看到的是一层一层的下载\n- 思考：为什么 Docker 镜像要采用这种分层的结构那？\n  - 最大的好处，我觉得莫过于资源共享！比如有多个镜像团队都从相同的 Base 镜像构建而来，那么宿主机只需要在磁盘中保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。\n\n#### commit 镜像\n\nDocker commit 提交容器成为一个新的副本\n\n```\nDocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器id 目标镜像:[Tag]\n```\n\n- 实战测试\n  - 启动一个默认的 tomcat\n  - 发现这个 tomcat 是没写 webapps 应用的，镜像的原因，官方镜像默认 webapps 下面是没有东西的\n  - 自己拷贝文件进去\n  - 将我们修改过的镜像提交成一个新的镜像\n\n> 推荐学习：https://juejin.cn/post/6977180684376866847\n","slug":"docker/docker基础学习","published":1,"updated":"2023-07-30T22:01:35.460Z","_id":"clkpywdlt000f36l1hmxg07k9","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"docker-基础学习——（篇一）\"><a href=\"#docker-基础学习——（篇一）\" class=\"headerlink\" title=\"docker 基础学习——（篇一）\"></a>docker 基础学习——（篇一）</h1><h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h3><ul>\n<li>Mac：<a href=\"https://download.docker.com/mac/stable/Docker.dmg\">download.docker.com&#x2F;mac&#x2F;stable&#x2F;…</a></li>\n<li>Windows：[download.docker.com&#x2F;win&#x2F;stable&#x2F;…](<a href=\"https://download.docker.com/win/stable/Docker\">https://download.docker.com/win/stable/Docker</a> for Windows Installer.exe)</li>\n<li>Linux：<a href=\"https://get.docker.com/\">get.docker.com&#x2F;</a></li>\n</ul>\n<h3 id=\"Docker-的组成部分\"><a href=\"#Docker-的组成部分\" class=\"headerlink\" title=\"Docker 的组成部分\"></a>Docker 的组成部分</h3><ul>\n<li>镜像(image)<ul>\n<li>docker 镜像就好像是一个模板，可以通过这个模板来创建出来容器的服务，mysql 镜像—&gt;run 命令—&gt;mysql 容器(提供 mysql 服务)</li>\n<li>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就在容器中的)</li>\n</ul>\n</li>\n<li>容器(container)<ul>\n<li>Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像进行创建</li>\n<li>启动，停止，删除，基本命令</li>\n<li>目前就可以把这个容器理解为就是一个简易的 linux 系统</li>\n</ul>\n</li>\n<li>仓库(repository)<ul>\n<li>仓库就是存放镜像的地方</li>\n<li>仓库分为公有仓库和私有仓库</li>\n<li>Docker Hub(默认是国外的)</li>\n<li>阿里云……都有容器服务器(配置镜像加速)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"docker-的运行\"><a href=\"#docker-的运行\" class=\"headerlink\" title=\"docker 的运行\"></a><strong>docker 的运行</strong></h4><ul>\n<li><p>run 命令执行后到底发生了什么？</p>\n<p><strong>在执行了 docker 这个命令后，从 client 端发送到 server 这个服务端，在服务中进行执行，这样首先 docker 会在本地进行查找，看看镜像是不是存在，存在直接运行，不存在的话，会发送指令到 docker-hub 中，进行查找，若找到了就进行下载，若没有找到，会从服务端返回错误信息，假设找到了，下载到本地，本地就会加载这个镜像，运行起来。</strong></p>\n</li>\n<li><p><strong>底层原理</strong></p>\n<ul>\n<li>docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端进行访问</li>\n<li>Docker-server 接收到 docker-client 的指令，就会执行这个命令</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"docker-一些基础的命令\"><a href=\"#docker-一些基础的命令\" class=\"headerlink\" title=\"docker 一些基础的命令\"></a>docker 一些基础的命令</h3><h4 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h4><ul>\n<li>查看所有的镜像列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search 镜像名称</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名称</span><br><span class=\"line\">docker pull 镜像名称:tag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmi -------remove image</span><br><span class=\"line\">Docker rmi -f 镜像id/镜像名称                删除一个镜像</span><br><span class=\"line\">Docker rmi -f 镜像id 镜像id  镜像id        删除多个镜像</span><br><span class=\"line\">Docker rmi -f  $(docker images -aq)     删除所有镜像</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h4><ul>\n<li><strong>下载容器</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>新建容器并启动</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker run [可选参数] image</span><br></pre></td></tr></table></figure>\n\n<p>可选参数：</p>\n<ul>\n<li><code>--name = &quot;Name&quot;</code> 给容器起名字 centos1 centos2 用来区分容器</li>\n<li><code>-d</code> 后台的方式进行运行</li>\n<li><code>-it</code> 使用交互式的运行方式，进入容器后查看内容</li>\n<li><code>-p</code> 指定容器的端口 -p 8080：8080<ul>\n<li>四种端口的指定方式<ul>\n<li>-p ip:主机端口:容器端口</li>\n<li><strong>-p</strong> <strong>主机端口：容器端口</strong> <strong>（最常用）</strong></li>\n<li>-p 容器端口</li>\n<li>端口号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>列出所有运行的容器</strong><ul>\n<li><code>无参数</code> 列出当前正在运行的容器</li>\n<li><code>-a</code> 列出当前正在运行的容器+带出历史运行过的容器</li>\n<li><code>-n=？</code> 显示最近创建的容器</li>\n<li><code>-q</code> 只显示容器的编号</li>\n</ul>\n</li>\n<li><strong>退出容器</strong><ul>\n<li>Exit 直接容器停止并且退出了</li>\n<li>Ctrl+Q 容器不停止但是退出了</li>\n</ul>\n</li>\n<li><strong>删除容器</strong><ul>\n<li><code>Docker rm</code> 容器 id</li>\n<li><code>Docker rm</code> 容器 id 容器 id(删除多个)</li>\n<li><code>Docker rm -f $(docker ps -aq)</code><ul>\n<li>Docker ps -a -q|xargs docker rm 管道的方式删除所有的容器</li>\n<li>-f 是强制删除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>启动和停止容器的操作</strong><ul>\n<li>启动<ul>\n<li>docker start 容器 id</li>\n</ul>\n</li>\n<li>重启容器<ul>\n<li>docker restart 容器 id</li>\n</ul>\n</li>\n<li>停止容器<ul>\n<li>docker stop 容器 id</li>\n</ul>\n</li>\n<li>杀掉容器<ul>\n<li>docker kill 容器 id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"其他常见命令\"><a href=\"#其他常见命令\" class=\"headerlink\" title=\"其他常见命令\"></a>其他常见命令</h4><ul>\n<li><p>后台启动容器</p>\n<ul>\n<li><code>Docker run -d</code> 镜像名<ul>\n<li>问题：docker ps 发现 centos 停止了</li>\n<li>常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动提停止<ul>\n<li>通俗的理解就是：我们在 run centos 的时候，之前会切换到容器之中让我们进行操作，但是-d 直接从后台进行启动，docker 会检测到这个部分是没有人操作或者容器没有动静，自己就会将相应的资源进行停止</li>\n<li>所以 nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看日志</p>\n<ul>\n<li>Docker logs -tf –tail 10 容器 id</li>\n</ul>\n</li>\n<li><p>测试</p>\n<ul>\n<li>自己编写一段 shell 脚本让程序在后台自己跑<ul>\n<li>Docker run -d centos &#x2F;bin&#x2F;sh -c “while true;do echo hahaha;sleep 1;done”</li>\n</ul>\n</li>\n<li>docker ps</li>\n<li>Docker logs -tf –tail 10 容器 id</li>\n</ul>\n</li>\n<li><p>查看容器内部的进程信息</p>\n<ul>\n<li>top 命令<ul>\n<li>docker top 容器 id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看容器的元数据</p>\n<ul>\n<li>docker inspect 容器 id</li>\n</ul>\n</li>\n<li><p>进入当前正在运行的容器</p>\n<ul>\n<li>exec<ul>\n<li>通常情况下的容器都是在后台方式运行的，需要我们进入容器 ，修改一些配置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看历史命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker history 镜像id</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分层理解\"><a href=\"#分层理解\" class=\"headerlink\" title=\"分层理解\"></a>分层理解</h4><ul>\n<li>分层的镜像<ul>\n<li>我们可以去下载一个镜像，注意观察下载日志的输出，可以看到的是一层一层的下载</li>\n</ul>\n</li>\n<li>思考：为什么 Docker 镜像要采用这种分层的结构那？<ul>\n<li>最大的好处，我觉得莫过于资源共享！比如有多个镜像团队都从相同的 Base 镜像构建而来，那么宿主机只需要在磁盘中保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"commit-镜像\"><a href=\"#commit-镜像\" class=\"headerlink\" title=\"commit 镜像\"></a>commit 镜像</h4><p>Docker commit 提交容器成为一个新的副本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像:[Tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实战测试<ul>\n<li>启动一个默认的 tomcat</li>\n<li>发现这个 tomcat 是没写 webapps 应用的，镜像的原因，官方镜像默认 webapps 下面是没有东西的</li>\n<li>自己拷贝文件进去</li>\n<li>将我们修改过的镜像提交成一个新的镜像</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>推荐学习：<a href=\"https://juejin.cn/post/6977180684376866847\">https://juejin.cn/post/6977180684376866847</a></p>\n</blockquote>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"docker-基础学习——（篇一）\"><a href=\"#docker-基础学习——（篇一）\" class=\"headerlink\" title=\"docker 基础学习——（篇一）\"></a>docker 基础学习——（篇一）</h1><h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h3><ul>\n<li>Mac：<a href=\"https://download.docker.com/mac/stable/Docker.dmg\">download.docker.com&#x2F;mac&#x2F;stable&#x2F;…</a></li>\n<li>Windows：[download.docker.com&#x2F;win&#x2F;stable&#x2F;…](<a href=\"https://download.docker.com/win/stable/Docker\">https://download.docker.com/win/stable/Docker</a> for Windows Installer.exe)</li>\n<li>Linux：<a href=\"https://get.docker.com/\">get.docker.com&#x2F;</a></li>\n</ul>\n<h3 id=\"Docker-的组成部分\"><a href=\"#Docker-的组成部分\" class=\"headerlink\" title=\"Docker 的组成部分\"></a>Docker 的组成部分</h3><ul>\n<li>镜像(image)<ul>\n<li>docker 镜像就好像是一个模板，可以通过这个模板来创建出来容器的服务，mysql 镜像—&gt;run 命令—&gt;mysql 容器(提供 mysql 服务)</li>\n<li>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就在容器中的)</li>\n</ul>\n</li>\n<li>容器(container)<ul>\n<li>Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像进行创建</li>\n<li>启动，停止，删除，基本命令</li>\n<li>目前就可以把这个容器理解为就是一个简易的 linux 系统</li>\n</ul>\n</li>\n<li>仓库(repository)<ul>\n<li>仓库就是存放镜像的地方</li>\n<li>仓库分为公有仓库和私有仓库</li>\n<li>Docker Hub(默认是国外的)</li>\n<li>阿里云……都有容器服务器(配置镜像加速)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"docker-的运行\"><a href=\"#docker-的运行\" class=\"headerlink\" title=\"docker 的运行\"></a><strong>docker 的运行</strong></h4><ul>\n<li><p>run 命令执行后到底发生了什么？</p>\n<p><strong>在执行了 docker 这个命令后，从 client 端发送到 server 这个服务端，在服务中进行执行，这样首先 docker 会在本地进行查找，看看镜像是不是存在，存在直接运行，不存在的话，会发送指令到 docker-hub 中，进行查找，若找到了就进行下载，若没有找到，会从服务端返回错误信息，假设找到了，下载到本地，本地就会加载这个镜像，运行起来。</strong></p>\n</li>\n<li><p><strong>底层原理</strong></p>\n<ul>\n<li>docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端进行访问</li>\n<li>Docker-server 接收到 docker-client 的指令，就会执行这个命令</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"docker-一些基础的命令\"><a href=\"#docker-一些基础的命令\" class=\"headerlink\" title=\"docker 一些基础的命令\"></a>docker 一些基础的命令</h3><h4 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h4><ul>\n<li>查看所有的镜像列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search 镜像名称</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名称</span><br><span class=\"line\">docker pull 镜像名称:tag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除镜像</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmi -------remove image</span><br><span class=\"line\">Docker rmi -f 镜像id/镜像名称                删除一个镜像</span><br><span class=\"line\">Docker rmi -f 镜像id 镜像id  镜像id        删除多个镜像</span><br><span class=\"line\">Docker rmi -f  $(docker images -aq)     删除所有镜像</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h4><ul>\n<li><strong>下载容器</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>新建容器并启动</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker run [可选参数] image</span><br></pre></td></tr></table></figure>\n\n<p>可选参数：</p>\n<ul>\n<li><code>--name = &quot;Name&quot;</code> 给容器起名字 centos1 centos2 用来区分容器</li>\n<li><code>-d</code> 后台的方式进行运行</li>\n<li><code>-it</code> 使用交互式的运行方式，进入容器后查看内容</li>\n<li><code>-p</code> 指定容器的端口 -p 8080：8080<ul>\n<li>四种端口的指定方式<ul>\n<li>-p ip:主机端口:容器端口</li>\n<li><strong>-p</strong> <strong>主机端口：容器端口</strong> <strong>（最常用）</strong></li>\n<li>-p 容器端口</li>\n<li>端口号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>列出所有运行的容器</strong><ul>\n<li><code>无参数</code> 列出当前正在运行的容器</li>\n<li><code>-a</code> 列出当前正在运行的容器+带出历史运行过的容器</li>\n<li><code>-n=？</code> 显示最近创建的容器</li>\n<li><code>-q</code> 只显示容器的编号</li>\n</ul>\n</li>\n<li><strong>退出容器</strong><ul>\n<li>Exit 直接容器停止并且退出了</li>\n<li>Ctrl+Q 容器不停止但是退出了</li>\n</ul>\n</li>\n<li><strong>删除容器</strong><ul>\n<li><code>Docker rm</code> 容器 id</li>\n<li><code>Docker rm</code> 容器 id 容器 id(删除多个)</li>\n<li><code>Docker rm -f $(docker ps -aq)</code><ul>\n<li>Docker ps -a -q|xargs docker rm 管道的方式删除所有的容器</li>\n<li>-f 是强制删除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>启动和停止容器的操作</strong><ul>\n<li>启动<ul>\n<li>docker start 容器 id</li>\n</ul>\n</li>\n<li>重启容器<ul>\n<li>docker restart 容器 id</li>\n</ul>\n</li>\n<li>停止容器<ul>\n<li>docker stop 容器 id</li>\n</ul>\n</li>\n<li>杀掉容器<ul>\n<li>docker kill 容器 id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"其他常见命令\"><a href=\"#其他常见命令\" class=\"headerlink\" title=\"其他常见命令\"></a>其他常见命令</h4><ul>\n<li><p>后台启动容器</p>\n<ul>\n<li><code>Docker run -d</code> 镜像名<ul>\n<li>问题：docker ps 发现 centos 停止了</li>\n<li>常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动提停止<ul>\n<li>通俗的理解就是：我们在 run centos 的时候，之前会切换到容器之中让我们进行操作，但是-d 直接从后台进行启动，docker 会检测到这个部分是没有人操作或者容器没有动静，自己就会将相应的资源进行停止</li>\n<li>所以 nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看日志</p>\n<ul>\n<li>Docker logs -tf –tail 10 容器 id</li>\n</ul>\n</li>\n<li><p>测试</p>\n<ul>\n<li>自己编写一段 shell 脚本让程序在后台自己跑<ul>\n<li>Docker run -d centos &#x2F;bin&#x2F;sh -c “while true;do echo hahaha;sleep 1;done”</li>\n</ul>\n</li>\n<li>docker ps</li>\n<li>Docker logs -tf –tail 10 容器 id</li>\n</ul>\n</li>\n<li><p>查看容器内部的进程信息</p>\n<ul>\n<li>top 命令<ul>\n<li>docker top 容器 id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看容器的元数据</p>\n<ul>\n<li>docker inspect 容器 id</li>\n</ul>\n</li>\n<li><p>进入当前正在运行的容器</p>\n<ul>\n<li>exec<ul>\n<li>通常情况下的容器都是在后台方式运行的，需要我们进入容器 ，修改一些配置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看历史命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker history 镜像id</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分层理解\"><a href=\"#分层理解\" class=\"headerlink\" title=\"分层理解\"></a>分层理解</h4><ul>\n<li>分层的镜像<ul>\n<li>我们可以去下载一个镜像，注意观察下载日志的输出，可以看到的是一层一层的下载</li>\n</ul>\n</li>\n<li>思考：为什么 Docker 镜像要采用这种分层的结构那？<ul>\n<li>最大的好处，我觉得莫过于资源共享！比如有多个镜像团队都从相同的 Base 镜像构建而来，那么宿主机只需要在磁盘中保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"commit-镜像\"><a href=\"#commit-镜像\" class=\"headerlink\" title=\"commit 镜像\"></a>commit 镜像</h4><p>Docker commit 提交容器成为一个新的副本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像:[Tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实战测试<ul>\n<li>启动一个默认的 tomcat</li>\n<li>发现这个 tomcat 是没写 webapps 应用的，镜像的原因，官方镜像默认 webapps 下面是没有东西的</li>\n<li>自己拷贝文件进去</li>\n<li>将我们修改过的镜像提交成一个新的镜像</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>推荐学习：<a href=\"https://juejin.cn/post/6977180684376866847\">https://juejin.cn/post/6977180684376866847</a></p>\n</blockquote>\n"},{"title":"生成任意文件","description":"生成任意文件","date":"2022-08-27T16:00:00.000Z","cover":"https://is.gd/rht8Ij","_content":"\n# 生成任意文件\n\n**思路**：\n\n- 用 Blob 对象生成任意格式数据\n- Blob 对象通过 createObjectURL 方法生成链接\n- 用 a 标签下载任意格式数据\n- 释放相对于的链接\n\n**核心代码**：\n\n```js\n// 要保存的字符串\nconst stringData = \"# 一级标题\\n## 二级标题\";\n// stringData 表示要转换的字符串数据，type 表示要转换的数据格式\nconst blob = new Blob([stringData], {\n  type: \"text/markdown\",\n});\n// 根据 blob生成 url链接\nconst objectURL = URL.createObjectURL(blob);\n\n// 创建一个 a 标签Tag\nconst aTag = document.createElement(\"a\");\n// 设置文件的下载地址\naTag.href = objectURL;\n// 设置保存后的文件名称\naTag.download = \"markdown文件.md\";\n// 给 a 标签添加点击事件\naTag.click();\n// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。\nURL.revokeObjectURL(objectURL);\n```\n\n**demo 实例**：\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>保存文件</title>\n  </head>\n  <body>\n    <button type=\"button\" id=\"button\">保存文件</button>\n\n    <script type=\"text/javascript\">\n      window.onload = function (event) {\n        main();\n      };\n      function main() {\n        // 获取按钮\n        const button = document.getElementById(\"button\");\n        // 给按钮添加点击事件\n        button.onclick = () => {\n          // 要保存的字符串\n          const stringData = \"# 一级标题\\n## 二级标题\";\n          // dada 表示要转换的字符串数据，type 表示要转换的数据格式\n          const blob = new Blob([stringData], {\n            type: \"text/markdown\",\n          });\n          // 根据 blob生成 url链接\n          const objectURL = URL.createObjectURL(blob);\n\n          // 创建一个 a 标签Tag\n          const aTag = document.createElement(\"a\");\n          // 设置文件的下载地址\n          aTag.href = objectURL;\n          // 设置保存后的文件名称\n          aTag.download = \"markdown文件.md\";\n          // 给 a 标签添加点击事件\n          aTag.click();\n          // 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n          // 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。\n          URL.revokeObjectURL(objectURL);\n        };\n      }\n    </script>\n  </body>\n</html>\n```\n","source":"_posts/html5/生成任意文件.md","raw":"---\ntitle: 生成任意文件\ntags: [前端]\ncategories: [html]\ndescription: 生成任意文件\ndate: 2022-08-28\ncover: https://is.gd/rht8Ij\n---\n\n# 生成任意文件\n\n**思路**：\n\n- 用 Blob 对象生成任意格式数据\n- Blob 对象通过 createObjectURL 方法生成链接\n- 用 a 标签下载任意格式数据\n- 释放相对于的链接\n\n**核心代码**：\n\n```js\n// 要保存的字符串\nconst stringData = \"# 一级标题\\n## 二级标题\";\n// stringData 表示要转换的字符串数据，type 表示要转换的数据格式\nconst blob = new Blob([stringData], {\n  type: \"text/markdown\",\n});\n// 根据 blob生成 url链接\nconst objectURL = URL.createObjectURL(blob);\n\n// 创建一个 a 标签Tag\nconst aTag = document.createElement(\"a\");\n// 设置文件的下载地址\naTag.href = objectURL;\n// 设置保存后的文件名称\naTag.download = \"markdown文件.md\";\n// 给 a 标签添加点击事件\naTag.click();\n// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。\nURL.revokeObjectURL(objectURL);\n```\n\n**demo 实例**：\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>保存文件</title>\n  </head>\n  <body>\n    <button type=\"button\" id=\"button\">保存文件</button>\n\n    <script type=\"text/javascript\">\n      window.onload = function (event) {\n        main();\n      };\n      function main() {\n        // 获取按钮\n        const button = document.getElementById(\"button\");\n        // 给按钮添加点击事件\n        button.onclick = () => {\n          // 要保存的字符串\n          const stringData = \"# 一级标题\\n## 二级标题\";\n          // dada 表示要转换的字符串数据，type 表示要转换的数据格式\n          const blob = new Blob([stringData], {\n            type: \"text/markdown\",\n          });\n          // 根据 blob生成 url链接\n          const objectURL = URL.createObjectURL(blob);\n\n          // 创建一个 a 标签Tag\n          const aTag = document.createElement(\"a\");\n          // 设置文件的下载地址\n          aTag.href = objectURL;\n          // 设置保存后的文件名称\n          aTag.download = \"markdown文件.md\";\n          // 给 a 标签添加点击事件\n          aTag.click();\n          // 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n          // 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。\n          URL.revokeObjectURL(objectURL);\n        };\n      }\n    </script>\n  </body>\n</html>\n```\n","slug":"html5/生成任意文件","published":1,"updated":"2023-07-30T22:01:14.055Z","_id":"clkpywdlv000i36l1e8wu041c","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"生成任意文件\"><a href=\"#生成任意文件\" class=\"headerlink\" title=\"生成任意文件\"></a>生成任意文件</h1><p><strong>思路</strong>：</p>\n<ul>\n<li>用 Blob 对象生成任意格式数据</li>\n<li>Blob 对象通过 createObjectURL 方法生成链接</li>\n<li>用 a 标签下载任意格式数据</li>\n<li>释放相对于的链接</li>\n</ul>\n<p><strong>核心代码</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 要保存的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stringData = <span class=\"string\">&quot;# 一级标题\\n## 二级标题&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// stringData 表示要转换的字符串数据，type 表示要转换的数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([stringData], &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/markdown&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 根据 blob生成 url链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 a 标签Tag</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> aTag = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置文件的下载地址</span></span><br><span class=\"line\">aTag.<span class=\"property\">href</span> = objectURL;</span><br><span class=\"line\"><span class=\"comment\">// 设置保存后的文件名称</span></span><br><span class=\"line\">aTag.<span class=\"property\">download</span> = <span class=\"string\">&quot;markdown文件.md&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 给 a 标签添加点击事件</span></span><br><span class=\"line\">aTag.<span class=\"title function_\">click</span>();</span><br><span class=\"line\"><span class=\"comment\">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span><br><span class=\"line\"><span class=\"comment\">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span><br><span class=\"line\"><span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(objectURL);</span><br></pre></td></tr></table></figure>\n\n<p><strong>demo 实例</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>保存文件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>保存文件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">main</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 获取按钮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 给按钮添加点击事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 要保存的字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> stringData = <span class=\"string\">&quot;# 一级标题\\n## 二级标题&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// dada 表示要转换的字符串数据，type 表示要转换的数据格式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([stringData], &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/markdown&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 根据 blob生成 url链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 创建一个 a 标签Tag</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> aTag = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 设置文件的下载地址</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"property\">href</span> = objectURL;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 设置保存后的文件名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"property\">download</span> = <span class=\"string\">&quot;markdown文件.md&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 给 a 标签添加点击事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"title function_\">click</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(objectURL);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"生成任意文件\"><a href=\"#生成任意文件\" class=\"headerlink\" title=\"生成任意文件\"></a>生成任意文件</h1><p><strong>思路</strong>：</p>\n<ul>\n<li>用 Blob 对象生成任意格式数据</li>\n<li>Blob 对象通过 createObjectURL 方法生成链接</li>\n<li>用 a 标签下载任意格式数据</li>\n<li>释放相对于的链接</li>\n</ul>\n<p><strong>核心代码</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 要保存的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stringData = <span class=\"string\">&quot;# 一级标题\\n## 二级标题&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// stringData 表示要转换的字符串数据，type 表示要转换的数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([stringData], &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/markdown&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 根据 blob生成 url链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 a 标签Tag</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> aTag = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置文件的下载地址</span></span><br><span class=\"line\">aTag.<span class=\"property\">href</span> = objectURL;</span><br><span class=\"line\"><span class=\"comment\">// 设置保存后的文件名称</span></span><br><span class=\"line\">aTag.<span class=\"property\">download</span> = <span class=\"string\">&quot;markdown文件.md&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 给 a 标签添加点击事件</span></span><br><span class=\"line\">aTag.<span class=\"title function_\">click</span>();</span><br><span class=\"line\"><span class=\"comment\">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span><br><span class=\"line\"><span class=\"comment\">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span><br><span class=\"line\"><span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(objectURL);</span><br></pre></td></tr></table></figure>\n\n<p><strong>demo 实例</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>保存文件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>保存文件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">main</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 获取按钮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 给按钮添加点击事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 要保存的字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> stringData = <span class=\"string\">&quot;# 一级标题\\n## 二级标题&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// dada 表示要转换的字符串数据，type 表示要转换的数据格式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([stringData], &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/markdown&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 根据 blob生成 url链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 创建一个 a 标签Tag</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> aTag = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 设置文件的下载地址</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"property\">href</span> = objectURL;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 设置保存后的文件名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"property\">download</span> = <span class=\"string\">&quot;markdown文件.md&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 给 a 标签添加点击事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          aTag.<span class=\"title function_\">click</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(objectURL);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"js实现拖拽功能","description":"js实现拖拽功能","date":"2022-07-27T16:00:00.000Z","cover":"https://is.gd/BKfqTS","_content":"\n# js实现拖拽功能\n\n### 分析\n\n- 能移动dom元素的位置，肯定与它的(x,y)坐标有关及改变dom元素的（left,top）的大小\n- 那怎么监听鼠标的（x,y）这里用的事件是鼠标移动事件`onmousemove`、按压事件`mousedown`及松开事件`onmouseup`\n- 那我们大胆的想一下接下来通过鼠标的怎么控制它移动的呢\n  - 元素肯定先绑定鼠标按压事件`mousedown`\n  - 在按压事件触发后，我们在监听鼠标移动事件`onmousemove`，鼠标移动的（x,y）貌似是dom元素位置(x,y)，这其实需要减去鼠标在dom元素的(x,y)才是\n  - 最后鼠标松开事件`onmouseup`清除所有事件，以免否则鼠标抬起后还可以继续拖拽方块\n\n### 初始化\n\n- 这里头部引入jQuery更好的dom操作\n\n~~~html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"></script>\n~~~\n\n- 需要再页面中初始化drag的位置\n\n~~~html\n<!-- index.html -->\n <div class=\"drag\" style=\"left: 0; top: 0\">按住拖动</div>\n~~~\n\n- 初始化css\n\n~~~css\n// index.css\n.drag {\n    background-color: skyblue;\n    position: absolute;\n    line-height: 100px;\n    text-align: center;\n    width: 100px;\n    height: 100px;\n}\n~~~\n\n- 初始化js，获取dom原生\n\n~~~js\n// index.js\nlet dragDiv = document.getElementsByClassName('drag')[0];\n~~~\n\n### 绑定鼠标按下事件\n\n~~~js\ndragDiv.addEventListener('mousedown', putDown, false);\n~~~\n\n### 编写putDown里面的逻辑\n\n- 这里面就是计算dom元素的（left,top）\n- 之后清除所有事件\n\n~~~js\nlet putDown = function (event) {\n  dragDiv.style.cursor = 'pointer';\n  let offsetX = parseInt(dragDiv.style.left); // 获取当前的x轴距离\n  let offsetY = parseInt(dragDiv.style.top); // 获取当前的y轴距离\n  let innerX = event.clientX - offsetX; // 获取鼠标在方块内的x轴距\n  let innerY = event.clientY - offsetY; // 获取鼠标在方块内的y轴距\n  // 按住鼠标时为div添加一个border\n  dragDiv.style.borderStyle = 'solid';\n  dragDiv.style.borderColor = 'red';\n  dragDiv.style.borderWidth = '3px';\n  // 鼠标移动的时候不停的修改div的left和top值\n  document.onmousemove = function (event) {\n    dragDiv.style.left = event.clientX - innerX + 'px';\n    dragDiv.style.top = event.clientY - innerY + 'px';\n    // 边界判断\n    if (parseInt(dragDiv.style.left) <= 0) {\n      dragDiv.style.left = '0px';\n    }\n    if (parseInt(dragDiv.style.top) <= 0) {\n      dragDiv.style.top = '0px';\n    }\n    if (\n      parseInt(dragDiv.style.left) >=\n      window.innerWidth - parseInt(dragDiv.style.width)\n    ) {\n      dragDiv.style.left =\n        window.innerWidth - parseInt(dragDiv.style.width) + 'px';\n    }\n    if (\n      parseInt(dragDiv.style.top) >=\n      window.innerHeight - parseInt(dragDiv.style.height)\n    ) {\n      dragDiv.style.top =\n        window.innerHeight - parseInt(dragDiv.style.height) + 'px';\n    }\n  };\n  // 鼠标抬起时，清除绑定在文档上的mousemove和mouseup事件\n  // 否则鼠标抬起后还可以继续拖拽方块\n  document.onmouseup = function () {\n    document.onmousemove = null;\n    document.onmouseup = null;\n    // 清除border\n    dragDiv.style.borderStyle = '';\n    dragDiv.style.borderColor = '';\n    dragDiv.style.borderWidth = '';\n  };\n};\n~~~\n\n项目地址在这：[实现拖拽的demo](https://github.com/kangkang123269/kate-demo/tree/main/jQuery)","source":"_posts/javascript/js实现拖拽.md","raw":"---\ntitle: js实现拖拽功能\ntags: [前端,JavaScript]\ncategories: [JavaScript,demo]\ndescription: js实现拖拽功能\ndate: 2022-07-28\ncover: https://is.gd/BKfqTS\n---\n\n# js实现拖拽功能\n\n### 分析\n\n- 能移动dom元素的位置，肯定与它的(x,y)坐标有关及改变dom元素的（left,top）的大小\n- 那怎么监听鼠标的（x,y）这里用的事件是鼠标移动事件`onmousemove`、按压事件`mousedown`及松开事件`onmouseup`\n- 那我们大胆的想一下接下来通过鼠标的怎么控制它移动的呢\n  - 元素肯定先绑定鼠标按压事件`mousedown`\n  - 在按压事件触发后，我们在监听鼠标移动事件`onmousemove`，鼠标移动的（x,y）貌似是dom元素位置(x,y)，这其实需要减去鼠标在dom元素的(x,y)才是\n  - 最后鼠标松开事件`onmouseup`清除所有事件，以免否则鼠标抬起后还可以继续拖拽方块\n\n### 初始化\n\n- 这里头部引入jQuery更好的dom操作\n\n~~~html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"></script>\n~~~\n\n- 需要再页面中初始化drag的位置\n\n~~~html\n<!-- index.html -->\n <div class=\"drag\" style=\"left: 0; top: 0\">按住拖动</div>\n~~~\n\n- 初始化css\n\n~~~css\n// index.css\n.drag {\n    background-color: skyblue;\n    position: absolute;\n    line-height: 100px;\n    text-align: center;\n    width: 100px;\n    height: 100px;\n}\n~~~\n\n- 初始化js，获取dom原生\n\n~~~js\n// index.js\nlet dragDiv = document.getElementsByClassName('drag')[0];\n~~~\n\n### 绑定鼠标按下事件\n\n~~~js\ndragDiv.addEventListener('mousedown', putDown, false);\n~~~\n\n### 编写putDown里面的逻辑\n\n- 这里面就是计算dom元素的（left,top）\n- 之后清除所有事件\n\n~~~js\nlet putDown = function (event) {\n  dragDiv.style.cursor = 'pointer';\n  let offsetX = parseInt(dragDiv.style.left); // 获取当前的x轴距离\n  let offsetY = parseInt(dragDiv.style.top); // 获取当前的y轴距离\n  let innerX = event.clientX - offsetX; // 获取鼠标在方块内的x轴距\n  let innerY = event.clientY - offsetY; // 获取鼠标在方块内的y轴距\n  // 按住鼠标时为div添加一个border\n  dragDiv.style.borderStyle = 'solid';\n  dragDiv.style.borderColor = 'red';\n  dragDiv.style.borderWidth = '3px';\n  // 鼠标移动的时候不停的修改div的left和top值\n  document.onmousemove = function (event) {\n    dragDiv.style.left = event.clientX - innerX + 'px';\n    dragDiv.style.top = event.clientY - innerY + 'px';\n    // 边界判断\n    if (parseInt(dragDiv.style.left) <= 0) {\n      dragDiv.style.left = '0px';\n    }\n    if (parseInt(dragDiv.style.top) <= 0) {\n      dragDiv.style.top = '0px';\n    }\n    if (\n      parseInt(dragDiv.style.left) >=\n      window.innerWidth - parseInt(dragDiv.style.width)\n    ) {\n      dragDiv.style.left =\n        window.innerWidth - parseInt(dragDiv.style.width) + 'px';\n    }\n    if (\n      parseInt(dragDiv.style.top) >=\n      window.innerHeight - parseInt(dragDiv.style.height)\n    ) {\n      dragDiv.style.top =\n        window.innerHeight - parseInt(dragDiv.style.height) + 'px';\n    }\n  };\n  // 鼠标抬起时，清除绑定在文档上的mousemove和mouseup事件\n  // 否则鼠标抬起后还可以继续拖拽方块\n  document.onmouseup = function () {\n    document.onmousemove = null;\n    document.onmouseup = null;\n    // 清除border\n    dragDiv.style.borderStyle = '';\n    dragDiv.style.borderColor = '';\n    dragDiv.style.borderWidth = '';\n  };\n};\n~~~\n\n项目地址在这：[实现拖拽的demo](https://github.com/kangkang123269/kate-demo/tree/main/jQuery)","slug":"javascript/js实现拖拽","published":1,"updated":"2023-07-30T18:22:48.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdly000o36l123y13cbt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"js实现拖拽功能\"><a href=\"#js实现拖拽功能\" class=\"headerlink\" title=\"js实现拖拽功能\"></a>js实现拖拽功能</h1><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>能移动dom元素的位置，肯定与它的(x,y)坐标有关及改变dom元素的（left,top）的大小</li>\n<li>那怎么监听鼠标的（x,y）这里用的事件是鼠标移动事件<code>onmousemove</code>、按压事件<code>mousedown</code>及松开事件<code>onmouseup</code></li>\n<li>那我们大胆的想一下接下来通过鼠标的怎么控制它移动的呢<ul>\n<li>元素肯定先绑定鼠标按压事件<code>mousedown</code></li>\n<li>在按压事件触发后，我们在监听鼠标移动事件<code>onmousemove</code>，鼠标移动的（x,y）貌似是dom元素位置(x,y)，这其实需要减去鼠标在dom元素的(x,y)才是</li>\n<li>最后鼠标松开事件<code>onmouseup</code>清除所有事件，以免否则鼠标抬起后还可以继续拖拽方块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>这里头部引入jQuery更好的dom操作</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要再页面中初始化drag的位置</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drag&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;left: 0; top: 0&quot;</span>&gt;</span>按住拖动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化css</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index<span class=\"selector-class\">.css</span></span><br><span class=\"line\"><span class=\"selector-class\">.drag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: skyblue;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化js，获取dom原生</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dragDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;drag&#x27;</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定鼠标按下事件\"><a href=\"#绑定鼠标按下事件\" class=\"headerlink\" title=\"绑定鼠标按下事件\"></a>绑定鼠标按下事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dragDiv.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousedown&#x27;</span>, putDown, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写putDown里面的逻辑\"><a href=\"#编写putDown里面的逻辑\" class=\"headerlink\" title=\"编写putDown里面的逻辑\"></a>编写putDown里面的逻辑</h3><ul>\n<li>这里面就是计算dom元素的（left,top）</li>\n<li>之后清除所有事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> putDown = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">cursor</span> = <span class=\"string\">&#x27;pointer&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> offsetX = <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>); <span class=\"comment\">// 获取当前的x轴距离</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> offsetY = <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>); <span class=\"comment\">// 获取当前的y轴距离</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> innerX = event.<span class=\"property\">clientX</span> - offsetX; <span class=\"comment\">// 获取鼠标在方块内的x轴距</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> innerY = event.<span class=\"property\">clientY</span> - offsetY; <span class=\"comment\">// 获取鼠标在方块内的y轴距</span></span><br><span class=\"line\">  <span class=\"comment\">// 按住鼠标时为div添加一个border</span></span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderStyle</span> = <span class=\"string\">&#x27;solid&#x27;</span>;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderColor</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderWidth</span> = <span class=\"string\">&#x27;3px&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标移动的时候不停的修改div的left和top值</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">onmousemove</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> = event.<span class=\"property\">clientX</span> - innerX + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> = event.<span class=\"property\">clientY</span> - innerY + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 边界判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;0px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;0px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>) &gt;=</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">width</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> =</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">width</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>) &gt;=</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">height</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> =</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">height</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标抬起时，清除绑定在文档上的mousemove和mouseup事件</span></span><br><span class=\"line\">  <span class=\"comment\">// 否则鼠标抬起后还可以继续拖拽方块</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">onmouseup</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onmousemove</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onmouseup</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 清除border</span></span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderStyle</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderColor</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderWidth</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>项目地址在这：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/jQuery\">实现拖拽的demo</a></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"js实现拖拽功能\"><a href=\"#js实现拖拽功能\" class=\"headerlink\" title=\"js实现拖拽功能\"></a>js实现拖拽功能</h1><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>能移动dom元素的位置，肯定与它的(x,y)坐标有关及改变dom元素的（left,top）的大小</li>\n<li>那怎么监听鼠标的（x,y）这里用的事件是鼠标移动事件<code>onmousemove</code>、按压事件<code>mousedown</code>及松开事件<code>onmouseup</code></li>\n<li>那我们大胆的想一下接下来通过鼠标的怎么控制它移动的呢<ul>\n<li>元素肯定先绑定鼠标按压事件<code>mousedown</code></li>\n<li>在按压事件触发后，我们在监听鼠标移动事件<code>onmousemove</code>，鼠标移动的（x,y）貌似是dom元素位置(x,y)，这其实需要减去鼠标在dom元素的(x,y)才是</li>\n<li>最后鼠标松开事件<code>onmouseup</code>清除所有事件，以免否则鼠标抬起后还可以继续拖拽方块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>这里头部引入jQuery更好的dom操作</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要再页面中初始化drag的位置</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drag&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;left: 0; top: 0&quot;</span>&gt;</span>按住拖动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化css</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index<span class=\"selector-class\">.css</span></span><br><span class=\"line\"><span class=\"selector-class\">.drag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: skyblue;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化js，获取dom原生</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dragDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;drag&#x27;</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定鼠标按下事件\"><a href=\"#绑定鼠标按下事件\" class=\"headerlink\" title=\"绑定鼠标按下事件\"></a>绑定鼠标按下事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dragDiv.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousedown&#x27;</span>, putDown, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写putDown里面的逻辑\"><a href=\"#编写putDown里面的逻辑\" class=\"headerlink\" title=\"编写putDown里面的逻辑\"></a>编写putDown里面的逻辑</h3><ul>\n<li>这里面就是计算dom元素的（left,top）</li>\n<li>之后清除所有事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> putDown = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">cursor</span> = <span class=\"string\">&#x27;pointer&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> offsetX = <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>); <span class=\"comment\">// 获取当前的x轴距离</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> offsetY = <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>); <span class=\"comment\">// 获取当前的y轴距离</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> innerX = event.<span class=\"property\">clientX</span> - offsetX; <span class=\"comment\">// 获取鼠标在方块内的x轴距</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> innerY = event.<span class=\"property\">clientY</span> - offsetY; <span class=\"comment\">// 获取鼠标在方块内的y轴距</span></span><br><span class=\"line\">  <span class=\"comment\">// 按住鼠标时为div添加一个border</span></span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderStyle</span> = <span class=\"string\">&#x27;solid&#x27;</span>;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderColor</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">  dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderWidth</span> = <span class=\"string\">&#x27;3px&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标移动的时候不停的修改div的left和top值</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">onmousemove</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> = event.<span class=\"property\">clientX</span> - innerX + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> = event.<span class=\"property\">clientY</span> - innerY + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 边界判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;0px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;0px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span>) &gt;=</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">width</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> =</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">width</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span>) &gt;=</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">height</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      dragDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> =</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> - <span class=\"built_in\">parseInt</span>(dragDiv.<span class=\"property\">style</span>.<span class=\"property\">height</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标抬起时，清除绑定在文档上的mousemove和mouseup事件</span></span><br><span class=\"line\">  <span class=\"comment\">// 否则鼠标抬起后还可以继续拖拽方块</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">onmouseup</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onmousemove</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onmouseup</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 清除border</span></span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderStyle</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderColor</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    dragDiv.<span class=\"property\">style</span>.<span class=\"property\">borderWidth</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>项目地址在这：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/jQuery\">实现拖拽的demo</a></p>\n"},{"title":"js操作时间的应用","description":"js操作时间的应用","date":"2022-07-31T16:00:00.000Z","cover":"https://is.gd/HTvRXL","_content":"\n\n# js操作时间的应用\n\n1. 获取时间格式化为YY-MM-DD HH:MM:SS\n\n~~~js\nfunction getNowFormatDate() {\n    var date = new Date();\n     \n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var d = date.getDate();\n    var hour = date.getHours();\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n     \n    if(month<10){\n        month = \"0\" + month;\n    }\n     \n    if(d<10){\n        d = \"0\" + d;\n    }\n     \n    if(hour<10){\n        hour = \"0\" + hour;\n    }\n     \n    if(minute<10){\n        minute = \"0\" + hour;\n    }\n     \n    if(second<10){\n        second = \"0\" + second;\n    }\n    \n    return year + \"-\" + month + \"-\" + d + \" \" +hour + \":\" + minute + \":\" + second;\n}\n~~~\n\n2. 随机获取订单号\n\n~~~js\n/**\n * @desc 0\n * @param falg代表是否是赠送卡片和收卡界面\n */\n\nfunction getNowFormatDate(flag) {\n    var date = new Date();\n     \n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var d = date.getDate();\n    var hour = date.getHours();\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n     \n    if(month<10){\n        month = \"0\" + month;\n    }\n     \n    if(d<10){\n        d = \"0\" + d;\n    }\n     \n    if(hour<10){\n        hour = \"0\" + hour;\n    }\n     \n    if(minute<10){\n        minute = \"0\" + hour;\n    }\n     \n    if(second<10){\n        second = \"0\" + second;\n    }\n    \n    return year + \"-\" + month + \"-\" + d + (flag ? \" \" +hour + \":\" + minute + \":\" + second : \"\");\n}\n~~~\n\n","source":"_posts/skill/js时间操作的应用.md","raw":"---\ntitle: js操作时间的应用\ntags: [前端,JavaScript,skill]\ncategories: [JavaScript]\ndescription: js操作时间的应用\ndate: 2022-08-01\ncover: https://is.gd/HTvRXL\n---\n\n\n# js操作时间的应用\n\n1. 获取时间格式化为YY-MM-DD HH:MM:SS\n\n~~~js\nfunction getNowFormatDate() {\n    var date = new Date();\n     \n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var d = date.getDate();\n    var hour = date.getHours();\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n     \n    if(month<10){\n        month = \"0\" + month;\n    }\n     \n    if(d<10){\n        d = \"0\" + d;\n    }\n     \n    if(hour<10){\n        hour = \"0\" + hour;\n    }\n     \n    if(minute<10){\n        minute = \"0\" + hour;\n    }\n     \n    if(second<10){\n        second = \"0\" + second;\n    }\n    \n    return year + \"-\" + month + \"-\" + d + \" \" +hour + \":\" + minute + \":\" + second;\n}\n~~~\n\n2. 随机获取订单号\n\n~~~js\n/**\n * @desc 0\n * @param falg代表是否是赠送卡片和收卡界面\n */\n\nfunction getNowFormatDate(flag) {\n    var date = new Date();\n     \n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var d = date.getDate();\n    var hour = date.getHours();\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n     \n    if(month<10){\n        month = \"0\" + month;\n    }\n     \n    if(d<10){\n        d = \"0\" + d;\n    }\n     \n    if(hour<10){\n        hour = \"0\" + hour;\n    }\n     \n    if(minute<10){\n        minute = \"0\" + hour;\n    }\n     \n    if(second<10){\n        second = \"0\" + second;\n    }\n    \n    return year + \"-\" + month + \"-\" + d + (flag ? \" \" +hour + \":\" + minute + \":\" + second : \"\");\n}\n~~~\n\n","slug":"skill/js时间操作的应用","published":1,"updated":"2023-07-30T18:22:08.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm0000t36l12ofk8nd3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"js操作时间的应用\"><a href=\"#js操作时间的应用\" class=\"headerlink\" title=\"js操作时间的应用\"></a>js操作时间的应用</h1><ol>\n<li>获取时间格式化为YY-MM-DD HH:MM:SS</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNowFormatDate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        month = <span class=\"string\">&quot;0&quot;</span> + month;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        d = <span class=\"string\">&quot;0&quot;</span> + d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hour&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        hour = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(minute&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        minute = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        second = <span class=\"string\">&quot;0&quot;</span> + second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> year + <span class=\"string\">&quot;-&quot;</span> + month + <span class=\"string\">&quot;-&quot;</span> + d + <span class=\"string\">&quot; &quot;</span> +hour + <span class=\"string\">&quot;:&quot;</span> + minute + <span class=\"string\">&quot;:&quot;</span> + second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>随机获取订单号</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> falg代表是否是赠送卡片和收卡界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNowFormatDate</span>(<span class=\"params\">flag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        month = <span class=\"string\">&quot;0&quot;</span> + month;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        d = <span class=\"string\">&quot;0&quot;</span> + d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hour&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        hour = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(minute&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        minute = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        second = <span class=\"string\">&quot;0&quot;</span> + second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> year + <span class=\"string\">&quot;-&quot;</span> + month + <span class=\"string\">&quot;-&quot;</span> + d + (flag ? <span class=\"string\">&quot; &quot;</span> +hour + <span class=\"string\">&quot;:&quot;</span> + minute + <span class=\"string\">&quot;:&quot;</span> + second : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"js操作时间的应用\"><a href=\"#js操作时间的应用\" class=\"headerlink\" title=\"js操作时间的应用\"></a>js操作时间的应用</h1><ol>\n<li>获取时间格式化为YY-MM-DD HH:MM:SS</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNowFormatDate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        month = <span class=\"string\">&quot;0&quot;</span> + month;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        d = <span class=\"string\">&quot;0&quot;</span> + d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hour&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        hour = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(minute&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        minute = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        second = <span class=\"string\">&quot;0&quot;</span> + second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> year + <span class=\"string\">&quot;-&quot;</span> + month + <span class=\"string\">&quot;-&quot;</span> + d + <span class=\"string\">&quot; &quot;</span> +hour + <span class=\"string\">&quot;:&quot;</span> + minute + <span class=\"string\">&quot;:&quot;</span> + second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>随机获取订单号</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> falg代表是否是赠送卡片和收卡界面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNowFormatDate</span>(<span class=\"params\">flag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        month = <span class=\"string\">&quot;0&quot;</span> + month;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        d = <span class=\"string\">&quot;0&quot;</span> + d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hour&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        hour = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(minute&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        minute = <span class=\"string\">&quot;0&quot;</span> + hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        second = <span class=\"string\">&quot;0&quot;</span> + second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> year + <span class=\"string\">&quot;-&quot;</span> + month + <span class=\"string\">&quot;-&quot;</span> + d + (flag ? <span class=\"string\">&quot; &quot;</span> +hour + <span class=\"string\">&quot;:&quot;</span> + minute + <span class=\"string\">&quot;:&quot;</span> + second : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"一行代码的JavaScript","description":"一行代码的JavaScript","date":"2022-07-26T16:00:00.000Z","cover":"https://is.gd/HTvRXL","_content":"\n# 一行代码的JavaScript\n\n### 1、获取字符串中的字符数\n\n~~~js\nconst characterCount = (str, char) => str.split(char).length - 1\n~~~\n\n### 2、检查对象是否为空\n\n~~~js\nconst isEmpty = obj => Reflect.ownKeys(obj).length === 0 && obj.constructor === Object\n~~~\n\n### 3、等待一段时间再执行\n\n~~~js\nconst wait = async (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));\n~~~\n\n### 4、 获取两个日期之间的日差\n\n~~~js\nconst daysBetween = (date1, date2) => Math.ceil(Math.abs(date1 - date2) / (1000 * 60 * 60 * 24))\n~~~\n\n### 5、重定向到另一个 URL\n\n~~~js\nconst redirect = url => location.href = url\n~~~\n\n### 6、检查设备上的触摸支持\n~~~js\nconst touchSupported = () => ('ontouchstart' in window || DocumentTouch && document instanceof DocumentTouch)\n~~~\n\n### 7、 在元素后插入 HTML 字符串\n\n~~~js\nconst insertHTMLAfter = (html, el) => el.insertAdjacentHTML('afterend', html)\n~~~\n\n### 8、随机排列数组\n\n~~~js\nconst shuffle = arr => arr.sort(() => 0.5 - Math.random())\n~~~\n\n### 9、在网页上获取选定的文本\n\n~~~js\nconst getSelectedText = () => window.getSelection().toString()\n~~~\n\n### 10、获取随机布尔值\n\n~~~js\nconst getRandomBoolean = () => Math.random() >= 0.5\n~~~\n\n### 11、计算数组的平均值\n\n~~~js\nconst average = (arr) => arr.reduce((a, b) => a + b) / arr.length\n~~~\n\n\n### 12、数组扁平化\n\n~~~js\nconst flat = arr => arr.reduce((pre,cur) => pre.concat(Array.isArray(cur)? flat(cur): cur), [])\n~~~","source":"_posts/skill/一行代码的JavaScript.md","raw":"---\ntitle: 一行代码的JavaScript\ntags: [前端,JavaScript,skill]\ncategories: [JavaScript]\ndescription: 一行代码的JavaScript\ndate: 2022-07-27\ncover: https://is.gd/HTvRXL\n---\n\n# 一行代码的JavaScript\n\n### 1、获取字符串中的字符数\n\n~~~js\nconst characterCount = (str, char) => str.split(char).length - 1\n~~~\n\n### 2、检查对象是否为空\n\n~~~js\nconst isEmpty = obj => Reflect.ownKeys(obj).length === 0 && obj.constructor === Object\n~~~\n\n### 3、等待一段时间再执行\n\n~~~js\nconst wait = async (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));\n~~~\n\n### 4、 获取两个日期之间的日差\n\n~~~js\nconst daysBetween = (date1, date2) => Math.ceil(Math.abs(date1 - date2) / (1000 * 60 * 60 * 24))\n~~~\n\n### 5、重定向到另一个 URL\n\n~~~js\nconst redirect = url => location.href = url\n~~~\n\n### 6、检查设备上的触摸支持\n~~~js\nconst touchSupported = () => ('ontouchstart' in window || DocumentTouch && document instanceof DocumentTouch)\n~~~\n\n### 7、 在元素后插入 HTML 字符串\n\n~~~js\nconst insertHTMLAfter = (html, el) => el.insertAdjacentHTML('afterend', html)\n~~~\n\n### 8、随机排列数组\n\n~~~js\nconst shuffle = arr => arr.sort(() => 0.5 - Math.random())\n~~~\n\n### 9、在网页上获取选定的文本\n\n~~~js\nconst getSelectedText = () => window.getSelection().toString()\n~~~\n\n### 10、获取随机布尔值\n\n~~~js\nconst getRandomBoolean = () => Math.random() >= 0.5\n~~~\n\n### 11、计算数组的平均值\n\n~~~js\nconst average = (arr) => arr.reduce((a, b) => a + b) / arr.length\n~~~\n\n\n### 12、数组扁平化\n\n~~~js\nconst flat = arr => arr.reduce((pre,cur) => pre.concat(Array.isArray(cur)? flat(cur): cur), [])\n~~~","slug":"skill/一行代码的JavaScript","published":1,"updated":"2023-07-30T18:21:48.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm1000v36l1a60hdg3m","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"一行代码的JavaScript\"><a href=\"#一行代码的JavaScript\" class=\"headerlink\" title=\"一行代码的JavaScript\"></a>一行代码的JavaScript</h1><h3 id=\"1、获取字符串中的字符数\"><a href=\"#1、获取字符串中的字符数\" class=\"headerlink\" title=\"1、获取字符串中的字符数\"></a>1、获取字符串中的字符数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">characterCount</span> = (<span class=\"params\">str, char</span>) =&gt; str.<span class=\"title function_\">split</span>(char).<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、检查对象是否为空\"><a href=\"#2、检查对象是否为空\" class=\"headerlink\" title=\"2、检查对象是否为空\"></a>2、检查对象是否为空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEmpty</span> = obj =&gt; <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj).<span class=\"property\">length</span> === <span class=\"number\">0</span> &amp;&amp; obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、等待一段时间再执行\"><a href=\"#3、等待一段时间再执行\" class=\"headerlink\" title=\"3、等待一段时间再执行\"></a>3、等待一段时间再执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">wait</span> = <span class=\"keyword\">async</span> (<span class=\"params\">milliseconds</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, milliseconds));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、-获取两个日期之间的日差\"><a href=\"#4、-获取两个日期之间的日差\" class=\"headerlink\" title=\"4、 获取两个日期之间的日差\"></a>4、 获取两个日期之间的日差</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">daysBetween</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1 - date2) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、重定向到另一个-URL\"><a href=\"#5、重定向到另一个-URL\" class=\"headerlink\" title=\"5、重定向到另一个 URL\"></a>5、重定向到另一个 URL</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">redirect</span> = url =&gt; location.<span class=\"property\">href</span> = url</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、检查设备上的触摸支持\"><a href=\"#6、检查设备上的触摸支持\" class=\"headerlink\" title=\"6、检查设备上的触摸支持\"></a>6、检查设备上的触摸支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">touchSupported</span> = (<span class=\"params\"></span>) =&gt; (<span class=\"string\">&#x27;ontouchstart&#x27;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> || <span class=\"title class_\">DocumentTouch</span> &amp;&amp; <span class=\"variable language_\">document</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">DocumentTouch</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-在元素后插入-HTML-字符串\"><a href=\"#7、-在元素后插入-HTML-字符串\" class=\"headerlink\" title=\"7、 在元素后插入 HTML 字符串\"></a>7、 在元素后插入 HTML 字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">insertHTMLAfter</span> = (<span class=\"params\">html, el</span>) =&gt; el.<span class=\"title function_\">insertAdjacentHTML</span>(<span class=\"string\">&#x27;afterend&#x27;</span>, html)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、随机排列数组\"><a href=\"#8、随机排列数组\" class=\"headerlink\" title=\"8、随机排列数组\"></a>8、随机排列数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">shuffle</span> = arr =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">() =&gt;</span> <span class=\"number\">0.5</span> - <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、在网页上获取选定的文本\"><a href=\"#9、在网页上获取选定的文本\" class=\"headerlink\" title=\"9、在网页上获取选定的文本\"></a>9、在网页上获取选定的文本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、获取随机布尔值\"><a href=\"#10、获取随机布尔值\" class=\"headerlink\" title=\"10、获取随机布尔值\"></a>10、获取随机布尔值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getRandomBoolean</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt;= <span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、计算数组的平均值\"><a href=\"#11、计算数组的平均值\" class=\"headerlink\" title=\"11、计算数组的平均值\"></a>11、计算数组的平均值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / arr.<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、数组扁平化\"><a href=\"#12、数组扁平化\" class=\"headerlink\" title=\"12、数组扁平化\"></a>12、数组扁平化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">flat</span> = arr =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre,cur</span>) =&gt;</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur)? <span class=\"title function_\">flat</span>(cur): cur), [])</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"一行代码的JavaScript\"><a href=\"#一行代码的JavaScript\" class=\"headerlink\" title=\"一行代码的JavaScript\"></a>一行代码的JavaScript</h1><h3 id=\"1、获取字符串中的字符数\"><a href=\"#1、获取字符串中的字符数\" class=\"headerlink\" title=\"1、获取字符串中的字符数\"></a>1、获取字符串中的字符数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">characterCount</span> = (<span class=\"params\">str, char</span>) =&gt; str.<span class=\"title function_\">split</span>(char).<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、检查对象是否为空\"><a href=\"#2、检查对象是否为空\" class=\"headerlink\" title=\"2、检查对象是否为空\"></a>2、检查对象是否为空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEmpty</span> = obj =&gt; <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj).<span class=\"property\">length</span> === <span class=\"number\">0</span> &amp;&amp; obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、等待一段时间再执行\"><a href=\"#3、等待一段时间再执行\" class=\"headerlink\" title=\"3、等待一段时间再执行\"></a>3、等待一段时间再执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">wait</span> = <span class=\"keyword\">async</span> (<span class=\"params\">milliseconds</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, milliseconds));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、-获取两个日期之间的日差\"><a href=\"#4、-获取两个日期之间的日差\" class=\"headerlink\" title=\"4、 获取两个日期之间的日差\"></a>4、 获取两个日期之间的日差</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">daysBetween</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1 - date2) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、重定向到另一个-URL\"><a href=\"#5、重定向到另一个-URL\" class=\"headerlink\" title=\"5、重定向到另一个 URL\"></a>5、重定向到另一个 URL</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">redirect</span> = url =&gt; location.<span class=\"property\">href</span> = url</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、检查设备上的触摸支持\"><a href=\"#6、检查设备上的触摸支持\" class=\"headerlink\" title=\"6、检查设备上的触摸支持\"></a>6、检查设备上的触摸支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">touchSupported</span> = (<span class=\"params\"></span>) =&gt; (<span class=\"string\">&#x27;ontouchstart&#x27;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> || <span class=\"title class_\">DocumentTouch</span> &amp;&amp; <span class=\"variable language_\">document</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">DocumentTouch</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-在元素后插入-HTML-字符串\"><a href=\"#7、-在元素后插入-HTML-字符串\" class=\"headerlink\" title=\"7、 在元素后插入 HTML 字符串\"></a>7、 在元素后插入 HTML 字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">insertHTMLAfter</span> = (<span class=\"params\">html, el</span>) =&gt; el.<span class=\"title function_\">insertAdjacentHTML</span>(<span class=\"string\">&#x27;afterend&#x27;</span>, html)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、随机排列数组\"><a href=\"#8、随机排列数组\" class=\"headerlink\" title=\"8、随机排列数组\"></a>8、随机排列数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">shuffle</span> = arr =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">() =&gt;</span> <span class=\"number\">0.5</span> - <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、在网页上获取选定的文本\"><a href=\"#9、在网页上获取选定的文本\" class=\"headerlink\" title=\"9、在网页上获取选定的文本\"></a>9、在网页上获取选定的文本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、获取随机布尔值\"><a href=\"#10、获取随机布尔值\" class=\"headerlink\" title=\"10、获取随机布尔值\"></a>10、获取随机布尔值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getRandomBoolean</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt;= <span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、计算数组的平均值\"><a href=\"#11、计算数组的平均值\" class=\"headerlink\" title=\"11、计算数组的平均值\"></a>11、计算数组的平均值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / arr.<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"12、数组扁平化\"><a href=\"#12、数组扁平化\" class=\"headerlink\" title=\"12、数组扁平化\"></a>12、数组扁平化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">flat</span> = arr =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre,cur</span>) =&gt;</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur)? <span class=\"title function_\">flat</span>(cur): cur), [])</span><br></pre></td></tr></table></figure>"},{"title":"vite中配置路径别名","description":"配置路径别名@代表src路径","date":"2022-07-25T16:00:00.000Z","cover":"https://is.gd/tR20xa","_content":"\n# vite 中使用 @ ，配置路径别名\n\nvite 加 vue3 项目中报错`Cannot find module 'XXXXXX ’ or its corresponding type declarations`\n\n我们只需要在以下几个文件里面配置：\n\n**vite.config.ts**:\n\n注意这里用了 node 的 path 模块需要执行`npm i --save-dev @types/node`命令\n\n```ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nconst path = require(\"path\");\n\nexport default defineConfig({\n  plugins: [vue()],\n  define: {\n    \"process.env\": {},\n  },\n  resolve: {\n    // 配置路径别名\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n```\n\n**tsconfig.json**：\n\n配置 baseUrl，paths\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"]\n}\n```\n\n大工告成啦！接下来可以用@别名代表 src 的绝对路径\n","source":"_posts/vite/vite中用@别名.md","raw":"---\ntitle: vite中配置路径别名\ntags: [前端, 项目, Vue, vite]\ncategories: [Vue3]\ndescription: 配置路径别名@代表src路径\ndate: 2022-07-26\ncover: https://is.gd/tR20xa\n---\n\n# vite 中使用 @ ，配置路径别名\n\nvite 加 vue3 项目中报错`Cannot find module 'XXXXXX ’ or its corresponding type declarations`\n\n我们只需要在以下几个文件里面配置：\n\n**vite.config.ts**:\n\n注意这里用了 node 的 path 模块需要执行`npm i --save-dev @types/node`命令\n\n```ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nconst path = require(\"path\");\n\nexport default defineConfig({\n  plugins: [vue()],\n  define: {\n    \"process.env\": {},\n  },\n  resolve: {\n    // 配置路径别名\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n```\n\n**tsconfig.json**：\n\n配置 baseUrl，paths\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"]\n}\n```\n\n大工告成啦！接下来可以用@别名代表 src 的绝对路径\n","slug":"vite/vite中用@别名","published":1,"updated":"2023-07-30T18:21:08.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm3001036l1anhff2k4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"vite-中使用-，配置路径别名\"><a href=\"#vite-中使用-，配置路径别名\" class=\"headerlink\" title=\"vite 中使用 @ ，配置路径别名\"></a>vite 中使用 @ ，配置路径别名</h1><p>vite 加 vue3 项目中报错<code>Cannot find module &#39;XXXXXX ’ or its corresponding type declarations</code></p>\n<p>我们只需要在以下几个文件里面配置：</p>\n<p><strong>vite.config.ts</strong>:</p>\n<p>注意这里用了 node 的 path 模块需要执行<code>npm i --save-dev @types/node</code>命令</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">define</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;process.env&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置路径别名</span></span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;./src&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>tsconfig.json</strong>：</p>\n<p>配置 baseUrl，paths</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/**/*.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.d.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.tsx&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>大工告成啦！接下来可以用@别名代表 src 的绝对路径</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"vite-中使用-，配置路径别名\"><a href=\"#vite-中使用-，配置路径别名\" class=\"headerlink\" title=\"vite 中使用 @ ，配置路径别名\"></a>vite 中使用 @ ，配置路径别名</h1><p>vite 加 vue3 项目中报错<code>Cannot find module &#39;XXXXXX ’ or its corresponding type declarations</code></p>\n<p>我们只需要在以下几个文件里面配置：</p>\n<p><strong>vite.config.ts</strong>:</p>\n<p>注意这里用了 node 的 path 模块需要执行<code>npm i --save-dev @types/node</code>命令</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">define</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;process.env&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置路径别名</span></span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;./src&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>tsconfig.json</strong>：</p>\n<p>配置 baseUrl，paths</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/**/*.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.d.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.tsx&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>大工告成啦！接下来可以用@别名代表 src 的绝对路径</p>\n"},{"title":"初识vite插件(篇一)","description":"初识vite插件","date":"2022-07-28T16:00:00.000Z","cover":"https://is.gd/tR20xa","_content":"\n# 初识vite插件(篇一)\n\n### vite插件形式\n先举个简单的例子来认识下vite插件的结构：\n~~~js\nexport default function myExample () {\n  return {\n    name: 'my-example', // 名称用于警告和错误展示\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        return source; // 返回source表明命中，vite不再询问其他插件处理该id请求\n      }\n      return null; // 返回null表明是其他id要继续处理\n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        return 'export default \"This is virtual!\"'; // 返回\"virtual-module\"模块源码\n      }\n      return null; // 其他id继续处理\n    }\n  };\n}\n~~~\n\n### 通用钩子\n\n下面钩子会在服务器启动时调用一次:\n\n- `options` 替换或操纵rollup选项\n- `buildStart` 开始创建\n\n下面钩子每次有模块请求时都会被调用:\n\n- `resolveId` 创建自定义确认函数，常用语定位第三方依赖\n- `load` 创建自定义加载函数，可用于返回自定义的内容\n- `transform` 可用于转换已加载的模块内容\n\n下面钩子会在服务器关闭时调用一次:\n\n- buildEnd\n- closeBundle\n\n### Vite特有钩子\n\n- `config`: 修改Vite配置\n- `configResolved`：Vite配置确认\n- `configureServer`：用于配置dev server\n- `transformIndexHtml`：用于转换宿主页\n- `handleHotUpdate`：自定义HMR更新时调用\n\n那我们去走一下钩子的顺序：\n\n~~~js\nexport default function myExample () {\n  // 返回的是插件对象\n  return {\n    name: 'hooks-order', \n    // 初始化hooks，只走一次\n    options(opts) {\n      console.log('options', opts);\n    },\n    buildStart() {\n      console.log('buildStart');\n    },\n    // vite特有钩子\n    config(config) {\n      console.log('config', config);\n      return {}\n    },\n    configResolved(resolvedCofnig) {\n      console.log('configResolved');\n    },\n    configureServer(server) {\n      console.log('configureServer');\n      // server.app.use((req, res, next) => {\n      //   // custom handle request...\n      // })\n    },\n    transformIndexHtml(html) {\n      console.log('transformIndexHtml');\n      return html\n      // return html.replace(\n      //   /<title>(.*?)<\\/title>/,\n      //   `<title>Title replaced!</title>`\n      // )\n    },\n    // 通用钩子\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        console.log('resolvedId', source);\n        return source; \n      }\n      return null; \n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        console.log('load');\n        return 'export default \"This is virtual!\"';\n      }\n      return null;\n    },\n    transform(code, id) {\n      if (id === 'virtual-module') {\n        console.log('transform');\n      }\n      return code\n    },\n  };\n}\n~~~\n执行顺序：\n~~~js\n// config -> configResolved -> options -> configureServer -> \n// buildStart -> Vite dev server ready -> transformIndexHtml \n// -> resolvedId -> load -> transform\n~~~\n\n### 插件顺序\n\n- 别名处理Alias\n- 用户插件设置enforce: 'pre'\n- Vite核心插件\n- 用户插件未设置enforce\n- Vite构建插件\n- 用户插件设置enforce: 'post'\n- Vite构建后置插件(minify, manifest, reporting)\n","source":"_posts/vite/初识vite插件.md","raw":"---\ntitle: 初识vite插件(篇一)\ntags: [vite]\ncategories: [前端工程化]\ndescription: 初识vite插件\ndate: 2022-07-29\ncover: https://is.gd/tR20xa\n---\n\n# 初识vite插件(篇一)\n\n### vite插件形式\n先举个简单的例子来认识下vite插件的结构：\n~~~js\nexport default function myExample () {\n  return {\n    name: 'my-example', // 名称用于警告和错误展示\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        return source; // 返回source表明命中，vite不再询问其他插件处理该id请求\n      }\n      return null; // 返回null表明是其他id要继续处理\n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        return 'export default \"This is virtual!\"'; // 返回\"virtual-module\"模块源码\n      }\n      return null; // 其他id继续处理\n    }\n  };\n}\n~~~\n\n### 通用钩子\n\n下面钩子会在服务器启动时调用一次:\n\n- `options` 替换或操纵rollup选项\n- `buildStart` 开始创建\n\n下面钩子每次有模块请求时都会被调用:\n\n- `resolveId` 创建自定义确认函数，常用语定位第三方依赖\n- `load` 创建自定义加载函数，可用于返回自定义的内容\n- `transform` 可用于转换已加载的模块内容\n\n下面钩子会在服务器关闭时调用一次:\n\n- buildEnd\n- closeBundle\n\n### Vite特有钩子\n\n- `config`: 修改Vite配置\n- `configResolved`：Vite配置确认\n- `configureServer`：用于配置dev server\n- `transformIndexHtml`：用于转换宿主页\n- `handleHotUpdate`：自定义HMR更新时调用\n\n那我们去走一下钩子的顺序：\n\n~~~js\nexport default function myExample () {\n  // 返回的是插件对象\n  return {\n    name: 'hooks-order', \n    // 初始化hooks，只走一次\n    options(opts) {\n      console.log('options', opts);\n    },\n    buildStart() {\n      console.log('buildStart');\n    },\n    // vite特有钩子\n    config(config) {\n      console.log('config', config);\n      return {}\n    },\n    configResolved(resolvedCofnig) {\n      console.log('configResolved');\n    },\n    configureServer(server) {\n      console.log('configureServer');\n      // server.app.use((req, res, next) => {\n      //   // custom handle request...\n      // })\n    },\n    transformIndexHtml(html) {\n      console.log('transformIndexHtml');\n      return html\n      // return html.replace(\n      //   /<title>(.*?)<\\/title>/,\n      //   `<title>Title replaced!</title>`\n      // )\n    },\n    // 通用钩子\n    resolveId ( source ) {\n      if (source === 'virtual-module') {\n        console.log('resolvedId', source);\n        return source; \n      }\n      return null; \n    },\n    load ( id ) {\n      if (id === 'virtual-module') {\n        console.log('load');\n        return 'export default \"This is virtual!\"';\n      }\n      return null;\n    },\n    transform(code, id) {\n      if (id === 'virtual-module') {\n        console.log('transform');\n      }\n      return code\n    },\n  };\n}\n~~~\n执行顺序：\n~~~js\n// config -> configResolved -> options -> configureServer -> \n// buildStart -> Vite dev server ready -> transformIndexHtml \n// -> resolvedId -> load -> transform\n~~~\n\n### 插件顺序\n\n- 别名处理Alias\n- 用户插件设置enforce: 'pre'\n- Vite核心插件\n- 用户插件未设置enforce\n- Vite构建插件\n- 用户插件设置enforce: 'post'\n- Vite构建后置插件(minify, manifest, reporting)\n","slug":"vite/初识vite插件","published":1,"updated":"2023-07-30T18:20:17.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm4001236l137txeois","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"初识vite插件-篇一\"><a href=\"#初识vite插件-篇一\" class=\"headerlink\" title=\"初识vite插件(篇一)\"></a>初识vite插件(篇一)</h1><h3 id=\"vite插件形式\"><a href=\"#vite插件形式\" class=\"headerlink\" title=\"vite插件形式\"></a>vite插件形式</h3><p>先举个简单的例子来认识下vite插件的结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myExample</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;my-example&#x27;</span>, <span class=\"comment\">// 名称用于警告和错误展示</span></span><br><span class=\"line\">    resolveId ( source ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> source; <span class=\"comment\">// 返回source表明命中，vite不再询问其他插件处理该id请求</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回null表明是其他id要继续处理</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load ( id ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>; <span class=\"comment\">// 返回&quot;virtual-module&quot;模块源码</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 其他id继续处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用钩子\"><a href=\"#通用钩子\" class=\"headerlink\" title=\"通用钩子\"></a>通用钩子</h3><p>下面钩子会在服务器启动时调用一次:</p>\n<ul>\n<li><code>options</code> 替换或操纵rollup选项</li>\n<li><code>buildStart</code> 开始创建</li>\n</ul>\n<p>下面钩子每次有模块请求时都会被调用:</p>\n<ul>\n<li><code>resolveId</code> 创建自定义确认函数，常用语定位第三方依赖</li>\n<li><code>load</code> 创建自定义加载函数，可用于返回自定义的内容</li>\n<li><code>transform</code> 可用于转换已加载的模块内容</li>\n</ul>\n<p>下面钩子会在服务器关闭时调用一次:</p>\n<ul>\n<li>buildEnd</li>\n<li>closeBundle</li>\n</ul>\n<h3 id=\"Vite特有钩子\"><a href=\"#Vite特有钩子\" class=\"headerlink\" title=\"Vite特有钩子\"></a>Vite特有钩子</h3><ul>\n<li><code>config</code>: 修改Vite配置</li>\n<li><code>configResolved</code>：Vite配置确认</li>\n<li><code>configureServer</code>：用于配置dev server</li>\n<li><code>transformIndexHtml</code>：用于转换宿主页</li>\n<li><code>handleHotUpdate</code>：自定义HMR更新时调用</li>\n</ul>\n<p>那我们去走一下钩子的顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myExample</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回的是插件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hooks-order&#x27;</span>, </span><br><span class=\"line\">    <span class=\"comment\">// 初始化hooks，只走一次</span></span><br><span class=\"line\">    <span class=\"title function_\">options</span>(<span class=\"params\">opts</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;options&#x27;</span>, opts);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">buildStart</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;buildStart&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// vite特有钩子</span></span><br><span class=\"line\">    <span class=\"title function_\">config</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;config&#x27;</span>, config);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">configResolved</span>(<span class=\"params\">resolvedCofnig</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configResolved&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">configureServer</span>(<span class=\"params\">server</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configureServer&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// server.app.use((req, res, next) =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // custom handle request...</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">transformIndexHtml</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transformIndexHtml&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> html</span><br><span class=\"line\">      <span class=\"comment\">// return html.replace(</span></span><br><span class=\"line\">      <span class=\"comment\">//   /&lt;title&gt;(.*?)&lt;\\/title&gt;/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   `&lt;title&gt;Title replaced!&lt;/title&gt;`</span></span><br><span class=\"line\">      <span class=\"comment\">// )</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 通用钩子</span></span><br><span class=\"line\">    resolveId ( source ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolvedId&#x27;</span>, source);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load ( id ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;load&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">transform</span>(<span class=\"params\">code, id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config -&gt; configResolved -&gt; options -&gt; configureServer -&gt; </span></span><br><span class=\"line\"><span class=\"comment\">// buildStart -&gt; Vite dev server ready -&gt; transformIndexHtml </span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; resolvedId -&gt; load -&gt; transform</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件顺序\"><a href=\"#插件顺序\" class=\"headerlink\" title=\"插件顺序\"></a>插件顺序</h3><ul>\n<li>别名处理Alias</li>\n<li>用户插件设置enforce: ‘pre’</li>\n<li>Vite核心插件</li>\n<li>用户插件未设置enforce</li>\n<li>Vite构建插件</li>\n<li>用户插件设置enforce: ‘post’</li>\n<li>Vite构建后置插件(minify, manifest, reporting)</li>\n</ul>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"初识vite插件-篇一\"><a href=\"#初识vite插件-篇一\" class=\"headerlink\" title=\"初识vite插件(篇一)\"></a>初识vite插件(篇一)</h1><h3 id=\"vite插件形式\"><a href=\"#vite插件形式\" class=\"headerlink\" title=\"vite插件形式\"></a>vite插件形式</h3><p>先举个简单的例子来认识下vite插件的结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myExample</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;my-example&#x27;</span>, <span class=\"comment\">// 名称用于警告和错误展示</span></span><br><span class=\"line\">    resolveId ( source ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> source; <span class=\"comment\">// 返回source表明命中，vite不再询问其他插件处理该id请求</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回null表明是其他id要继续处理</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load ( id ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>; <span class=\"comment\">// 返回&quot;virtual-module&quot;模块源码</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 其他id继续处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用钩子\"><a href=\"#通用钩子\" class=\"headerlink\" title=\"通用钩子\"></a>通用钩子</h3><p>下面钩子会在服务器启动时调用一次:</p>\n<ul>\n<li><code>options</code> 替换或操纵rollup选项</li>\n<li><code>buildStart</code> 开始创建</li>\n</ul>\n<p>下面钩子每次有模块请求时都会被调用:</p>\n<ul>\n<li><code>resolveId</code> 创建自定义确认函数，常用语定位第三方依赖</li>\n<li><code>load</code> 创建自定义加载函数，可用于返回自定义的内容</li>\n<li><code>transform</code> 可用于转换已加载的模块内容</li>\n</ul>\n<p>下面钩子会在服务器关闭时调用一次:</p>\n<ul>\n<li>buildEnd</li>\n<li>closeBundle</li>\n</ul>\n<h3 id=\"Vite特有钩子\"><a href=\"#Vite特有钩子\" class=\"headerlink\" title=\"Vite特有钩子\"></a>Vite特有钩子</h3><ul>\n<li><code>config</code>: 修改Vite配置</li>\n<li><code>configResolved</code>：Vite配置确认</li>\n<li><code>configureServer</code>：用于配置dev server</li>\n<li><code>transformIndexHtml</code>：用于转换宿主页</li>\n<li><code>handleHotUpdate</code>：自定义HMR更新时调用</li>\n</ul>\n<p>那我们去走一下钩子的顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myExample</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回的是插件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hooks-order&#x27;</span>, </span><br><span class=\"line\">    <span class=\"comment\">// 初始化hooks，只走一次</span></span><br><span class=\"line\">    <span class=\"title function_\">options</span>(<span class=\"params\">opts</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;options&#x27;</span>, opts);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">buildStart</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;buildStart&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// vite特有钩子</span></span><br><span class=\"line\">    <span class=\"title function_\">config</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;config&#x27;</span>, config);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">configResolved</span>(<span class=\"params\">resolvedCofnig</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configResolved&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">configureServer</span>(<span class=\"params\">server</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;configureServer&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// server.app.use((req, res, next) =&gt; &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // custom handle request...</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">transformIndexHtml</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transformIndexHtml&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> html</span><br><span class=\"line\">      <span class=\"comment\">// return html.replace(</span></span><br><span class=\"line\">      <span class=\"comment\">//   /&lt;title&gt;(.*?)&lt;\\/title&gt;/,</span></span><br><span class=\"line\">      <span class=\"comment\">//   `&lt;title&gt;Title replaced!&lt;/title&gt;`</span></span><br><span class=\"line\">      <span class=\"comment\">// )</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 通用钩子</span></span><br><span class=\"line\">    resolveId ( source ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolvedId&#x27;</span>, source);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> source; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load ( id ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;load&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">transform</span>(<span class=\"params\">code, id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id === <span class=\"string\">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config -&gt; configResolved -&gt; options -&gt; configureServer -&gt; </span></span><br><span class=\"line\"><span class=\"comment\">// buildStart -&gt; Vite dev server ready -&gt; transformIndexHtml </span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; resolvedId -&gt; load -&gt; transform</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件顺序\"><a href=\"#插件顺序\" class=\"headerlink\" title=\"插件顺序\"></a>插件顺序</h3><ul>\n<li>别名处理Alias</li>\n<li>用户插件设置enforce: ‘pre’</li>\n<li>Vite核心插件</li>\n<li>用户插件未设置enforce</li>\n<li>Vite构建插件</li>\n<li>用户插件设置enforce: ‘post’</li>\n<li>Vite构建后置插件(minify, manifest, reporting)</li>\n</ul>\n"},{"title":"在Vue中使用keep-alive","description":"在Vue中使用keep-alive","date":"2022-12-29T16:00:00.000Z","cover":"https://is.gd/ceNaY1","_content":"\n# webpack 一些插件的使用\n\n## 性能优化分析 webpack-bundle-analyzer\n\n1. 安装\n\n```\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n2. 在 webpack.config.js 中配置：\n\n```js\nconst BundleAnalyzerPlugin =\n  require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\nmodule.exprots = {\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: \"server\",\n      analyzerHost: \"127.0.0.1\",\n      analyzerPort: 8889,\n      reportFilename: \"report.html\",\n      defaultSizes: \"parsed\",\n      openAnalyzer: true,\n      generateStatsFile: false,\n      statsFilename: \"stats.json\",\n      statsOptions: null,\n      logLevel: \"info\",\n    }),\n  ],\n};\n```\n\n3. 查看线上打包后的效果，在 page.json 的 scripts 添加脚本\n\n```json\n\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"\n```\n\n> [https://zhuanlan.zhihu.com/p/31541721](https://zhuanlan.zhihu.com/p/31541721)\n","source":"_posts/wepack/webpack一些插件的使用.md","raw":"---\ntitle: 在Vue中使用keep-alive\ntags: [Vue深入]\ncategories: [Vue深入]\ndescription: 在Vue中使用keep-alive\ndate: 2022-12-30\ncover: https://is.gd/ceNaY1\n---\n\n# webpack 一些插件的使用\n\n## 性能优化分析 webpack-bundle-analyzer\n\n1. 安装\n\n```\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n2. 在 webpack.config.js 中配置：\n\n```js\nconst BundleAnalyzerPlugin =\n  require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\nmodule.exprots = {\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: \"server\",\n      analyzerHost: \"127.0.0.1\",\n      analyzerPort: 8889,\n      reportFilename: \"report.html\",\n      defaultSizes: \"parsed\",\n      openAnalyzer: true,\n      generateStatsFile: false,\n      statsFilename: \"stats.json\",\n      statsOptions: null,\n      logLevel: \"info\",\n    }),\n  ],\n};\n```\n\n3. 查看线上打包后的效果，在 page.json 的 scripts 添加脚本\n\n```json\n\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"\n```\n\n> [https://zhuanlan.zhihu.com/p/31541721](https://zhuanlan.zhihu.com/p/31541721)\n","slug":"wepack/webpack一些插件的使用","published":1,"updated":"2023-07-30T18:30:27.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm6001836l11bjf39vf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"webpack-一些插件的使用\"><a href=\"#webpack-一些插件的使用\" class=\"headerlink\" title=\"webpack 一些插件的使用\"></a>webpack 一些插件的使用</h1><h2 id=\"性能优化分析-webpack-bundle-analyzer\"><a href=\"#性能优化分析-webpack-bundle-analyzer\" class=\"headerlink\" title=\"性能优化分析 webpack-bundle-analyzer\"></a>性能优化分析 webpack-bundle-analyzer</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 webpack.config.js 中配置：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> =</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exprots</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">analyzerMode</span>: <span class=\"string\">&quot;server&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">analyzerHost</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">analyzerPort</span>: <span class=\"number\">8889</span>,</span><br><span class=\"line\">      <span class=\"attr\">reportFilename</span>: <span class=\"string\">&quot;report.html&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">defaultSizes</span>: <span class=\"string\">&quot;parsed&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">openAnalyzer</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">generateStatsFile</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">statsFilename</span>: <span class=\"string\">&quot;stats.json&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">statsOptions</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">logLevel</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看线上打包后的效果，在 page.json 的 scripts 添加脚本</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;analyz&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NODE_ENV=production npm_config_report=true npm run build&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/31541721\">https://zhuanlan.zhihu.com/p/31541721</a></p>\n</blockquote>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"webpack-一些插件的使用\"><a href=\"#webpack-一些插件的使用\" class=\"headerlink\" title=\"webpack 一些插件的使用\"></a>webpack 一些插件的使用</h1><h2 id=\"性能优化分析-webpack-bundle-analyzer\"><a href=\"#性能优化分析-webpack-bundle-analyzer\" class=\"headerlink\" title=\"性能优化分析 webpack-bundle-analyzer\"></a>性能优化分析 webpack-bundle-analyzer</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 webpack.config.js 中配置：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> =</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exprots</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">analyzerMode</span>: <span class=\"string\">&quot;server&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">analyzerHost</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">analyzerPort</span>: <span class=\"number\">8889</span>,</span><br><span class=\"line\">      <span class=\"attr\">reportFilename</span>: <span class=\"string\">&quot;report.html&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">defaultSizes</span>: <span class=\"string\">&quot;parsed&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">openAnalyzer</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">generateStatsFile</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">statsFilename</span>: <span class=\"string\">&quot;stats.json&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">statsOptions</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">logLevel</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看线上打包后的效果，在 page.json 的 scripts 添加脚本</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;analyz&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NODE_ENV=production npm_config_report=true npm run build&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/31541721\">https://zhuanlan.zhihu.com/p/31541721</a></p>\n</blockquote>\n"},{"title":"10.28日随笔","description":"心情日记","date":"2022-10-27T16:00:00.000Z","cover":"https://is.gd/4lmG3h","_content":"\n# 10.28 日随笔\n\n现在深夜 12 点半，这个时候平时一般在看小说，或者打王者，至于今天为什么不打游戏看小说。纯粹因为看完了余华的小说《活着》，颇有感触。借用文中说的一句话：“没有比活着更艰难的事情，没有比活着更美好的事情。”徐福贵人生的起起落落基本上是我们父一辈所经历的事情，在那个年代能活着真的很艰难，很印象深刻，到如今的想起我的生活，基本上没什么困难，基本上有爸妈顶着，很幸福，挺像苦根的年少无知。\n","source":"_posts/个人随笔/10.28日随笔.md","raw":"---\ntitle: 10.28日随笔\ntags: [随笔]\ncategories: [心情日记]\ndescription: 心情日记\ndate: 2022-10-28\ncover: https://is.gd/4lmG3h\n---\n\n# 10.28 日随笔\n\n现在深夜 12 点半，这个时候平时一般在看小说，或者打王者，至于今天为什么不打游戏看小说。纯粹因为看完了余华的小说《活着》，颇有感触。借用文中说的一句话：“没有比活着更艰难的事情，没有比活着更美好的事情。”徐福贵人生的起起落落基本上是我们父一辈所经历的事情，在那个年代能活着真的很艰难，很印象深刻，到如今的想起我的生活，基本上没什么困难，基本上有爸妈顶着，很幸福，挺像苦根的年少无知。\n","slug":"个人随笔/10.28日随笔","published":1,"updated":"2023-07-30T18:25:50.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm7001b36l18h73g7p1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"10-28-日随笔\"><a href=\"#10-28-日随笔\" class=\"headerlink\" title=\"10.28 日随笔\"></a>10.28 日随笔</h1><p>现在深夜 12 点半，这个时候平时一般在看小说，或者打王者，至于今天为什么不打游戏看小说。纯粹因为看完了余华的小说《活着》，颇有感触。借用文中说的一句话：“没有比活着更艰难的事情，没有比活着更美好的事情。”徐福贵人生的起起落落基本上是我们父一辈所经历的事情，在那个年代能活着真的很艰难，很印象深刻，到如今的想起我的生活，基本上没什么困难，基本上有爸妈顶着，很幸福，挺像苦根的年少无知。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"10-28-日随笔\"><a href=\"#10-28-日随笔\" class=\"headerlink\" title=\"10.28 日随笔\"></a>10.28 日随笔</h1><p>现在深夜 12 点半，这个时候平时一般在看小说，或者打王者，至于今天为什么不打游戏看小说。纯粹因为看完了余华的小说《活着》，颇有感触。借用文中说的一句话：“没有比活着更艰难的事情，没有比活着更美好的事情。”徐福贵人生的起起落落基本上是我们父一辈所经历的事情，在那个年代能活着真的很艰难，很印象深刻，到如今的想起我的生活，基本上没什么困难，基本上有爸妈顶着，很幸福，挺像苦根的年少无知。</p>\n"},{"title":"手写汇总","description":"前端个人错题集","date":"2022-10-19T16:00:00.000Z","cover":"https://is.gd/BKfqTS","_content":"\n# 手写汇总\n\n### 防抖(debounce)\n\n> 触发高配事件 n 秒内只触发一次，如果 n 秒内再次被触发，则重新计算时间\n\n代码：\n\n```js\nfunction debounce(fn, wait) {\n  let timer;\n  return function () {\n    let _this = this;\n    let args = arguments;\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.apply(_this, args);\n    }, wait);\n  };\n}\n```\n\n### 节流(throttle)\n\n> 高频事件触发，但在 n 秒只触发一次\n\n#### 使用时间戳实现\n\n```js\nfunction throttle(fn, wait) {\n  let time = 0;\n  return function () {\n    let _this = this;\n    let args = arguments;\n    let now = Date.now();\n    if (now - time > wait) {\n      fn.apply(_this, args);\n    }\n  };\n}\n```\n\n#### 使用定时器\n\n```js\nfunction thorttle(fn, wait) {\n  let timer;\n  return function () {\n    let _this = this;\n    let args = arguments;\n\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        fn.apply(_this, args);\n      }, wait);\n    }\n  };\n}\n```\n\n### 手写 bind\n\n> 强行绑定 this 指向，但不执行\n\n```js\nFunction.prototype.bind = function (context, ...args) {\n  const self = this;\n  const fn = function (...newArgs) {\n    // 考虑bind后为构造函数的情况\n    self.apply(this instanceof fn ? this : context, args.concat(newArgs));\n  };\n\n  fn.prototype = Object.create(this.prototype);\n\n  return fn;\n};\n```\n\n### 实现深拷贝\n\n1. `JSON.parse(JSON.stringify)`api（node 和浏览器均可以用）\n\n- 缺点：\n  1. 对象里面如果是日期和正则的话会转成字符串\n  2. `JSON.stringify` 传入递归结构会报错，以及会忽略 undefined 属性，`JSON.parse` 的时候会报错\n\n2. `structuredClone` api（只能在浏览器环境使用）\n\n- 解决了 JSON.stringiify 所有缺点\n\n3. 自己手写（完整版）\n\n```js\nfunction deepClone(obj) {\n  // 可能为null\n  if (obj === null) return null;\n  // 为日期对象\n  if (obj instanceof Date) return new Date(obj);\n  // 为正则对象\n  if (obj instanceof RegExp) return new RegExp(obj);\n  let result = Object.create(obj);\n  for (const key in obj) {\n    if (Object.hasOwnProperty.call(obj, key)) {\n      if (typeof obj[key] === \"object\") {\n        result[key] = deepClone(obj[key]);\n      } else {\n        result[key] = obj[key];\n      }\n    }\n  }\n  return result;\n}\n```\n\n## URL 系列\n\n### 实现 URL 取参数\n\n实现如下这个功能，且 url 里面还有汉字\n\n```js\n\"https://test.com?name=%E5%BA%B7%E5%BA%B7&age=20\";\n// => {name: 康康,age: 20}\n\n\"https://test.com?name=%E5%BA%B7%E5%BA%B7&age=20&hobby=%E6%95%B2%E4%BB%A3%E7%A0%81&hobby=%E7%9C%8B%E4%B9%A6\";\n// => {name: 康康, age:20, hobby: ['敲代码', '看书']}\n```\n\n```js\nfunction urlParams(url) {\n  const dict = {};\n  url.replace(/([^?&]*)=([^&]*)/g, (_, key, val) => {\n    key = decodeURIComponent(key);\n    val = decodeURIComponent(val);\n    if (dict[key]) return (dict[key] = [dict[key], val].flat());\n    dict[key] = val;\n  });\n  return dict;\n}\n```\n\n### 实现一个函数用来对 URL 的 querystring 进行编码\n\n## 科里化系列\n\n### 实现一个无限累加 sum 函数\n\n> 实现效果大该是这个样子的\n\n```js\nsum(1, 2, 3).valueOf(); //6\nsum(2, 3)(2).valueOf(); //7\nsum(1)(2)(3)(4).valueOf(); //10\nsum(2)(4, 1)(2).valueOf(); //9\nsum(1)(2)(3)(4)(5)(6).valueOf(); // 21\n```\n\n**代码实现**:\n\n```js\nfunction sum(...args) {\n  // 收集参数\n  const f = (...rest) => sum(...rest, ...args);\n  // 一次性处理\n  f.valueOf = () => args.reduce((x, y) => x + y, 0);\n  return f;\n}\n```\n\n## 数组方法系列\n\n### 实现一个 flatMap 函数\n\n> 实现一个`[1, 2, [3] , 4].flatMap(x => x + 1)` => `[2, 3, 31, 5]`\n\n```js\nArray.prototype.flatMap = function (mapper) {\n  return this.map(mapper).flat();\n};\n```\n\n### 实现一个 sample 函数，从数组随机取一个元素\n\n```js\nArray.prototype.sample = function () {\n  if (!Array.isArray(this)) {\n    throw new Error(\"not a array\");\n  }\n  return this[Math.random() * this.length];\n};\n```\n\n### 手写一个 async/await 函数\n\n本人写了一篇 CSDN 文章：[https://blog.csdn.net/weixin_50789156/article/details/124199482](https://blog.csdn.net/weixin_50789156/article/details/124199482)\n\n```js\nfunction myAsync(genFn) {\n  return function () {\n    let gen = genFn.apply(this, arguments);\n    return new Promise((resolve, reject) => {\n      function go(key, arg) {\n        let res;\n        try {\n          res = gen[key](arg);\n        } catch (err) {\n          return reject(err);\n        }\n        const { value, done } = res;\n        if (done) resolve(\"ok\");\n        else {\n          Promise.resolve(value).then((data) => go(key, data));\n        }\n      }\n      // 初始化执行一次\n      go(\"next\");\n    });\n  };\n}\n```\n\n### 实现一个 lru cache\n\n大概实现一个这样的算法题，get 操作会产生最新的值，put 也会产生最新的值，且原数据有限制，会删除最就未访问的值\n\n```js\n// [\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n// [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]\nconst lruCache = new LRUCache(2);\nlruCache.put(1, 1);\nlruCache.put(2, 2);\nconst res1 = lruCache.get(1);\nlruCache.put(3, 3);\nconst res2 = lruCache.get(2);\nlruCache.put(4, 4);\nconst res3 = lruCache.get(1);\nconst res4 = lruCache.get(3);\nconst res5 = lruCache.get(4);\n\nconsole.log(res1, res2, res3, res4, res5);\n// 1 undefined undefined 3 4\n```\n\n代码：\n\n```js\nclass LRUCache {\n  constructor(limit) {\n    this.limit = limit;\n    this.cache = new Map();\n  }\n\n  get(key) {\n    if (!this.cache.has(key)) return undefined;\n    const value = this.cache.get(key);\n    this.cache.delete(key);\n    this.cache.set(key, value);\n    return value;\n  }\n  put(key, value) {\n    if (this.cache.has(key)) this.cache.delete(key);\n    else if (this.cache.size >= this.limit) {\n      const del = this.cache.keys().next().value;\n      this.cache.delete(del);\n    }\n    this.cache.set(key, value);\n  }\n}\n```\n\n## loash 系列\n\n### 实现 loash.get 方法\n\n> 定义一个对象，实现大概这样的效果\n\n> const object = { a: [{ b: { c: 3 } }] };\n\n> get(object, \"a[0].b.c\"); //=> 3\n\n> get(object, 'a[0][\"b\"][\"c\"]'); //=> 3\n\n> get(object, \"a[100].b.c\", 10086);//=> 10086\n\n```js\nfunction get(source, path, defaultValue = undefined) {\n  const paths = path\n    .repalce(/\\[(\\w+)\\]/g, \".$1\")\n    .repalce(/\\['(\\w+)'\\]/g)\n    .repalce(/\\[\"(\\w+)\"\\]/g)\n    .split(\".\");\n  let result = source;\n  for (const p of path) {\n    result = result?.p;\n  }\n  return result === undefined ? defaultValue : result;\n}\n```\n\n### 实现 loash.once\n\n> 大概效果是这样的\n\n**示例**：\n\n```js\nconst f = (x) => x;\n\nconst onceF = once(f);\n\n//=> 3\nonceF(3);\n\n//=> 3\nonceF(4);\n```\n\n**代码实现**：\n\n```js\nfunction onceCache(fn) {\n  let toggle = false;\n  res = null;\n  return function () {\n    if (toggle) return res;\n    toggle = true;\n    return (res = fn.apply(this, arguments));\n  };\n}\n```\n\n## Promise 系列\n\n### 手写 Promise 及 then 方法\n\n> 原文可可以看 https://juejin.cn/post/7040016523108286494 这篇文章，个人感觉书写的格式梳理的很好\n\n```js\nclass myPromise {\n  status = \"pendding\";\n  value = undefined;\n  onResolvedCallbacks = [];\n  onRejectedCallbacks = [];\n  constructor(exec) {\n    const reslove = (value) => {\n      const doFn = () => {\n        if (this.status !== \"pendding\") return;\n        this.value = value;\n        this.status = \"resloved\";\n        while (this.onRejectedCallbacks.length) {\n          this.onResolvedCallbacks.shift()();\n        }\n      };\n      setTimeout(doFn, 0);\n    };\n    const reject = (value) => {\n      const doFn = () => {\n        if (this.status !== \"pedding\") return;\n        this.value = value;\n        this.status = \"rejected\";\n        while (this.onRejectedCallbacks.length) {\n          this.onRejectedCallbacks.shift()();\n        }\n        setTimeout(doFn, 0);\n      };\n    };\n    try {\n      exec(reslove, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n\n  then(onReslove, onReject) {\n    onReslove = typeof onReslove === \"function\" ? onReslove : (res) => res;\n    onReject =\n      typeof onReject === \"function\"\n        ? onReject\n        : (err) => {\n            throw err;\n          };\n    const newPromise = new myPromise((reslove, reject) => {\n      // 统一处理函数\n      const execFun = (fn, val) => {\n        try {\n          let res = fn(val);\n          if (newPromise === res) {\n            reject(new TypeError(\"回调地狱！！\"));\n            return;\n          }\n          if (res instanceof myPromise) {\n            myPromise.then(reslove, reject);\n          } else {\n            reslove(res);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      const success = () => {\n        execFun(onReslove, this.value);\n      };\n\n      const failed = () => {\n        execFun(onReject, this.value);\n      };\n\n      if (this.status === \"pending\") {\n        this.onResolvedCallbacks.push(success);\n        this.onRejectedCallbacks.push(failed);\n      } else if (this.status === \"reslove\") {\n        success();\n      } else {\n        failed();\n      }\n    });\n\n    return newPromise;\n  }\n}\n```\n\n### 手写 promise.map 方法，控制并发数量限制\n\n> 第一个 for 循环 limit 同步，每次执行 limit 个，当执行完当前的 promise，会进入下一个 next\n\n```js\nfunction promiseMap(list, fn, limit = Infinity) {\n  return new Promise((reslove) => {\n    let ret = [];\n    let index = -1;\n    function next() {\n      ++index;\n      Promise.resolve(list[index])\n        .then((val) => fn(val, index))\n        .then((res) => {\n          ret.push(res);\n          if (ret.length === arr.length) {\n            reslove(ret);\n          } else if (index < arr.length) {\n            next();\n          }\n        });\n    }\n    for (let i = 0; i < limit && i < list.length; i++) {\n      next();\n    }\n  });\n}\n```\n\n### Promise.all\n\n> 作用： 并发请求，一次性处理多个 promise\n> 只要有一个失败状态就返回\n\n```js\nPromise.prototype.all = function (promiseArr) {\n  let index = 0, // 计数器\n    len = promiseArr.legth,\n    data = [];\n  return new Promise((reslove, reject) => {\n    promiseArr.forEach((p, i) => {\n      Promise.resolve(p).then(\n        (val) => {\n          // 保证值得顺序\n          data[i] = val;\n          // 执行完promise已经达到长度\n          if (++index === len) reslove(data);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n    });\n  });\n};\n```\n\n### Promise.race\n\n> 返回最快的 promise 的结果\n\n```js\nPromise.prototype.race = function (promiseArr) {\n  return new Promise((reslove, reject) => {\n    promiseArr.forEach((p) => {\n      Promise.resolve(p).then(\n        (val) => {\n          reslove(val);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n    });\n  });\n};\n```\n","source":"_posts/前端手写/手写题汇总.md","raw":"---\ntitle: 手写汇总\ntags: [前端, 手写]\ncategories: [手写汇总]\ndescription: 前端个人错题集\ndate: 2022-10-20\ncover: https://is.gd/BKfqTS\n---\n\n# 手写汇总\n\n### 防抖(debounce)\n\n> 触发高配事件 n 秒内只触发一次，如果 n 秒内再次被触发，则重新计算时间\n\n代码：\n\n```js\nfunction debounce(fn, wait) {\n  let timer;\n  return function () {\n    let _this = this;\n    let args = arguments;\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.apply(_this, args);\n    }, wait);\n  };\n}\n```\n\n### 节流(throttle)\n\n> 高频事件触发，但在 n 秒只触发一次\n\n#### 使用时间戳实现\n\n```js\nfunction throttle(fn, wait) {\n  let time = 0;\n  return function () {\n    let _this = this;\n    let args = arguments;\n    let now = Date.now();\n    if (now - time > wait) {\n      fn.apply(_this, args);\n    }\n  };\n}\n```\n\n#### 使用定时器\n\n```js\nfunction thorttle(fn, wait) {\n  let timer;\n  return function () {\n    let _this = this;\n    let args = arguments;\n\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        fn.apply(_this, args);\n      }, wait);\n    }\n  };\n}\n```\n\n### 手写 bind\n\n> 强行绑定 this 指向，但不执行\n\n```js\nFunction.prototype.bind = function (context, ...args) {\n  const self = this;\n  const fn = function (...newArgs) {\n    // 考虑bind后为构造函数的情况\n    self.apply(this instanceof fn ? this : context, args.concat(newArgs));\n  };\n\n  fn.prototype = Object.create(this.prototype);\n\n  return fn;\n};\n```\n\n### 实现深拷贝\n\n1. `JSON.parse(JSON.stringify)`api（node 和浏览器均可以用）\n\n- 缺点：\n  1. 对象里面如果是日期和正则的话会转成字符串\n  2. `JSON.stringify` 传入递归结构会报错，以及会忽略 undefined 属性，`JSON.parse` 的时候会报错\n\n2. `structuredClone` api（只能在浏览器环境使用）\n\n- 解决了 JSON.stringiify 所有缺点\n\n3. 自己手写（完整版）\n\n```js\nfunction deepClone(obj) {\n  // 可能为null\n  if (obj === null) return null;\n  // 为日期对象\n  if (obj instanceof Date) return new Date(obj);\n  // 为正则对象\n  if (obj instanceof RegExp) return new RegExp(obj);\n  let result = Object.create(obj);\n  for (const key in obj) {\n    if (Object.hasOwnProperty.call(obj, key)) {\n      if (typeof obj[key] === \"object\") {\n        result[key] = deepClone(obj[key]);\n      } else {\n        result[key] = obj[key];\n      }\n    }\n  }\n  return result;\n}\n```\n\n## URL 系列\n\n### 实现 URL 取参数\n\n实现如下这个功能，且 url 里面还有汉字\n\n```js\n\"https://test.com?name=%E5%BA%B7%E5%BA%B7&age=20\";\n// => {name: 康康,age: 20}\n\n\"https://test.com?name=%E5%BA%B7%E5%BA%B7&age=20&hobby=%E6%95%B2%E4%BB%A3%E7%A0%81&hobby=%E7%9C%8B%E4%B9%A6\";\n// => {name: 康康, age:20, hobby: ['敲代码', '看书']}\n```\n\n```js\nfunction urlParams(url) {\n  const dict = {};\n  url.replace(/([^?&]*)=([^&]*)/g, (_, key, val) => {\n    key = decodeURIComponent(key);\n    val = decodeURIComponent(val);\n    if (dict[key]) return (dict[key] = [dict[key], val].flat());\n    dict[key] = val;\n  });\n  return dict;\n}\n```\n\n### 实现一个函数用来对 URL 的 querystring 进行编码\n\n## 科里化系列\n\n### 实现一个无限累加 sum 函数\n\n> 实现效果大该是这个样子的\n\n```js\nsum(1, 2, 3).valueOf(); //6\nsum(2, 3)(2).valueOf(); //7\nsum(1)(2)(3)(4).valueOf(); //10\nsum(2)(4, 1)(2).valueOf(); //9\nsum(1)(2)(3)(4)(5)(6).valueOf(); // 21\n```\n\n**代码实现**:\n\n```js\nfunction sum(...args) {\n  // 收集参数\n  const f = (...rest) => sum(...rest, ...args);\n  // 一次性处理\n  f.valueOf = () => args.reduce((x, y) => x + y, 0);\n  return f;\n}\n```\n\n## 数组方法系列\n\n### 实现一个 flatMap 函数\n\n> 实现一个`[1, 2, [3] , 4].flatMap(x => x + 1)` => `[2, 3, 31, 5]`\n\n```js\nArray.prototype.flatMap = function (mapper) {\n  return this.map(mapper).flat();\n};\n```\n\n### 实现一个 sample 函数，从数组随机取一个元素\n\n```js\nArray.prototype.sample = function () {\n  if (!Array.isArray(this)) {\n    throw new Error(\"not a array\");\n  }\n  return this[Math.random() * this.length];\n};\n```\n\n### 手写一个 async/await 函数\n\n本人写了一篇 CSDN 文章：[https://blog.csdn.net/weixin_50789156/article/details/124199482](https://blog.csdn.net/weixin_50789156/article/details/124199482)\n\n```js\nfunction myAsync(genFn) {\n  return function () {\n    let gen = genFn.apply(this, arguments);\n    return new Promise((resolve, reject) => {\n      function go(key, arg) {\n        let res;\n        try {\n          res = gen[key](arg);\n        } catch (err) {\n          return reject(err);\n        }\n        const { value, done } = res;\n        if (done) resolve(\"ok\");\n        else {\n          Promise.resolve(value).then((data) => go(key, data));\n        }\n      }\n      // 初始化执行一次\n      go(\"next\");\n    });\n  };\n}\n```\n\n### 实现一个 lru cache\n\n大概实现一个这样的算法题，get 操作会产生最新的值，put 也会产生最新的值，且原数据有限制，会删除最就未访问的值\n\n```js\n// [\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n// [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]\nconst lruCache = new LRUCache(2);\nlruCache.put(1, 1);\nlruCache.put(2, 2);\nconst res1 = lruCache.get(1);\nlruCache.put(3, 3);\nconst res2 = lruCache.get(2);\nlruCache.put(4, 4);\nconst res3 = lruCache.get(1);\nconst res4 = lruCache.get(3);\nconst res5 = lruCache.get(4);\n\nconsole.log(res1, res2, res3, res4, res5);\n// 1 undefined undefined 3 4\n```\n\n代码：\n\n```js\nclass LRUCache {\n  constructor(limit) {\n    this.limit = limit;\n    this.cache = new Map();\n  }\n\n  get(key) {\n    if (!this.cache.has(key)) return undefined;\n    const value = this.cache.get(key);\n    this.cache.delete(key);\n    this.cache.set(key, value);\n    return value;\n  }\n  put(key, value) {\n    if (this.cache.has(key)) this.cache.delete(key);\n    else if (this.cache.size >= this.limit) {\n      const del = this.cache.keys().next().value;\n      this.cache.delete(del);\n    }\n    this.cache.set(key, value);\n  }\n}\n```\n\n## loash 系列\n\n### 实现 loash.get 方法\n\n> 定义一个对象，实现大概这样的效果\n\n> const object = { a: [{ b: { c: 3 } }] };\n\n> get(object, \"a[0].b.c\"); //=> 3\n\n> get(object, 'a[0][\"b\"][\"c\"]'); //=> 3\n\n> get(object, \"a[100].b.c\", 10086);//=> 10086\n\n```js\nfunction get(source, path, defaultValue = undefined) {\n  const paths = path\n    .repalce(/\\[(\\w+)\\]/g, \".$1\")\n    .repalce(/\\['(\\w+)'\\]/g)\n    .repalce(/\\[\"(\\w+)\"\\]/g)\n    .split(\".\");\n  let result = source;\n  for (const p of path) {\n    result = result?.p;\n  }\n  return result === undefined ? defaultValue : result;\n}\n```\n\n### 实现 loash.once\n\n> 大概效果是这样的\n\n**示例**：\n\n```js\nconst f = (x) => x;\n\nconst onceF = once(f);\n\n//=> 3\nonceF(3);\n\n//=> 3\nonceF(4);\n```\n\n**代码实现**：\n\n```js\nfunction onceCache(fn) {\n  let toggle = false;\n  res = null;\n  return function () {\n    if (toggle) return res;\n    toggle = true;\n    return (res = fn.apply(this, arguments));\n  };\n}\n```\n\n## Promise 系列\n\n### 手写 Promise 及 then 方法\n\n> 原文可可以看 https://juejin.cn/post/7040016523108286494 这篇文章，个人感觉书写的格式梳理的很好\n\n```js\nclass myPromise {\n  status = \"pendding\";\n  value = undefined;\n  onResolvedCallbacks = [];\n  onRejectedCallbacks = [];\n  constructor(exec) {\n    const reslove = (value) => {\n      const doFn = () => {\n        if (this.status !== \"pendding\") return;\n        this.value = value;\n        this.status = \"resloved\";\n        while (this.onRejectedCallbacks.length) {\n          this.onResolvedCallbacks.shift()();\n        }\n      };\n      setTimeout(doFn, 0);\n    };\n    const reject = (value) => {\n      const doFn = () => {\n        if (this.status !== \"pedding\") return;\n        this.value = value;\n        this.status = \"rejected\";\n        while (this.onRejectedCallbacks.length) {\n          this.onRejectedCallbacks.shift()();\n        }\n        setTimeout(doFn, 0);\n      };\n    };\n    try {\n      exec(reslove, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n\n  then(onReslove, onReject) {\n    onReslove = typeof onReslove === \"function\" ? onReslove : (res) => res;\n    onReject =\n      typeof onReject === \"function\"\n        ? onReject\n        : (err) => {\n            throw err;\n          };\n    const newPromise = new myPromise((reslove, reject) => {\n      // 统一处理函数\n      const execFun = (fn, val) => {\n        try {\n          let res = fn(val);\n          if (newPromise === res) {\n            reject(new TypeError(\"回调地狱！！\"));\n            return;\n          }\n          if (res instanceof myPromise) {\n            myPromise.then(reslove, reject);\n          } else {\n            reslove(res);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      const success = () => {\n        execFun(onReslove, this.value);\n      };\n\n      const failed = () => {\n        execFun(onReject, this.value);\n      };\n\n      if (this.status === \"pending\") {\n        this.onResolvedCallbacks.push(success);\n        this.onRejectedCallbacks.push(failed);\n      } else if (this.status === \"reslove\") {\n        success();\n      } else {\n        failed();\n      }\n    });\n\n    return newPromise;\n  }\n}\n```\n\n### 手写 promise.map 方法，控制并发数量限制\n\n> 第一个 for 循环 limit 同步，每次执行 limit 个，当执行完当前的 promise，会进入下一个 next\n\n```js\nfunction promiseMap(list, fn, limit = Infinity) {\n  return new Promise((reslove) => {\n    let ret = [];\n    let index = -1;\n    function next() {\n      ++index;\n      Promise.resolve(list[index])\n        .then((val) => fn(val, index))\n        .then((res) => {\n          ret.push(res);\n          if (ret.length === arr.length) {\n            reslove(ret);\n          } else if (index < arr.length) {\n            next();\n          }\n        });\n    }\n    for (let i = 0; i < limit && i < list.length; i++) {\n      next();\n    }\n  });\n}\n```\n\n### Promise.all\n\n> 作用： 并发请求，一次性处理多个 promise\n> 只要有一个失败状态就返回\n\n```js\nPromise.prototype.all = function (promiseArr) {\n  let index = 0, // 计数器\n    len = promiseArr.legth,\n    data = [];\n  return new Promise((reslove, reject) => {\n    promiseArr.forEach((p, i) => {\n      Promise.resolve(p).then(\n        (val) => {\n          // 保证值得顺序\n          data[i] = val;\n          // 执行完promise已经达到长度\n          if (++index === len) reslove(data);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n    });\n  });\n};\n```\n\n### Promise.race\n\n> 返回最快的 promise 的结果\n\n```js\nPromise.prototype.race = function (promiseArr) {\n  return new Promise((reslove, reject) => {\n    promiseArr.forEach((p) => {\n      Promise.resolve(p).then(\n        (val) => {\n          reslove(val);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n    });\n  });\n};\n```\n","slug":"前端手写/手写题汇总","published":1,"updated":"2023-07-30T18:25:18.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdm8001e36l1bz0p5z4b","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"手写汇总\"><a href=\"#手写汇总\" class=\"headerlink\" title=\"手写汇总\"></a>手写汇总</h1><h3 id=\"防抖-debounce\"><a href=\"#防抖-debounce\" class=\"headerlink\" title=\"防抖(debounce)\"></a>防抖(debounce)</h3><blockquote>\n<p>触发高配事件 n 秒内只触发一次，如果 n 秒内再次被触发，则重新计算时间</p>\n</blockquote>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流-throttle\"><a href=\"#节流-throttle\" class=\"headerlink\" title=\"节流(throttle)\"></a>节流(throttle)</h3><blockquote>\n<p>高频事件触发，但在 n 秒只触发一次</p>\n</blockquote>\n<h4 id=\"使用时间戳实现\"><a href=\"#使用时间戳实现\" class=\"headerlink\" title=\"使用时间戳实现\"></a>使用时间戳实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now - time &gt; wait) &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用定时器\"><a href=\"#使用定时器\" class=\"headerlink\" title=\"使用定时器\"></a>使用定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thorttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-bind\"><a href=\"#手写-bind\" class=\"headerlink\" title=\"手写 bind\"></a>手写 bind</h3><blockquote>\n<p>强行绑定 this 指向，但不执行</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\">...newArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 考虑bind后为构造函数的情况</span></span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fn ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(newArgs));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h3><ol>\n<li><code>JSON.parse(JSON.stringify)</code>api（node 和浏览器均可以用）</li>\n</ol>\n<ul>\n<li>缺点：<ol>\n<li>对象里面如果是日期和正则的话会转成字符串</li>\n<li><code>JSON.stringify</code> 传入递归结构会报错，以及会忽略 undefined 属性，<code>JSON.parse</code> 的时候会报错</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>structuredClone</code> api（只能在浏览器环境使用）</li>\n</ol>\n<ul>\n<li>解决了 JSON.stringiify 所有缺点</li>\n</ul>\n<ol start=\"3\">\n<li>自己手写（完整版）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可能为null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 为日期对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 为正则对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        result[key] = <span class=\"title function_\">deepClone</span>(obj[key]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result[key] = obj[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"URL-系列\"><a href=\"#URL-系列\" class=\"headerlink\" title=\"URL 系列\"></a>URL 系列</h2><h3 id=\"实现-URL-取参数\"><a href=\"#实现-URL-取参数\" class=\"headerlink\" title=\"实现 URL 取参数\"></a>实现 URL 取参数</h3><p>实现如下这个功能，且 url 里面还有汉字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;name: 康康,age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&amp;hobby=%E6%95%B2%E4%BB%A3%E7%A0%81&amp;hobby=%E7%9C%8B%E4%B9%A6&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;name: 康康, age:20, hobby: [&#x27;敲代码&#x27;, &#x27;看书&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">urlParams</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dict = &#123;&#125;;</span><br><span class=\"line\">  url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/([^?&amp;]*)=([^&amp;]*)/g</span>, <span class=\"function\">(<span class=\"params\">_, key, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    key = <span class=\"built_in\">decodeURIComponent</span>(key);</span><br><span class=\"line\">    val = <span class=\"built_in\">decodeURIComponent</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dict[key]) <span class=\"keyword\">return</span> (dict[key] = [dict[key], val].<span class=\"title function_\">flat</span>());</span><br><span class=\"line\">    dict[key] = val;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dict;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个函数用来对-URL-的-querystring-进行编码\"><a href=\"#实现一个函数用来对-URL-的-querystring-进行编码\" class=\"headerlink\" title=\"实现一个函数用来对 URL 的 querystring 进行编码\"></a>实现一个函数用来对 URL 的 querystring 进行编码</h3><h2 id=\"科里化系列\"><a href=\"#科里化系列\" class=\"headerlink\" title=\"科里化系列\"></a>科里化系列</h2><h3 id=\"实现一个无限累加-sum-函数\"><a href=\"#实现一个无限累加-sum-函数\" class=\"headerlink\" title=\"实现一个无限累加 sum 函数\"></a>实现一个无限累加 sum 函数</h3><blockquote>\n<p>实现效果大该是这个样子的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">2</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//7</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//10</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">2</span>)(<span class=\"number\">4</span>, <span class=\"number\">1</span>)(<span class=\"number\">2</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//9</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)(<span class=\"number\">6</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 收集参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">f</span> = (<span class=\"params\">...rest</span>) =&gt; <span class=\"title function_\">sum</span>(...rest, ...args);</span><br><span class=\"line\">  <span class=\"comment\">// 一次性处理</span></span><br><span class=\"line\">  f.<span class=\"property\">valueOf</span> = <span class=\"function\">() =&gt;</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组方法系列\"><a href=\"#数组方法系列\" class=\"headerlink\" title=\"数组方法系列\"></a>数组方法系列</h2><h3 id=\"实现一个-flatMap-函数\"><a href=\"#实现一个-flatMap-函数\" class=\"headerlink\" title=\"实现一个 flatMap 函数\"></a>实现一个 flatMap 函数</h3><blockquote>\n<p>实现一个<code>[1, 2, [3] , 4].flatMap(x =&gt; x + 1)</code> &#x3D;&gt; <code>[2, 3, 31, 5]</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">flatMap</span> = <span class=\"keyword\">function</span> (<span class=\"params\">mapper</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">map</span>(mapper).<span class=\"title function_\">flat</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个-sample-函数，从数组随机取一个元素\"><a href=\"#实现一个-sample-函数，从数组随机取一个元素\" class=\"headerlink\" title=\"实现一个 sample 函数，从数组随机取一个元素\"></a>实现一个 sample 函数，从数组随机取一个元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sample</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;not a array&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写一个-async-x2F-await-函数\"><a href=\"#手写一个-async-x2F-await-函数\" class=\"headerlink\" title=\"手写一个 async&#x2F;await 函数\"></a>手写一个 async&#x2F;await 函数</h3><p>本人写了一篇 CSDN 文章：<a href=\"https://blog.csdn.net/weixin_50789156/article/details/124199482\">https://blog.csdn.net/weixin_50789156&#x2F;article&#x2F;details&#x2F;124199482</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myAsync</span>(<span class=\"params\">genFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> gen = genFn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">go</span>(<span class=\"params\">key, arg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          res = gen[key](arg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; value, done &#125; = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (done) <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(value).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">go</span>(key, data));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化执行一次</span></span><br><span class=\"line\">      <span class=\"title function_\">go</span>(<span class=\"string\">&quot;next&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个-lru-cache\"><a href=\"#实现一个-lru-cache\" class=\"headerlink\" title=\"实现一个 lru cache\"></a>实现一个 lru cache</h3><p>大概实现一个这样的算法题，get 操作会产生最新的值，put 也会产生最新的值，且原数据有限制，会删除最就未访问的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&quot;LRUCache&quot;,&quot;put&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lruCache = <span class=\"keyword\">new</span> <span class=\"title class_\">LRUCache</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res3 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res4 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res5 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1, res2, res3, res4, res5);</span><br><span class=\"line\"><span class=\"comment\">// 1 undefined undefined 3 4</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">limit</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">limit</span> = limit;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">has</span>(key)) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">put</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">has</span>(key)) <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">size</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">limit</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> del = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">keys</span>().<span class=\"title function_\">next</span>().<span class=\"property\">value</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(del);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loash-系列\"><a href=\"#loash-系列\" class=\"headerlink\" title=\"loash 系列\"></a>loash 系列</h2><h3 id=\"实现-loash-get-方法\"><a href=\"#实现-loash-get-方法\" class=\"headerlink\" title=\"实现 loash.get 方法\"></a>实现 loash.get 方法</h3><blockquote>\n<p>定义一个对象，实现大概这样的效果</p>\n</blockquote>\n<blockquote>\n<p>const object &#x3D; { a: [{ b: { c: 3 } }] };</p>\n</blockquote>\n<blockquote>\n<p>get(object, “a[0].b.c”); &#x2F;&#x2F;&#x3D;&gt; 3</p>\n</blockquote>\n<blockquote>\n<p>get(object, ‘a[0][“b”][“c”]’); &#x2F;&#x2F;&#x3D;&gt; 3</p>\n</blockquote>\n<blockquote>\n<p>get(object, “a[100].b.c”, 10086);&#x2F;&#x2F;&#x3D;&gt; 10086</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">source, path, defaultValue = <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paths = path</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[(\\w+)\\]/g</span>, <span class=\"string\">&quot;.$1&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[&#x27;(\\w+)&#x27;\\]/g</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[&quot;(\\w+)&quot;\\]/g</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> p <span class=\"keyword\">of</span> path) &#123;</span><br><span class=\"line\">    result = result?.<span class=\"property\">p</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result === <span class=\"literal\">undefined</span> ? defaultValue : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现-loash-once\"><a href=\"#实现-loash-once\" class=\"headerlink\" title=\"实现 loash.once\"></a>实现 loash.once</h3><blockquote>\n<p>大概效果是这样的</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">f</span> = (<span class=\"params\">x</span>) =&gt; x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onceF = <span class=\"title function_\">once</span>(f);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; 3</span></span><br><span class=\"line\"><span class=\"title function_\">onceF</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; 3</span></span><br><span class=\"line\"><span class=\"title function_\">onceF</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onceCache</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> toggle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toggle) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    toggle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res = fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-系列\"><a href=\"#Promise-系列\" class=\"headerlink\" title=\"Promise 系列\"></a>Promise 系列</h2><h3 id=\"手写-Promise-及-then-方法\"><a href=\"#手写-Promise-及-then-方法\" class=\"headerlink\" title=\"手写 Promise 及 then 方法\"></a>手写 Promise 及 then 方法</h3><blockquote>\n<p>原文可可以看 <a href=\"https://juejin.cn/post/7040016523108286494\">https://juejin.cn/post/7040016523108286494</a> 这篇文章，个人感觉书写的格式梳理的很好</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myPromise</span> &#123;</span><br><span class=\"line\">  status = <span class=\"string\">&quot;pendding&quot;</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  onResolvedCallbacks = [];</span><br><span class=\"line\">  onRejectedCallbacks = [];</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">exec</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">reslove</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">doFn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"string\">&quot;pendding&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resloved&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">shift</span>()();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(doFn, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">doFn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"string\">&quot;pedding&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">shift</span>()();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(doFn, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">exec</span>(reslove, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onReslove, onReject</span>) &#123;</span><br><span class=\"line\">    onReslove = <span class=\"keyword\">typeof</span> onReslove === <span class=\"string\">&quot;function&quot;</span> ? onReslove : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res;</span><br><span class=\"line\">    onReject =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">        ? onReject</span><br><span class=\"line\">        : <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPromise = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 统一处理函数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">execFun</span> = (<span class=\"params\">fn, val</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = <span class=\"title function_\">fn</span>(val);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (newPromise === res) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;回调地狱！！&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">            myPromise.<span class=\"title function_\">then</span>(reslove, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reslove</span>(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">success</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">execFun</span>(onReslove, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">failed</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">execFun</span>(onReject, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(success);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(failed);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;reslove&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">success</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">failed</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newPromise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-promise-map-方法，控制并发数量限制\"><a href=\"#手写-promise-map-方法，控制并发数量限制\" class=\"headerlink\" title=\"手写 promise.map 方法，控制并发数量限制\"></a>手写 promise.map 方法，控制并发数量限制</h3><blockquote>\n<p>第一个 for 循环 limit 同步，每次执行 limit 个，当执行完当前的 promise，会进入下一个 next</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promiseMap</span>(<span class=\"params\">list, fn, limit = <span class=\"literal\">Infinity</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      ++index;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(list[index])</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"title function_\">fn</span>(val, index))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          ret.<span class=\"title function_\">push</span>(res);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ret.<span class=\"property\">length</span> === arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reslove</span>(ret);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">next</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; limit &amp;&amp; i &lt; list.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><blockquote>\n<p>作用： 并发请求，一次性处理多个 promise<br>只要有一个失败状态就返回</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span> (<span class=\"params\">promiseArr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>, <span class=\"comment\">// 计数器</span></span><br><span class=\"line\">    len = promiseArr.<span class=\"property\">legth</span>,</span><br><span class=\"line\">    data = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(p).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 保证值得顺序</span></span><br><span class=\"line\">          data[i] = val;</span><br><span class=\"line\">          <span class=\"comment\">// 执行完promise已经达到长度</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (++index === len) <span class=\"title function_\">reslove</span>(data);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><blockquote>\n<p>返回最快的 promise 的结果</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span> (<span class=\"params\">promiseArr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(p).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reslove</span>(val);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"手写汇总\"><a href=\"#手写汇总\" class=\"headerlink\" title=\"手写汇总\"></a>手写汇总</h1><h3 id=\"防抖-debounce\"><a href=\"#防抖-debounce\" class=\"headerlink\" title=\"防抖(debounce)\"></a>防抖(debounce)</h3><blockquote>\n<p>触发高配事件 n 秒内只触发一次，如果 n 秒内再次被触发，则重新计算时间</p>\n</blockquote>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流-throttle\"><a href=\"#节流-throttle\" class=\"headerlink\" title=\"节流(throttle)\"></a>节流(throttle)</h3><blockquote>\n<p>高频事件触发，但在 n 秒只触发一次</p>\n</blockquote>\n<h4 id=\"使用时间戳实现\"><a href=\"#使用时间戳实现\" class=\"headerlink\" title=\"使用时间戳实现\"></a>使用时间戳实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now - time &gt; wait) &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用定时器\"><a href=\"#使用定时器\" class=\"headerlink\" title=\"使用定时器\"></a>使用定时器</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thorttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(_this, args);</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-bind\"><a href=\"#手写-bind\" class=\"headerlink\" title=\"手写 bind\"></a>手写 bind</h3><blockquote>\n<p>强行绑定 this 指向，但不执行</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\">...newArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 考虑bind后为构造函数的情况</span></span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> fn ? <span class=\"variable language_\">this</span> : context, args.<span class=\"title function_\">concat</span>(newArgs));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h3><ol>\n<li><code>JSON.parse(JSON.stringify)</code>api（node 和浏览器均可以用）</li>\n</ol>\n<ul>\n<li>缺点：<ol>\n<li>对象里面如果是日期和正则的话会转成字符串</li>\n<li><code>JSON.stringify</code> 传入递归结构会报错，以及会忽略 undefined 属性，<code>JSON.parse</code> 的时候会报错</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>structuredClone</code> api（只能在浏览器环境使用）</li>\n</ol>\n<ul>\n<li>解决了 JSON.stringiify 所有缺点</li>\n</ul>\n<ol start=\"3\">\n<li>自己手写（完整版）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可能为null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 为日期对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 为正则对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        result[key] = <span class=\"title function_\">deepClone</span>(obj[key]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result[key] = obj[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"URL-系列\"><a href=\"#URL-系列\" class=\"headerlink\" title=\"URL 系列\"></a>URL 系列</h2><h3 id=\"实现-URL-取参数\"><a href=\"#实现-URL-取参数\" class=\"headerlink\" title=\"实现 URL 取参数\"></a>实现 URL 取参数</h3><p>实现如下这个功能，且 url 里面还有汉字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;name: 康康,age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&amp;hobby=%E6%95%B2%E4%BB%A3%E7%A0%81&amp;hobby=%E7%9C%8B%E4%B9%A6&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;name: 康康, age:20, hobby: [&#x27;敲代码&#x27;, &#x27;看书&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">urlParams</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dict = &#123;&#125;;</span><br><span class=\"line\">  url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/([^?&amp;]*)=([^&amp;]*)/g</span>, <span class=\"function\">(<span class=\"params\">_, key, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    key = <span class=\"built_in\">decodeURIComponent</span>(key);</span><br><span class=\"line\">    val = <span class=\"built_in\">decodeURIComponent</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dict[key]) <span class=\"keyword\">return</span> (dict[key] = [dict[key], val].<span class=\"title function_\">flat</span>());</span><br><span class=\"line\">    dict[key] = val;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dict;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个函数用来对-URL-的-querystring-进行编码\"><a href=\"#实现一个函数用来对-URL-的-querystring-进行编码\" class=\"headerlink\" title=\"实现一个函数用来对 URL 的 querystring 进行编码\"></a>实现一个函数用来对 URL 的 querystring 进行编码</h3><h2 id=\"科里化系列\"><a href=\"#科里化系列\" class=\"headerlink\" title=\"科里化系列\"></a>科里化系列</h2><h3 id=\"实现一个无限累加-sum-函数\"><a href=\"#实现一个无限累加-sum-函数\" class=\"headerlink\" title=\"实现一个无限累加 sum 函数\"></a>实现一个无限累加 sum 函数</h3><blockquote>\n<p>实现效果大该是这个样子的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">2</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//7</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//10</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">2</span>)(<span class=\"number\">4</span>, <span class=\"number\">1</span>)(<span class=\"number\">2</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">//9</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)(<span class=\"number\">6</span>).<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 收集参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">f</span> = (<span class=\"params\">...rest</span>) =&gt; <span class=\"title function_\">sum</span>(...rest, ...args);</span><br><span class=\"line\">  <span class=\"comment\">// 一次性处理</span></span><br><span class=\"line\">  f.<span class=\"property\">valueOf</span> = <span class=\"function\">() =&gt;</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组方法系列\"><a href=\"#数组方法系列\" class=\"headerlink\" title=\"数组方法系列\"></a>数组方法系列</h2><h3 id=\"实现一个-flatMap-函数\"><a href=\"#实现一个-flatMap-函数\" class=\"headerlink\" title=\"实现一个 flatMap 函数\"></a>实现一个 flatMap 函数</h3><blockquote>\n<p>实现一个<code>[1, 2, [3] , 4].flatMap(x =&gt; x + 1)</code> &#x3D;&gt; <code>[2, 3, 31, 5]</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">flatMap</span> = <span class=\"keyword\">function</span> (<span class=\"params\">mapper</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">map</span>(mapper).<span class=\"title function_\">flat</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个-sample-函数，从数组随机取一个元素\"><a href=\"#实现一个-sample-函数，从数组随机取一个元素\" class=\"headerlink\" title=\"实现一个 sample 函数，从数组随机取一个元素\"></a>实现一个 sample 函数，从数组随机取一个元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sample</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;not a array&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写一个-async-x2F-await-函数\"><a href=\"#手写一个-async-x2F-await-函数\" class=\"headerlink\" title=\"手写一个 async&#x2F;await 函数\"></a>手写一个 async&#x2F;await 函数</h3><p>本人写了一篇 CSDN 文章：<a href=\"https://blog.csdn.net/weixin_50789156/article/details/124199482\">https://blog.csdn.net/weixin_50789156&#x2F;article&#x2F;details&#x2F;124199482</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myAsync</span>(<span class=\"params\">genFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> gen = genFn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">go</span>(<span class=\"params\">key, arg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          res = gen[key](arg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; value, done &#125; = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (done) <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(value).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">go</span>(key, data));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化执行一次</span></span><br><span class=\"line\">      <span class=\"title function_\">go</span>(<span class=\"string\">&quot;next&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现一个-lru-cache\"><a href=\"#实现一个-lru-cache\" class=\"headerlink\" title=\"实现一个 lru cache\"></a>实现一个 lru cache</h3><p>大概实现一个这样的算法题，get 操作会产生最新的值，put 也会产生最新的值，且原数据有限制，会删除最就未访问的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&quot;LRUCache&quot;,&quot;put&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lruCache = <span class=\"keyword\">new</span> <span class=\"title class_\">LRUCache</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">lruCache.<span class=\"title function_\">put</span>(<span class=\"number\">4</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res3 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res4 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> res5 = lruCache.<span class=\"title function_\">get</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1, res2, res3, res4, res5);</span><br><span class=\"line\"><span class=\"comment\">// 1 undefined undefined 3 4</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">limit</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">limit</span> = limit;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">has</span>(key)) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">put</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">has</span>(key)) <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">size</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">limit</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> del = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">keys</span>().<span class=\"title function_\">next</span>().<span class=\"property\">value</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(del);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loash-系列\"><a href=\"#loash-系列\" class=\"headerlink\" title=\"loash 系列\"></a>loash 系列</h2><h3 id=\"实现-loash-get-方法\"><a href=\"#实现-loash-get-方法\" class=\"headerlink\" title=\"实现 loash.get 方法\"></a>实现 loash.get 方法</h3><blockquote>\n<p>定义一个对象，实现大概这样的效果</p>\n</blockquote>\n<blockquote>\n<p>const object &#x3D; { a: [{ b: { c: 3 } }] };</p>\n</blockquote>\n<blockquote>\n<p>get(object, “a[0].b.c”); &#x2F;&#x2F;&#x3D;&gt; 3</p>\n</blockquote>\n<blockquote>\n<p>get(object, ‘a[0][“b”][“c”]’); &#x2F;&#x2F;&#x3D;&gt; 3</p>\n</blockquote>\n<blockquote>\n<p>get(object, “a[100].b.c”, 10086);&#x2F;&#x2F;&#x3D;&gt; 10086</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">source, path, defaultValue = <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paths = path</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[(\\w+)\\]/g</span>, <span class=\"string\">&quot;.$1&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[&#x27;(\\w+)&#x27;\\]/g</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">repalce</span>(<span class=\"regexp\">/\\[&quot;(\\w+)&quot;\\]/g</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> p <span class=\"keyword\">of</span> path) &#123;</span><br><span class=\"line\">    result = result?.<span class=\"property\">p</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result === <span class=\"literal\">undefined</span> ? defaultValue : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现-loash-once\"><a href=\"#实现-loash-once\" class=\"headerlink\" title=\"实现 loash.once\"></a>实现 loash.once</h3><blockquote>\n<p>大概效果是这样的</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">f</span> = (<span class=\"params\">x</span>) =&gt; x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onceF = <span class=\"title function_\">once</span>(f);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; 3</span></span><br><span class=\"line\"><span class=\"title function_\">onceF</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; 3</span></span><br><span class=\"line\"><span class=\"title function_\">onceF</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onceCache</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> toggle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toggle) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    toggle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res = fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-系列\"><a href=\"#Promise-系列\" class=\"headerlink\" title=\"Promise 系列\"></a>Promise 系列</h2><h3 id=\"手写-Promise-及-then-方法\"><a href=\"#手写-Promise-及-then-方法\" class=\"headerlink\" title=\"手写 Promise 及 then 方法\"></a>手写 Promise 及 then 方法</h3><blockquote>\n<p>原文可可以看 <a href=\"https://juejin.cn/post/7040016523108286494\">https://juejin.cn/post/7040016523108286494</a> 这篇文章，个人感觉书写的格式梳理的很好</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myPromise</span> &#123;</span><br><span class=\"line\">  status = <span class=\"string\">&quot;pendding&quot;</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  onResolvedCallbacks = [];</span><br><span class=\"line\">  onRejectedCallbacks = [];</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">exec</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">reslove</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">doFn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"string\">&quot;pendding&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resloved&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">shift</span>()();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(doFn, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">doFn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"string\">&quot;pedding&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">shift</span>()();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(doFn, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">exec</span>(reslove, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onReslove, onReject</span>) &#123;</span><br><span class=\"line\">    onReslove = <span class=\"keyword\">typeof</span> onReslove === <span class=\"string\">&quot;function&quot;</span> ? onReslove : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res;</span><br><span class=\"line\">    onReject =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">        ? onReject</span><br><span class=\"line\">        : <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPromise = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 统一处理函数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">execFun</span> = (<span class=\"params\">fn, val</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = <span class=\"title function_\">fn</span>(val);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (newPromise === res) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;回调地狱！！&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">            myPromise.<span class=\"title function_\">then</span>(reslove, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reslove</span>(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">success</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">execFun</span>(onReslove, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">failed</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">execFun</span>(onReject, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(success);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(failed);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;reslove&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">success</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">failed</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newPromise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写-promise-map-方法，控制并发数量限制\"><a href=\"#手写-promise-map-方法，控制并发数量限制\" class=\"headerlink\" title=\"手写 promise.map 方法，控制并发数量限制\"></a>手写 promise.map 方法，控制并发数量限制</h3><blockquote>\n<p>第一个 for 循环 limit 同步，每次执行 limit 个，当执行完当前的 promise，会进入下一个 next</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promiseMap</span>(<span class=\"params\">list, fn, limit = <span class=\"literal\">Infinity</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      ++index;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(list[index])</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"title function_\">fn</span>(val, index))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          ret.<span class=\"title function_\">push</span>(res);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ret.<span class=\"property\">length</span> === arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reslove</span>(ret);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">next</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; limit &amp;&amp; i &lt; list.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><blockquote>\n<p>作用： 并发请求，一次性处理多个 promise<br>只要有一个失败状态就返回</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span> (<span class=\"params\">promiseArr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>, <span class=\"comment\">// 计数器</span></span><br><span class=\"line\">    len = promiseArr.<span class=\"property\">legth</span>,</span><br><span class=\"line\">    data = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(p).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 保证值得顺序</span></span><br><span class=\"line\">          data[i] = val;</span><br><span class=\"line\">          <span class=\"comment\">// 执行完promise已经达到长度</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (++index === len) <span class=\"title function_\">reslove</span>(data);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><blockquote>\n<p>返回最快的 promise 的结果</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span> (<span class=\"params\">promiseArr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(p).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reslove</span>(val);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"git rebase合并多次提交记录","description":"实习git rebase的使用场景","date":"2022-10-27T16:00:00.000Z","cover":"https://is.gd/Up9WrG","_content":"\n# git rebase 合并多次提交记录\n\n**第一步**：根据自己的开发分支创建一个`dev_one`分支\n\n**第二步**：`git reabse -i HEAD~n`分支（目标分支）n 为前几次要合并的次数\n\n**第三步**：可以看到编辑框，自己输出 s 命令，把后面要合并的都编辑为 s，第一次可以为 pick，编辑后，`ctrl + c`，再`:wq`保存\n\n**第四步**：保存之后，我们再编辑下，第一次可以改变提交记录的名字，`:wq`保存退出\n\n**第五步**：根据 master 分支创建一个分支`dev_two`\n\n**第六步**：`dev_two`合并`dev_one`（git merge）\n\n**第七步**：解决合并冲突\n\n**第八步**：`dev_two`推送到远程分支，之后就可以发送合并到远程 master 的请求了\n","source":"_posts/实习学习/git rebase合并多次提交记录.md","raw":"---\ntitle: git rebase合并多次提交记录\ntags: [实习学习]\ncategories: [git]\ndescription: 实习git rebase的使用场景\ndate: 2022-10-28\ncover: https://is.gd/Up9WrG\n---\n\n# git rebase 合并多次提交记录\n\n**第一步**：根据自己的开发分支创建一个`dev_one`分支\n\n**第二步**：`git reabse -i HEAD~n`分支（目标分支）n 为前几次要合并的次数\n\n**第三步**：可以看到编辑框，自己输出 s 命令，把后面要合并的都编辑为 s，第一次可以为 pick，编辑后，`ctrl + c`，再`:wq`保存\n\n**第四步**：保存之后，我们再编辑下，第一次可以改变提交记录的名字，`:wq`保存退出\n\n**第五步**：根据 master 分支创建一个分支`dev_two`\n\n**第六步**：`dev_two`合并`dev_one`（git merge）\n\n**第七步**：解决合并冲突\n\n**第八步**：`dev_two`推送到远程分支，之后就可以发送合并到远程 master 的请求了\n","slug":"实习学习/git rebase合并多次提交记录","published":1,"updated":"2023-07-30T18:25:04.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdmb001l36l11ijiebm8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"git-rebase-合并多次提交记录\"><a href=\"#git-rebase-合并多次提交记录\" class=\"headerlink\" title=\"git rebase 合并多次提交记录\"></a>git rebase 合并多次提交记录</h1><p><strong>第一步</strong>：根据自己的开发分支创建一个<code>dev_one</code>分支</p>\n<p><strong>第二步</strong>：<code>git reabse -i HEAD~n</code>分支（目标分支）n 为前几次要合并的次数</p>\n<p><strong>第三步</strong>：可以看到编辑框，自己输出 s 命令，把后面要合并的都编辑为 s，第一次可以为 pick，编辑后，<code>ctrl + c</code>，再<code>:wq</code>保存</p>\n<p><strong>第四步</strong>：保存之后，我们再编辑下，第一次可以改变提交记录的名字，<code>:wq</code>保存退出</p>\n<p><strong>第五步</strong>：根据 master 分支创建一个分支<code>dev_two</code></p>\n<p><strong>第六步</strong>：<code>dev_two</code>合并<code>dev_one</code>（git merge）</p>\n<p><strong>第七步</strong>：解决合并冲突</p>\n<p><strong>第八步</strong>：<code>dev_two</code>推送到远程分支，之后就可以发送合并到远程 master 的请求了</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"git-rebase-合并多次提交记录\"><a href=\"#git-rebase-合并多次提交记录\" class=\"headerlink\" title=\"git rebase 合并多次提交记录\"></a>git rebase 合并多次提交记录</h1><p><strong>第一步</strong>：根据自己的开发分支创建一个<code>dev_one</code>分支</p>\n<p><strong>第二步</strong>：<code>git reabse -i HEAD~n</code>分支（目标分支）n 为前几次要合并的次数</p>\n<p><strong>第三步</strong>：可以看到编辑框，自己输出 s 命令，把后面要合并的都编辑为 s，第一次可以为 pick，编辑后，<code>ctrl + c</code>，再<code>:wq</code>保存</p>\n<p><strong>第四步</strong>：保存之后，我们再编辑下，第一次可以改变提交记录的名字，<code>:wq</code>保存退出</p>\n<p><strong>第五步</strong>：根据 master 分支创建一个分支<code>dev_two</code></p>\n<p><strong>第六步</strong>：<code>dev_two</code>合并<code>dev_one</code>（git merge）</p>\n<p><strong>第七步</strong>：解决合并冲突</p>\n<p><strong>第八步</strong>：<code>dev_two</code>推送到远程分支，之后就可以发送合并到远程 master 的请求了</p>\n"},{"title":"个人错题集","description":"前端个人错题集","date":"2022-10-17T16:00:00.000Z","cover":"https://is.gd/BKfqTS","_content":"\n# 个人错题集\n\n## react\n\n1. <Route />中的 path 属性可以使用通配符，以下关于通配符的规则描述错误的是？\n\n```text\nA. “:paramName”： 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出\n```\n\n```text\nB. “()”： ()表示URL的这个部分是可选的。\n```\n\n```text\nC. “*”： *匹配任意字符，直到模式里面的下一个字符为止。匹配方式是贪婪模式。\n```\n\n```text\nD. “**”：** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~text\n答案为D，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n~~~\n    \n</details>\n\n2. 关于“错误边界”，以下说法错误的是？\n\n```\nA. static getDerivedStateFromError() 可以用来渲染备用UI\n```\n\n```\nB. componentDidCatch()可以打印错误信息\n```\n\n```\nC. 错误边界是一种React组件，这种组件可以捕获并打印发生在当前组件的javaScript错误\n```\n\n```\nD. class组件中只要定义了static getDerivedStateFromError()或componentDidCatch()其中一个，该组件就会变成错误边界\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~\n答案为C\n解析：错误边界无法捕获 以下四种场景中产生的错误： \n    1.`事件处理函数`（因为 Error Boundaries 实现的本质是触发更新，但是事件处理函数不在render或者commit阶段，所以无法进行捕获，\n如果你需要在事件处理器内部捕获错误，可以使用原生的 try / catch 语句 ） \n    2. 异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数） \n    3. 服务端渲染（因为触发更新只能在客户端进行，不能在serve端进行） \n    4. 它自身抛出来的错误（因为错误抛出要向父节点冒泡寻找 Error Boundaries 处理，无法处理自身产生的错误）\n~~~\n    \n</details>\n\n3. 以下不属于 React 支持的触摸事件的是？\n\n```\nA. onTouchCancel\n```\n\n```\nB. onTouchEnd\n```\n\n```\nC. onTouchStart\n```\n\n```\nD. onTouchOver\n```\n\n<details> \n<summary>查看答案</summary>\n\n答案为 D\nReact 支持的触摸事件有：onTouchStart，onTouchMove，onTouchEnd，onTouchCancel\n\n| 事件          | 触发时机                                               |\n| ------------- | ------------------------------------------------------ |\n| onTouchStart  | 手指触摸屏幕的时候触发                                 |\n| onTouchMove   | 手指在屏幕上滑动的时候触发                             |\n| onTouchEnd    | 手指从屏幕上移开的时候触发                             |\n| onTouchCancel | 触摸事件被中断时发生，如：来电话、来短信、弹出消息提示 |\n\n</details>\n\n4. 以下哪项对 react-router-dom 中组件分类是错误的?\n\n```\nA. 路由器组件: BrowserRouter和HashRouter\n```\n\n```\nB. 导航组件: Link和NavLink\n```\n\n```\nC. 路由匹配组件: Route和Switch\n```\n\n```\nD. 导航组件: Route和Switch\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：在react-router-dom中通常使用的组件有三种路由器组件: 如BrowserRouter和HashRouter\n\n路由匹配组件: Route和Switch 组件\n\n导航组件: Link和NavLink 组件\n```\n\n</details>\n\n5. 以下不属于 react 支持的剪贴板事件的是?\n\n```\nA. onCopy\n```\n\n```\nB. onPaste\n```\n\n```\nC. onCut\n```\n\n```\nD. onBeforeCopy\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：react支持的剪贴板事件有onCopy，onCut，onPaste\n```\n\n</details>\n\n6. 以下不属于 StrictMode 的作用或优点的是？\n\n```\nA. 检测过时的 context API\n```\n\n```\nB. 识别不安全的生命周期\n```\n\n```\nC. 检测意外的副作用\n```\n\n```\nD. 在生产环境也生效\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：严格模式检查仅在开发模式下运行，它们不会影响生产构建。\n```\n\n</details>\n\n7. 以下关于 Mobx 中原则说法错误的是?\n\n```\nA. Mobx 支持单向数据流\n```\n\n```\nB. 当状态改变时，所有衍生都会进行自动更新，可以观察到中间值\n```\n\n```\nC. 所有衍生默认都是同步更新\n```\n\n```\nD. 所有的计算值都应该是纯净的\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。\n```\n\n</details>\n\n8. 关于 Context 一下说法错误的是？\n\n```\nA. Context提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props\n```\n\n```\nB. Context设计目的是为了共享那些对于一个组件树而言是“全局”的数据\n```\n\n```\nC. Context会提高组件的复用性\n```\n\n```\nD. Context能让你将这些数据向组件树下所有的组件进行“广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：当一些值需要在多个组件间共享的时候，context是个可以避免数据层层传递的方法，但他会使得组件得复用性变差。\n```\n\n</details>\n\n9. 以下关于 useContext 说法错误的是?\n\n```\nA. 调用了useContext的组件总会在context值变化时重新渲染\n```\n\n```\nB. 当组件上层最近的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染\n```\n\n```\nC. useContext 的参数必须是 context 对象本身：\n```\n\n```\nD. 当组件最上层的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：useContext 的参数必须是 *context 对象本身*：\n当组件上层最近的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值。\n```\n\n</details>\n\n10. 可以使子节点渲染到存在于父组件以外的 DOM 节点上的方法是?\n\n```\nA. React.createPortal\n```\n\n```\nB. React.createElement\n```\n\n```\nC. ReactDOM.createPortal\n```\n\n```\nD. ReactDom.render\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：ReactDOM.createPortal函数可以将子节点渲染到存在于父组件以外的DOM节点上。\n```\n\n</details>\n    \n11. 关于React中的“状态提升”说法错误的是?\n\n```\nA. React建议任何可变数据应当只有一个相对应的唯一“数据源”\n```\n\n```\nB. 提升状态(state)方式相比于双向绑定方式需要编写更多的“样板”代码\n```\n\n```\nC. 虽然某些数据可以由props或state推导得出，但是我们最好还是单独在state声明它\n```\n\n```\nD. 通常，多个组件需要反映相同的变化数据，都应尽量将共享状态提升到最近的公共父组件中去\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：其中ABD都为官方说法，C选项中如果某些数据可以由props或state推导得出，那么就不应该将其在state中声明。\n```\n\n</details>\n\n12. 以下不是 Redux 的使用原则的是？\n\n```\nA. 单一数据源\n```\n\n```\nB. 双向数据流\n```\n\n```\nC. State是只读的\n```\n\n```\nD. 使用纯函数来执行修改\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~text\n答案为B\n解析：Redux可以用这三个基本原则来描述：1.单一数据源 2.State是只读的 3.使用纯函数来执行修改\n~~~\n    \n</details>\n\n13. 从  DOM  中卸载组件，可以使用？\n\n```\nA. ReactDOM.unmountComponentAtNode\n```\n\n```\nB. ReactDOM.unmountComponent\n```\n\n```\nC. ReactDOM.unmountRender\n```\n\n```\nD. ReactDOM.clearDOMNode\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~\n答案为A\n解析：ReactDOM.unmountComponentAtNode，从DOM中卸载组件，会将其事件处理器\n    （event handlers）和 state 一并清除。如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。\n    如果组件被移除将会返回 true，如果没有组件可被移除将会返回 false。\n~~~\n    \n</details>\n\n14. 以下不属于 React 复合事件的是？\n\n```\nA. onCompositionEnd\n```\n\n```\nB. onCompositionRender\n```\n\n```\nC. onCompositionUpdate\n```\n\n```\nD. onCompositionStart\n```\n\n<details> \n<summary>查看答案</summary>\n\n答案为 C\n解析：React 复合事件有 onCompositionEnd，onCompositionStart，onCompositionUpdate\n\n</details>\n\n15. 在 componentDidUpdate()中以下哪个说法是正确的?\n\n```\nA. 在componentDidUpdate()中可以任意调用setState()\n```\n\n```\nB. 当组件更新时，componentDidUpdate()总会被调用\n```\n\n```\nC. 首次渲染时，componentDidUpdate()会在componentDidMount()前面调用\n```\n\n```\nD. 当组件更新时，componentDidUpdate()可能不会被调用\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：A选项中，可以在 componentDidUpdate()中直接调用 setState()，但请注意它必须被包裹在一个条件语句里\n\nBD选项中，如果shouldComponentUpdate()返回值为false，则不会调用componentDidUpdate()\n\nC选项中，首次渲染不会执行componentDidUpdate()\n```\n\n</details>\n\n16. 关于 Redux，以下说法错误的是?\n\n```\nA. 唯一改变state的方法就是触发action\n```\n\n```\nB. action是一个用于描述即将发生事件的普通对象\n```\n\n```\nC. 为了描述action如何改变state tree，你需要编写纯的reducers\n```\n\n```\nD. 整个应用的全局state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：在Redux中，action是一个用于描述已发生事件的普通对象.\n```\n\n</details>\n\n17. class 组件生命周期方法对应到函数组件和 Hook，以下说法错误的是？\n\n```\nA. render => 这是函数组件体本身\n```\n\n```\nB. getSnapshotBeforeUpdate 目前没有对应的Hook\n```\n\n```\nC. constructor => 函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。\n```\n\n```\nD. componentWillUnmount 目前没有对应的Hook\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：useEffect里面返回的函数\n```\n\n</details>\n\n18. 以下关于 ReactDOM.render 说法错误的是?\n\n```\nA. ReactDOM.render() 会控制你传入容器节点里的内容\n```\n\n```\nB. ReactDOM.render() 会修改容器节点以及其子节点\n```\n\n```\nC. ReactDOM.render() 目前会返回对根组件 ReactComponent 实例的引用\n```\n\n```\nD. 使用 ReactDOM.render() 对服务端渲染容器进行 hydrate 操作的方式已经被废弃，并且会在 React 17 被移除\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：ReactDOM.render() 不会修改容器节点（只会修改容器的子节点）。可以在不覆盖现有子节点的情况下，将组件插入已有的 DOM 节点中。\n```\n\n</details>\n\n19. 关于 Hook 中的 useDebugValue 的作用是？\n\n```\nA. 获取当前是否在debug模式\n```\n\n```\nB. 开启当前函数组件debug模式\n```\n\n```\nC. 可以在React开发者工具中显示自定义hook的标签\n```\n\n```\nD. 可以在React开发者工具中给函数组件添加额外的描述\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：useDebugValue可用于在React开发者工具中显示自定义Hook的标签。。\n```\n\n</details>\n\n20. 以下关于 ref 说法错误的是?\n\n```\nA. 当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素作为其current属性\n```\n\n```\nB. ref是使用React.createRef()创建的，并通过ref属性附加到React元素\n```\n\n```\nC. 当ref属性用于函数组件时，ref对象接收组件的挂载实例作为其current属性\n```\n\n```\nD. 当ref属性用于自定义class组件时，ref对象接收组件的挂载实例作为其current属性\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：不能在函数组件上使用ref属性，因为它们没有实例。在函数组件上使用ref，需要借助forwardRef。\n```\n\n</details>\n\n21. 关于 Hook 的使用，以下说法中不满足官方使用规则的是?\n\n```\nA. 不要在循环、条件判断中调用Hook\n```\n\n```\nB. 在自定义Hook或其他自定义函数中调用\n```\n\n```\nC. 在React函数最外层调用Hook\n```\n\n```\nD. 在React的函数组件中调用Hook\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：Hook使用规则：\n\n1.只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用；\n\n2.只能在React的函数组件或自定义的Hook中调用 Hook，不要在其他 JavaScript 函数中调用。\n```\n\n</details>\n    \n22. 以下哪个选项不能作为Router组件的history属性值?\n\n```\nA. createMemoryHistory\n```\n\n```\nB. History\n```\n\n```\nC. hashHistory\n```\n\n```\nD. browserHistory\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：history属性，一共可以设置三种值:browserHistory、hashHistory和createMemoryHistory。\n```\n\n</details>\n\n23. ReactDOM.createPortal(child, container)函数可以将子节点渲染到存在于父组件以外的 DOM 节点上，那么通过 Portal 进行事件冒泡时，会冒泡到?\n\n```\nA. 会上冒到子元素插入的DOM节点，一直冒泡至DOM树的根\n```\n\n```\nB. 不会上冒\n```\n\n```\nC. 会上冒到子元素插入的DOM节点，不再继续上冒\n```\n\n```\nD. 从portal内部触发的事件会一直冒泡至包含React树的祖先\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：尽管 portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 React 树， 且与 DOM 树 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的，包含事件冒泡。\n```\n\n</details>\n\n24. 验证对象是否为  React  元素可以使用（）方法?\n\n```\nA. React.isValidReactElement\n```\n\n```\nB. React.isValidElement\n```\n\n```\nC. React.isReactElement\n```\n\n```\nD. React.isElement\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：React.isValidElement 验证对象是否为React元素，返回值为true或false。\n```\n\n</details>\n\n25. StrictMode 组件的作用是?\n\n```\nA. 作用跟Fragment组件一样，可以一个组件返回多个元素\n```\n\n```\nB. 用来突出显示应用程序中潜在问题\n```\n\n```\nC. 为其后代元素开启严格模式\n```\n\n```\nD. 为其后代元素触发额外的检查和警告\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：与Fragment一样，StrictMode不会渲染任何可见的UI。但是与Fragment不同的是，它为其后代元素触发额外的检查和警告。\n```\n\n</details>\n\n## 其他\n\n1. 请选择下面代码输出 1 的次数\n\n```js\nvar vm = new Vue({\n  el: \"#example\",\n  data: {\n    message: \"Hello\",\n  },\n  computed: {\n    test: function () {\n      console.log(1);\n      return this.message;\n    },\n  },\n  created: function () {\n    this.message = \"World\";\n    for (var i = 0; i < 5; i++) {\n      console.log(this.test);\n    }\n  },\n});\n```\n\n解释：因为 vue 的 `computed` 具有`缓存`功能。`message` 只`更新了一次`，所以 `test` `只触发一次`，执行一次 console.log(1)。\n具体来说，computed 内的 test 函数会被加入到 message 这个响应式数据的依赖视图中，当修改了 message（触发了 message 的 set）之后，test 这个 computed 的 dirty 属性会被设置为 true，当视图渲染的时候，发现 dirty 为 true 了，就会执行 1 次 test 函数以获取最新的值。\n","source":"_posts/前端笔试/错题集.md","raw":"---\ntitle: 个人错题集\ntags: [前端, 错题集]\ncategories: [前端笔试]\ndescription: 前端个人错题集\ndate: 2022-10-18\ncover: https://is.gd/BKfqTS\n---\n\n# 个人错题集\n\n## react\n\n1. <Route />中的 path 属性可以使用通配符，以下关于通配符的规则描述错误的是？\n\n```text\nA. “:paramName”： 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出\n```\n\n```text\nB. “()”： ()表示URL的这个部分是可选的。\n```\n\n```text\nC. “*”： *匹配任意字符，直到模式里面的下一个字符为止。匹配方式是贪婪模式。\n```\n\n```text\nD. “**”：** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~text\n答案为D，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n~~~\n    \n</details>\n\n2. 关于“错误边界”，以下说法错误的是？\n\n```\nA. static getDerivedStateFromError() 可以用来渲染备用UI\n```\n\n```\nB. componentDidCatch()可以打印错误信息\n```\n\n```\nC. 错误边界是一种React组件，这种组件可以捕获并打印发生在当前组件的javaScript错误\n```\n\n```\nD. class组件中只要定义了static getDerivedStateFromError()或componentDidCatch()其中一个，该组件就会变成错误边界\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~\n答案为C\n解析：错误边界无法捕获 以下四种场景中产生的错误： \n    1.`事件处理函数`（因为 Error Boundaries 实现的本质是触发更新，但是事件处理函数不在render或者commit阶段，所以无法进行捕获，\n如果你需要在事件处理器内部捕获错误，可以使用原生的 try / catch 语句 ） \n    2. 异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数） \n    3. 服务端渲染（因为触发更新只能在客户端进行，不能在serve端进行） \n    4. 它自身抛出来的错误（因为错误抛出要向父节点冒泡寻找 Error Boundaries 处理，无法处理自身产生的错误）\n~~~\n    \n</details>\n\n3. 以下不属于 React 支持的触摸事件的是？\n\n```\nA. onTouchCancel\n```\n\n```\nB. onTouchEnd\n```\n\n```\nC. onTouchStart\n```\n\n```\nD. onTouchOver\n```\n\n<details> \n<summary>查看答案</summary>\n\n答案为 D\nReact 支持的触摸事件有：onTouchStart，onTouchMove，onTouchEnd，onTouchCancel\n\n| 事件          | 触发时机                                               |\n| ------------- | ------------------------------------------------------ |\n| onTouchStart  | 手指触摸屏幕的时候触发                                 |\n| onTouchMove   | 手指在屏幕上滑动的时候触发                             |\n| onTouchEnd    | 手指从屏幕上移开的时候触发                             |\n| onTouchCancel | 触摸事件被中断时发生，如：来电话、来短信、弹出消息提示 |\n\n</details>\n\n4. 以下哪项对 react-router-dom 中组件分类是错误的?\n\n```\nA. 路由器组件: BrowserRouter和HashRouter\n```\n\n```\nB. 导航组件: Link和NavLink\n```\n\n```\nC. 路由匹配组件: Route和Switch\n```\n\n```\nD. 导航组件: Route和Switch\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：在react-router-dom中通常使用的组件有三种路由器组件: 如BrowserRouter和HashRouter\n\n路由匹配组件: Route和Switch 组件\n\n导航组件: Link和NavLink 组件\n```\n\n</details>\n\n5. 以下不属于 react 支持的剪贴板事件的是?\n\n```\nA. onCopy\n```\n\n```\nB. onPaste\n```\n\n```\nC. onCut\n```\n\n```\nD. onBeforeCopy\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：react支持的剪贴板事件有onCopy，onCut，onPaste\n```\n\n</details>\n\n6. 以下不属于 StrictMode 的作用或优点的是？\n\n```\nA. 检测过时的 context API\n```\n\n```\nB. 识别不安全的生命周期\n```\n\n```\nC. 检测意外的副作用\n```\n\n```\nD. 在生产环境也生效\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：严格模式检查仅在开发模式下运行，它们不会影响生产构建。\n```\n\n</details>\n\n7. 以下关于 Mobx 中原则说法错误的是?\n\n```\nA. Mobx 支持单向数据流\n```\n\n```\nB. 当状态改变时，所有衍生都会进行自动更新，可以观察到中间值\n```\n\n```\nC. 所有衍生默认都是同步更新\n```\n\n```\nD. 所有的计算值都应该是纯净的\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。\n```\n\n</details>\n\n8. 关于 Context 一下说法错误的是？\n\n```\nA. Context提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props\n```\n\n```\nB. Context设计目的是为了共享那些对于一个组件树而言是“全局”的数据\n```\n\n```\nC. Context会提高组件的复用性\n```\n\n```\nD. Context能让你将这些数据向组件树下所有的组件进行“广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：当一些值需要在多个组件间共享的时候，context是个可以避免数据层层传递的方法，但他会使得组件得复用性变差。\n```\n\n</details>\n\n9. 以下关于 useContext 说法错误的是?\n\n```\nA. 调用了useContext的组件总会在context值变化时重新渲染\n```\n\n```\nB. 当组件上层最近的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染\n```\n\n```\nC. useContext 的参数必须是 context 对象本身：\n```\n\n```\nD. 当组件最上层的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：useContext 的参数必须是 *context 对象本身*：\n当组件上层最近的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值。\n```\n\n</details>\n\n10. 可以使子节点渲染到存在于父组件以外的 DOM 节点上的方法是?\n\n```\nA. React.createPortal\n```\n\n```\nB. React.createElement\n```\n\n```\nC. ReactDOM.createPortal\n```\n\n```\nD. ReactDom.render\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：ReactDOM.createPortal函数可以将子节点渲染到存在于父组件以外的DOM节点上。\n```\n\n</details>\n    \n11. 关于React中的“状态提升”说法错误的是?\n\n```\nA. React建议任何可变数据应当只有一个相对应的唯一“数据源”\n```\n\n```\nB. 提升状态(state)方式相比于双向绑定方式需要编写更多的“样板”代码\n```\n\n```\nC. 虽然某些数据可以由props或state推导得出，但是我们最好还是单独在state声明它\n```\n\n```\nD. 通常，多个组件需要反映相同的变化数据，都应尽量将共享状态提升到最近的公共父组件中去\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：其中ABD都为官方说法，C选项中如果某些数据可以由props或state推导得出，那么就不应该将其在state中声明。\n```\n\n</details>\n\n12. 以下不是 Redux 的使用原则的是？\n\n```\nA. 单一数据源\n```\n\n```\nB. 双向数据流\n```\n\n```\nC. State是只读的\n```\n\n```\nD. 使用纯函数来执行修改\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~text\n答案为B\n解析：Redux可以用这三个基本原则来描述：1.单一数据源 2.State是只读的 3.使用纯函数来执行修改\n~~~\n    \n</details>\n\n13. 从  DOM  中卸载组件，可以使用？\n\n```\nA. ReactDOM.unmountComponentAtNode\n```\n\n```\nB. ReactDOM.unmountComponent\n```\n\n```\nC. ReactDOM.unmountRender\n```\n\n```\nD. ReactDOM.clearDOMNode\n```\n\n<details> \n<summary>查看答案</summary> \n    \n~~~\n答案为A\n解析：ReactDOM.unmountComponentAtNode，从DOM中卸载组件，会将其事件处理器\n    （event handlers）和 state 一并清除。如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。\n    如果组件被移除将会返回 true，如果没有组件可被移除将会返回 false。\n~~~\n    \n</details>\n\n14. 以下不属于 React 复合事件的是？\n\n```\nA. onCompositionEnd\n```\n\n```\nB. onCompositionRender\n```\n\n```\nC. onCompositionUpdate\n```\n\n```\nD. onCompositionStart\n```\n\n<details> \n<summary>查看答案</summary>\n\n答案为 C\n解析：React 复合事件有 onCompositionEnd，onCompositionStart，onCompositionUpdate\n\n</details>\n\n15. 在 componentDidUpdate()中以下哪个说法是正确的?\n\n```\nA. 在componentDidUpdate()中可以任意调用setState()\n```\n\n```\nB. 当组件更新时，componentDidUpdate()总会被调用\n```\n\n```\nC. 首次渲染时，componentDidUpdate()会在componentDidMount()前面调用\n```\n\n```\nD. 当组件更新时，componentDidUpdate()可能不会被调用\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：A选项中，可以在 componentDidUpdate()中直接调用 setState()，但请注意它必须被包裹在一个条件语句里\n\nBD选项中，如果shouldComponentUpdate()返回值为false，则不会调用componentDidUpdate()\n\nC选项中，首次渲染不会执行componentDidUpdate()\n```\n\n</details>\n\n16. 关于 Redux，以下说法错误的是?\n\n```\nA. 唯一改变state的方法就是触发action\n```\n\n```\nB. action是一个用于描述即将发生事件的普通对象\n```\n\n```\nC. 为了描述action如何改变state tree，你需要编写纯的reducers\n```\n\n```\nD. 整个应用的全局state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：在Redux中，action是一个用于描述已发生事件的普通对象.\n```\n\n</details>\n\n17. class 组件生命周期方法对应到函数组件和 Hook，以下说法错误的是？\n\n```\nA. render => 这是函数组件体本身\n```\n\n```\nB. getSnapshotBeforeUpdate 目前没有对应的Hook\n```\n\n```\nC. constructor => 函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。\n```\n\n```\nD. componentWillUnmount 目前没有对应的Hook\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为D\n解析：useEffect里面返回的函数\n```\n\n</details>\n\n18. 以下关于 ReactDOM.render 说法错误的是?\n\n```\nA. ReactDOM.render() 会控制你传入容器节点里的内容\n```\n\n```\nB. ReactDOM.render() 会修改容器节点以及其子节点\n```\n\n```\nC. ReactDOM.render() 目前会返回对根组件 ReactComponent 实例的引用\n```\n\n```\nD. 使用 ReactDOM.render() 对服务端渲染容器进行 hydrate 操作的方式已经被废弃，并且会在 React 17 被移除\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为B\n解析：ReactDOM.render() 不会修改容器节点（只会修改容器的子节点）。可以在不覆盖现有子节点的情况下，将组件插入已有的 DOM 节点中。\n```\n\n</details>\n\n19. 关于 Hook 中的 useDebugValue 的作用是？\n\n```\nA. 获取当前是否在debug模式\n```\n\n```\nB. 开启当前函数组件debug模式\n```\n\n```\nC. 可以在React开发者工具中显示自定义hook的标签\n```\n\n```\nD. 可以在React开发者工具中给函数组件添加额外的描述\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：useDebugValue可用于在React开发者工具中显示自定义Hook的标签。。\n```\n\n</details>\n\n20. 以下关于 ref 说法错误的是?\n\n```\nA. 当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素作为其current属性\n```\n\n```\nB. ref是使用React.createRef()创建的，并通过ref属性附加到React元素\n```\n\n```\nC. 当ref属性用于函数组件时，ref对象接收组件的挂载实例作为其current属性\n```\n\n```\nD. 当ref属性用于自定义class组件时，ref对象接收组件的挂载实例作为其current属性\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：不能在函数组件上使用ref属性，因为它们没有实例。在函数组件上使用ref，需要借助forwardRef。\n```\n\n</details>\n\n21. 关于 Hook 的使用，以下说法中不满足官方使用规则的是?\n\n```\nA. 不要在循环、条件判断中调用Hook\n```\n\n```\nB. 在自定义Hook或其他自定义函数中调用\n```\n\n```\nC. 在React函数最外层调用Hook\n```\n\n```\nD. 在React的函数组件中调用Hook\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：Hook使用规则：\n\n1.只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用；\n\n2.只能在React的函数组件或自定义的Hook中调用 Hook，不要在其他 JavaScript 函数中调用。\n```\n\n</details>\n    \n22. 以下哪个选项不能作为Router组件的history属性值?\n\n```\nA. createMemoryHistory\n```\n\n```\nB. History\n```\n\n```\nC. hashHistory\n```\n\n```\nD. browserHistory\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：history属性，一共可以设置三种值:browserHistory、hashHistory和createMemoryHistory。\n```\n\n</details>\n\n23. ReactDOM.createPortal(child, container)函数可以将子节点渲染到存在于父组件以外的 DOM 节点上，那么通过 Portal 进行事件冒泡时，会冒泡到?\n\n```\nA. 会上冒到子元素插入的DOM节点，一直冒泡至DOM树的根\n```\n\n```\nB. 不会上冒\n```\n\n```\nC. 会上冒到子元素插入的DOM节点，不再继续上冒\n```\n\n```\nD. 从portal内部触发的事件会一直冒泡至包含React树的祖先\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：尽管 portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 React 树， 且与 DOM 树 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的，包含事件冒泡。\n```\n\n</details>\n\n24. 验证对象是否为  React  元素可以使用（）方法?\n\n```\nA. React.isValidReactElement\n```\n\n```\nB. React.isValidElement\n```\n\n```\nC. React.isReactElement\n```\n\n```\nD. React.isElement\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：React.isValidElement 验证对象是否为React元素，返回值为true或false。\n```\n\n</details>\n\n25. StrictMode 组件的作用是?\n\n```\nA. 作用跟Fragment组件一样，可以一个组件返回多个元素\n```\n\n```\nB. 用来突出显示应用程序中潜在问题\n```\n\n```\nC. 为其后代元素开启严格模式\n```\n\n```\nD. 为其后代元素触发额外的检查和警告\n```\n\n<details> \n<summary>查看答案</summary>\n\n```text\n答案为C\n解析：与Fragment一样，StrictMode不会渲染任何可见的UI。但是与Fragment不同的是，它为其后代元素触发额外的检查和警告。\n```\n\n</details>\n\n## 其他\n\n1. 请选择下面代码输出 1 的次数\n\n```js\nvar vm = new Vue({\n  el: \"#example\",\n  data: {\n    message: \"Hello\",\n  },\n  computed: {\n    test: function () {\n      console.log(1);\n      return this.message;\n    },\n  },\n  created: function () {\n    this.message = \"World\";\n    for (var i = 0; i < 5; i++) {\n      console.log(this.test);\n    }\n  },\n});\n```\n\n解释：因为 vue 的 `computed` 具有`缓存`功能。`message` 只`更新了一次`，所以 `test` `只触发一次`，执行一次 console.log(1)。\n具体来说，computed 内的 test 函数会被加入到 message 这个响应式数据的依赖视图中，当修改了 message（触发了 message 的 set）之后，test 这个 computed 的 dirty 属性会被设置为 true，当视图渲染的时候，发现 dirty 为 true 了，就会执行 1 次 test 函数以获取最新的值。\n","slug":"前端笔试/错题集","published":1,"updated":"2023-07-30T18:25:33.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdmc001o36l15d7rde91","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"个人错题集\"><a href=\"#个人错题集\" class=\"headerlink\" title=\"个人错题集\"></a>个人错题集</h1><h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><ol>\n<li><Route />中的 path 属性可以使用通配符，以下关于通配符的规则描述错误的是？</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. “:paramName”： 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. “()”： ()表示URL的这个部分是可选的。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. “*”： *匹配任意字符，直到模式里面的下一个字符为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. “**”：** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"2\">\n<li>关于“错误边界”，以下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. static getDerivedStateFromError() 可以用来渲染备用UI</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. componentDidCatch()可以打印错误信息</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 错误边界是一种React组件，这种组件可以捕获并打印发生在当前组件的javaScript错误</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. class组件中只要定义了static getDerivedStateFromError()或componentDidCatch()其中一个，该组件就会变成错误边界</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：错误边界无法捕获 以下四种场景中产生的错误： </span><br><span class=\"line\">    1.`事件处理函数`（因为 Error Boundaries 实现的本质是触发更新，但是事件处理函数不在render或者commit阶段，所以无法进行捕获，</span><br><span class=\"line\">如果你需要在事件处理器内部捕获错误，可以使用原生的 try / catch 语句 ） </span><br><span class=\"line\">    2. 异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数） </span><br><span class=\"line\">    3. 服务端渲染（因为触发更新只能在客户端进行，不能在serve端进行） </span><br><span class=\"line\">    4. 它自身抛出来的错误（因为错误抛出要向父节点冒泡寻找 Error Boundaries 处理，无法处理自身产生的错误）</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"3\">\n<li>以下不属于 React 支持的触摸事件的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onTouchCancel</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onTouchEnd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onTouchStart</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onTouchOver</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<p>答案为 D<br>React 支持的触摸事件有：onTouchStart，onTouchMove，onTouchEnd，onTouchCancel</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onTouchStart</td>\n<td>手指触摸屏幕的时候触发</td>\n</tr>\n<tr>\n<td>onTouchMove</td>\n<td>手指在屏幕上滑动的时候触发</td>\n</tr>\n<tr>\n<td>onTouchEnd</td>\n<td>手指从屏幕上移开的时候触发</td>\n</tr>\n<tr>\n<td>onTouchCancel</td>\n<td>触摸事件被中断时发生，如：来电话、来短信、弹出消息提示</td>\n</tr>\n</tbody></table>\n</details>\n\n<ol start=\"4\">\n<li>以下哪项对 react-router-dom 中组件分类是错误的?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 路由器组件: BrowserRouter和HashRouter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 导航组件: Link和NavLink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 路由匹配组件: Route和Switch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 导航组件: Route和Switch</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：在react-router-dom中通常使用的组件有三种路由器组件: 如BrowserRouter和HashRouter</span><br><span class=\"line\"></span><br><span class=\"line\">路由匹配组件: Route和Switch 组件</span><br><span class=\"line\"></span><br><span class=\"line\">导航组件: Link和NavLink 组件</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"5\">\n<li>以下不属于 react 支持的剪贴板事件的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onCopy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onPaste</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onCut</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onBeforeCopy</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：react支持的剪贴板事件有onCopy，onCut，onPaste</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"6\">\n<li>以下不属于 StrictMode 的作用或优点的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 检测过时的 context API</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 识别不安全的生命周期</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 检测意外的副作用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 在生产环境也生效</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：严格模式检查仅在开发模式下运行，它们不会影响生产构建。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"7\">\n<li>以下关于 Mobx 中原则说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. Mobx 支持单向数据流</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当状态改变时，所有衍生都会进行自动更新，可以观察到中间值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 所有衍生默认都是同步更新</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 所有的计算值都应该是纯净的</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"8\">\n<li>关于 Context 一下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. Context提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. Context设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. Context会提高组件的复用性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. Context能让你将这些数据向组件树下所有的组件进行“广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：当一些值需要在多个组件间共享的时候，context是个可以避免数据层层传递的方法，但他会使得组件得复用性变差。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"9\">\n<li>以下关于 useContext 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 调用了useContext的组件总会在context值变化时重新渲染</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. useContext 的参数必须是 context 对象本身：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当组件最上层的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：useContext 的参数必须是 *context 对象本身*：</span><br><span class=\"line\">当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"10\">\n<li>可以使子节点渲染到存在于父组件以外的 DOM 节点上的方法是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React.createPortal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. React.createElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.createPortal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. ReactDom.render</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：ReactDOM.createPortal函数可以将子节点渲染到存在于父组件以外的DOM节点上。</span><br></pre></td></tr></table></figure>\n\n</details>\n    \n<ol start=\"11\">\n<li>关于React中的“状态提升”说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React建议任何可变数据应当只有一个相对应的唯一“数据源”</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 提升状态(state)方式相比于双向绑定方式需要编写更多的“样板”代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 虽然某些数据可以由props或state推导得出，但是我们最好还是单独在state声明它</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 通常，多个组件需要反映相同的变化数据，都应尽量将共享状态提升到最近的公共父组件中去</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：其中ABD都为官方说法，C选项中如果某些数据可以由props或state推导得出，那么就不应该将其在state中声明。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"12\">\n<li>以下不是 Redux 的使用原则的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 单一数据源</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 双向数据流</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. State是只读的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 使用纯函数来执行修改</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：Redux可以用这三个基本原则来描述：1.单一数据源 2.State是只读的 3.使用纯函数来执行修改</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"13\">\n<li>从  DOM  中卸载组件，可以使用？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. ReactDOM.unmountComponentAtNode</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ReactDOM.unmountComponent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.unmountRender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. ReactDOM.clearDOMNode</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为A</span><br><span class=\"line\">解析：ReactDOM.unmountComponentAtNode，从DOM中卸载组件，会将其事件处理器</span><br><span class=\"line\">    （event handlers）和 state 一并清除。如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。</span><br><span class=\"line\">    如果组件被移除将会返回 true，如果没有组件可被移除将会返回 false。</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"14\">\n<li>以下不属于 React 复合事件的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onCompositionEnd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onCompositionRender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onCompositionUpdate</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onCompositionStart</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<p>答案为 C<br>解析：React 复合事件有 onCompositionEnd，onCompositionStart，onCompositionUpdate</p>\n</details>\n\n<ol start=\"15\">\n<li>在 componentDidUpdate()中以下哪个说法是正确的?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 在componentDidUpdate()中可以任意调用setState()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当组件更新时，componentDidUpdate()总会被调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 首次渲染时，componentDidUpdate()会在componentDidMount()前面调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当组件更新时，componentDidUpdate()可能不会被调用</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：A选项中，可以在 componentDidUpdate()中直接调用 setState()，但请注意它必须被包裹在一个条件语句里</span><br><span class=\"line\"></span><br><span class=\"line\">BD选项中，如果shouldComponentUpdate()返回值为false，则不会调用componentDidUpdate()</span><br><span class=\"line\"></span><br><span class=\"line\">C选项中，首次渲染不会执行componentDidUpdate()</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"16\">\n<li>关于 Redux，以下说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 唯一改变state的方法就是触发action</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. action是一个用于描述即将发生事件的普通对象</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 为了描述action如何改变state tree，你需要编写纯的reducers</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 整个应用的全局state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：在Redux中，action是一个用于描述已发生事件的普通对象.</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"17\">\n<li>class 组件生命周期方法对应到函数组件和 Hook，以下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. render =&gt; 这是函数组件体本身</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. getSnapshotBeforeUpdate 目前没有对应的Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. constructor =&gt; 函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. componentWillUnmount 目前没有对应的Hook</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：useEffect里面返回的函数</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"18\">\n<li>以下关于 ReactDOM.render 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. ReactDOM.render() 会控制你传入容器节点里的内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ReactDOM.render() 会修改容器节点以及其子节点</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.render() 目前会返回对根组件 ReactComponent 实例的引用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 使用 ReactDOM.render() 对服务端渲染容器进行 hydrate 操作的方式已经被废弃，并且会在 React 17 被移除</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：ReactDOM.render() 不会修改容器节点（只会修改容器的子节点）。可以在不覆盖现有子节点的情况下，将组件插入已有的 DOM 节点中。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"19\">\n<li>关于 Hook 中的 useDebugValue 的作用是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 获取当前是否在debug模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 开启当前函数组件debug模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 可以在React开发者工具中显示自定义hook的标签</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 可以在React开发者工具中给函数组件添加额外的描述</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：useDebugValue可用于在React开发者工具中显示自定义Hook的标签。。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"20\">\n<li>以下关于 ref 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素作为其current属性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ref是使用React.createRef()创建的，并通过ref属性附加到React元素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 当ref属性用于函数组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当ref属性用于自定义class组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：不能在函数组件上使用ref属性，因为它们没有实例。在函数组件上使用ref，需要借助forwardRef。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"21\">\n<li>关于 Hook 的使用，以下说法中不满足官方使用规则的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 不要在循环、条件判断中调用Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 在自定义Hook或其他自定义函数中调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 在React函数最外层调用Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 在React的函数组件中调用Hook</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：Hook使用规则：</span><br><span class=\"line\"></span><br><span class=\"line\">1.只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用；</span><br><span class=\"line\"></span><br><span class=\"line\">2.只能在React的函数组件或自定义的Hook中调用 Hook，不要在其他 JavaScript 函数中调用。</span><br></pre></td></tr></table></figure>\n\n</details>\n    \n<ol start=\"22\">\n<li>以下哪个选项不能作为Router组件的history属性值?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. createMemoryHistory</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. History</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. hashHistory</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. browserHistory</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：history属性，一共可以设置三种值:browserHistory、hashHistory和createMemoryHistory。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"23\">\n<li>ReactDOM.createPortal(child, container)函数可以将子节点渲染到存在于父组件以外的 DOM 节点上，那么通过 Portal 进行事件冒泡时，会冒泡到?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 会上冒到子元素插入的DOM节点，一直冒泡至DOM树的根</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 不会上冒</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 会上冒到子元素插入的DOM节点，不再继续上冒</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 从portal内部触发的事件会一直冒泡至包含React树的祖先</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：尽管 portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 React 树， 且与 DOM 树 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的，包含事件冒泡。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"24\">\n<li>验证对象是否为  React  元素可以使用（）方法?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React.isValidReactElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. React.isValidElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. React.isReactElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. React.isElement</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：React.isValidElement 验证对象是否为React元素，返回值为true或false。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"25\">\n<li>StrictMode 组件的作用是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 作用跟Fragment组件一样，可以一个组件返回多个元素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 用来突出显示应用程序中潜在问题</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 为其后代元素开启严格模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 为其后代元素触发额外的检查和警告</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：与Fragment一样，StrictMode不会渲染任何可见的UI。但是与Fragment不同的是，它为其后代元素触发额外的检查和警告。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>请选择下面代码输出 1 的次数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#example&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">created</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">test</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>解释：因为 vue 的 <code>computed</code> 具有<code>缓存</code>功能。<code>message</code> 只<code>更新了一次</code>，所以 <code>test</code> <code>只触发一次</code>，执行一次 console.log(1)。<br>具体来说，computed 内的 test 函数会被加入到 message 这个响应式数据的依赖视图中，当修改了 message（触发了 message 的 set）之后，test 这个 computed 的 dirty 属性会被设置为 true，当视图渲染的时候，发现 dirty 为 true 了，就会执行 1 次 test 函数以获取最新的值。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"个人错题集\"><a href=\"#个人错题集\" class=\"headerlink\" title=\"个人错题集\"></a>个人错题集</h1><h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><ol>\n<li><Route />中的 path 属性可以使用通配符，以下关于通配符的规则描述错误的是？</li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. “:paramName”： 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. “()”： ()表示URL的这个部分是可选的。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. “*”： *匹配任意字符，直到模式里面的下一个字符为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. “**”：** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"2\">\n<li>关于“错误边界”，以下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. static getDerivedStateFromError() 可以用来渲染备用UI</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. componentDidCatch()可以打印错误信息</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 错误边界是一种React组件，这种组件可以捕获并打印发生在当前组件的javaScript错误</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. class组件中只要定义了static getDerivedStateFromError()或componentDidCatch()其中一个，该组件就会变成错误边界</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：错误边界无法捕获 以下四种场景中产生的错误： </span><br><span class=\"line\">    1.`事件处理函数`（因为 Error Boundaries 实现的本质是触发更新，但是事件处理函数不在render或者commit阶段，所以无法进行捕获，</span><br><span class=\"line\">如果你需要在事件处理器内部捕获错误，可以使用原生的 try / catch 语句 ） </span><br><span class=\"line\">    2. 异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数） </span><br><span class=\"line\">    3. 服务端渲染（因为触发更新只能在客户端进行，不能在serve端进行） </span><br><span class=\"line\">    4. 它自身抛出来的错误（因为错误抛出要向父节点冒泡寻找 Error Boundaries 处理，无法处理自身产生的错误）</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"3\">\n<li>以下不属于 React 支持的触摸事件的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onTouchCancel</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onTouchEnd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onTouchStart</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onTouchOver</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<p>答案为 D<br>React 支持的触摸事件有：onTouchStart，onTouchMove，onTouchEnd，onTouchCancel</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onTouchStart</td>\n<td>手指触摸屏幕的时候触发</td>\n</tr>\n<tr>\n<td>onTouchMove</td>\n<td>手指在屏幕上滑动的时候触发</td>\n</tr>\n<tr>\n<td>onTouchEnd</td>\n<td>手指从屏幕上移开的时候触发</td>\n</tr>\n<tr>\n<td>onTouchCancel</td>\n<td>触摸事件被中断时发生，如：来电话、来短信、弹出消息提示</td>\n</tr>\n</tbody></table>\n</details>\n\n<ol start=\"4\">\n<li>以下哪项对 react-router-dom 中组件分类是错误的?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 路由器组件: BrowserRouter和HashRouter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 导航组件: Link和NavLink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 路由匹配组件: Route和Switch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 导航组件: Route和Switch</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：在react-router-dom中通常使用的组件有三种路由器组件: 如BrowserRouter和HashRouter</span><br><span class=\"line\"></span><br><span class=\"line\">路由匹配组件: Route和Switch 组件</span><br><span class=\"line\"></span><br><span class=\"line\">导航组件: Link和NavLink 组件</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"5\">\n<li>以下不属于 react 支持的剪贴板事件的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onCopy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onPaste</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onCut</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onBeforeCopy</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：react支持的剪贴板事件有onCopy，onCut，onPaste</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"6\">\n<li>以下不属于 StrictMode 的作用或优点的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 检测过时的 context API</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 识别不安全的生命周期</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 检测意外的副作用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 在生产环境也生效</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：严格模式检查仅在开发模式下运行，它们不会影响生产构建。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"7\">\n<li>以下关于 Mobx 中原则说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. Mobx 支持单向数据流</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当状态改变时，所有衍生都会进行自动更新，可以观察到中间值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 所有衍生默认都是同步更新</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 所有的计算值都应该是纯净的</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"8\">\n<li>关于 Context 一下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. Context提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. Context设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. Context会提高组件的复用性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. Context能让你将这些数据向组件树下所有的组件进行“广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：当一些值需要在多个组件间共享的时候，context是个可以避免数据层层传递的方法，但他会使得组件得复用性变差。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"9\">\n<li>以下关于 useContext 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 调用了useContext的组件总会在context值变化时重新渲染</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. useContext 的参数必须是 context 对象本身：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当组件最上层的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：useContext 的参数必须是 *context 对象本身*：</span><br><span class=\"line\">当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"10\">\n<li>可以使子节点渲染到存在于父组件以外的 DOM 节点上的方法是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React.createPortal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. React.createElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.createPortal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. ReactDom.render</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：ReactDOM.createPortal函数可以将子节点渲染到存在于父组件以外的DOM节点上。</span><br></pre></td></tr></table></figure>\n\n</details>\n    \n<ol start=\"11\">\n<li>关于React中的“状态提升”说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React建议任何可变数据应当只有一个相对应的唯一“数据源”</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 提升状态(state)方式相比于双向绑定方式需要编写更多的“样板”代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 虽然某些数据可以由props或state推导得出，但是我们最好还是单独在state声明它</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 通常，多个组件需要反映相同的变化数据，都应尽量将共享状态提升到最近的公共父组件中去</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：其中ABD都为官方说法，C选项中如果某些数据可以由props或state推导得出，那么就不应该将其在state中声明。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"12\">\n<li>以下不是 Redux 的使用原则的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 单一数据源</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 双向数据流</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. State是只读的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 使用纯函数来执行修改</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：Redux可以用这三个基本原则来描述：1.单一数据源 2.State是只读的 3.使用纯函数来执行修改</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"13\">\n<li>从  DOM  中卸载组件，可以使用？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. ReactDOM.unmountComponentAtNode</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ReactDOM.unmountComponent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.unmountRender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. ReactDOM.clearDOMNode</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary> \n    \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为A</span><br><span class=\"line\">解析：ReactDOM.unmountComponentAtNode，从DOM中卸载组件，会将其事件处理器</span><br><span class=\"line\">    （event handlers）和 state 一并清除。如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。</span><br><span class=\"line\">    如果组件被移除将会返回 true，如果没有组件可被移除将会返回 false。</span><br></pre></td></tr></table></figure>\n</details>\n\n<ol start=\"14\">\n<li>以下不属于 React 复合事件的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. onCompositionEnd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. onCompositionRender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. onCompositionUpdate</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. onCompositionStart</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<p>答案为 C<br>解析：React 复合事件有 onCompositionEnd，onCompositionStart，onCompositionUpdate</p>\n</details>\n\n<ol start=\"15\">\n<li>在 componentDidUpdate()中以下哪个说法是正确的?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 在componentDidUpdate()中可以任意调用setState()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 当组件更新时，componentDidUpdate()总会被调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 首次渲染时，componentDidUpdate()会在componentDidMount()前面调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当组件更新时，componentDidUpdate()可能不会被调用</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：A选项中，可以在 componentDidUpdate()中直接调用 setState()，但请注意它必须被包裹在一个条件语句里</span><br><span class=\"line\"></span><br><span class=\"line\">BD选项中，如果shouldComponentUpdate()返回值为false，则不会调用componentDidUpdate()</span><br><span class=\"line\"></span><br><span class=\"line\">C选项中，首次渲染不会执行componentDidUpdate()</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"16\">\n<li>关于 Redux，以下说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 唯一改变state的方法就是触发action</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. action是一个用于描述即将发生事件的普通对象</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 为了描述action如何改变state tree，你需要编写纯的reducers</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 整个应用的全局state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：在Redux中，action是一个用于描述已发生事件的普通对象.</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"17\">\n<li>class 组件生命周期方法对应到函数组件和 Hook，以下说法错误的是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. render =&gt; 这是函数组件体本身</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. getSnapshotBeforeUpdate 目前没有对应的Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. constructor =&gt; 函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. componentWillUnmount 目前没有对应的Hook</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为D</span><br><span class=\"line\">解析：useEffect里面返回的函数</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"18\">\n<li>以下关于 ReactDOM.render 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. ReactDOM.render() 会控制你传入容器节点里的内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ReactDOM.render() 会修改容器节点以及其子节点</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. ReactDOM.render() 目前会返回对根组件 ReactComponent 实例的引用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 使用 ReactDOM.render() 对服务端渲染容器进行 hydrate 操作的方式已经被废弃，并且会在 React 17 被移除</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为B</span><br><span class=\"line\">解析：ReactDOM.render() 不会修改容器节点（只会修改容器的子节点）。可以在不覆盖现有子节点的情况下，将组件插入已有的 DOM 节点中。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"19\">\n<li>关于 Hook 中的 useDebugValue 的作用是？</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 获取当前是否在debug模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 开启当前函数组件debug模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 可以在React开发者工具中显示自定义hook的标签</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 可以在React开发者工具中给函数组件添加额外的描述</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：useDebugValue可用于在React开发者工具中显示自定义Hook的标签。。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"20\">\n<li>以下关于 ref 说法错误的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素作为其current属性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. ref是使用React.createRef()创建的，并通过ref属性附加到React元素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 当ref属性用于函数组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 当ref属性用于自定义class组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：不能在函数组件上使用ref属性，因为它们没有实例。在函数组件上使用ref，需要借助forwardRef。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"21\">\n<li>关于 Hook 的使用，以下说法中不满足官方使用规则的是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 不要在循环、条件判断中调用Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 在自定义Hook或其他自定义函数中调用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 在React函数最外层调用Hook</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 在React的函数组件中调用Hook</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：Hook使用规则：</span><br><span class=\"line\"></span><br><span class=\"line\">1.只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用；</span><br><span class=\"line\"></span><br><span class=\"line\">2.只能在React的函数组件或自定义的Hook中调用 Hook，不要在其他 JavaScript 函数中调用。</span><br></pre></td></tr></table></figure>\n\n</details>\n    \n<ol start=\"22\">\n<li>以下哪个选项不能作为Router组件的history属性值?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. createMemoryHistory</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. History</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. hashHistory</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. browserHistory</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：history属性，一共可以设置三种值:browserHistory、hashHistory和createMemoryHistory。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"23\">\n<li>ReactDOM.createPortal(child, container)函数可以将子节点渲染到存在于父组件以外的 DOM 节点上，那么通过 Portal 进行事件冒泡时，会冒泡到?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 会上冒到子元素插入的DOM节点，一直冒泡至DOM树的根</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 不会上冒</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 会上冒到子元素插入的DOM节点，不再继续上冒</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 从portal内部触发的事件会一直冒泡至包含React树的祖先</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：尽管 portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 React 树， 且与 DOM 树 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的，包含事件冒泡。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"24\">\n<li>验证对象是否为  React  元素可以使用（）方法?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. React.isValidReactElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. React.isValidElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. React.isReactElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. React.isElement</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：React.isValidElement 验证对象是否为React元素，返回值为true或false。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<ol start=\"25\">\n<li>StrictMode 组件的作用是?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A. 作用跟Fragment组件一样，可以一个组件返回多个元素</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B. 用来突出显示应用程序中潜在问题</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C. 为其后代元素开启严格模式</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D. 为其后代元素触发额外的检查和警告</span><br></pre></td></tr></table></figure>\n\n<details> \n<summary>查看答案</summary>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答案为C</span><br><span class=\"line\">解析：与Fragment一样，StrictMode不会渲染任何可见的UI。但是与Fragment不同的是，它为其后代元素触发额外的检查和警告。</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>请选择下面代码输出 1 的次数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#example&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">created</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">test</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>解释：因为 vue 的 <code>computed</code> 具有<code>缓存</code>功能。<code>message</code> 只<code>更新了一次</code>，所以 <code>test</code> <code>只触发一次</code>，执行一次 console.log(1)。<br>具体来说，computed 内的 test 函数会被加入到 message 这个响应式数据的依赖视图中，当修改了 message（触发了 message 的 set）之后，test 这个 computed 的 dirty 属性会被设置为 true，当视图渲染的时候，发现 dirty 为 true 了，就会执行 1 次 test 函数以获取最新的值。</p>\n"},{"title":"本地分支落后远程分支","description":"本地分支落后远程分支","date":"2023-01-03T16:00:00.000Z","cover":"https://is.gd/Up9WrG","_content":"\n问题：\n终端提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。\n\n两步：\n\n1. git fetch origin\n2. git merge origin/目标分支\n","source":"_posts/实习学习/本地分支落后远程分支.md","raw":"---\ntitle: 本地分支落后远程分支\ntags: [实习学习]\ncategories: [git]\ndescription: 本地分支落后远程分支\ndate: 2023-01-04\ncover: https://is.gd/Up9WrG\n---\n\n问题：\n终端提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。\n\n两步：\n\n1. git fetch origin\n2. git merge origin/目标分支\n","slug":"实习学习/本地分支落后远程分支","published":1,"updated":"2023-07-30T18:24:37.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdme001s36l15f9g7t41","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>问题：<br>终端提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</p>\n<p>两步：</p>\n<ol>\n<li>git fetch origin</li>\n<li>git merge origin&#x2F;目标分支</li>\n</ol>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<p>问题：<br>终端提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</p>\n<p>两步：</p>\n<ol>\n<li>git fetch origin</li>\n<li>git merge origin&#x2F;目标分支</li>\n</ol>\n"},{"title":"原生js回弹问题","description":"在开发过程中我们可能需要实现拖拽功能","date":"2022-10-30T16:00:00.000Z","cover":"https://is.gd/BKfqTS","_content":"\n# 原生 js 回弹问题\n\n### 心路历程\n\n说下自己遇到这个问题的过程吧，真是心酸。遇到项目的背景，用 react 写 win11 桌面，在 win11 系统上没有回弹的问题，而在 mac 电脑上有拖拽回弹的问题。一开始去看知乎，找到最终答案，但自己在子元素上加相关 dragOver 属性然后再阻止默认事件，没有用.....。之后看了一篇掘金文章用复制解决回弹问题，虽然核心实现拖拽差不多，但是代码已经写了很久了，自己无从下手。。。之后第二天看了下别人具体怎么实现原生 js 拖拽，看了里面相关代码，发现是在父元素上加 dragover 事件，在阻止其默认事件。。。。\n\n### 总结\n\n年轻人心浮气躁了，是时候买枸杞修身养性了<(￣︶￣)>\n","source":"_posts/项目实战/原生js回弹问题解决.md","raw":"---\ntitle: 原生js回弹问题\ntags: [项目实战]\ncategories: [项目实战]\ndescription: 在开发过程中我们可能需要实现拖拽功能\ndate: 2022-10-31\ncover: https://is.gd/BKfqTS\n---\n\n# 原生 js 回弹问题\n\n### 心路历程\n\n说下自己遇到这个问题的过程吧，真是心酸。遇到项目的背景，用 react 写 win11 桌面，在 win11 系统上没有回弹的问题，而在 mac 电脑上有拖拽回弹的问题。一开始去看知乎，找到最终答案，但自己在子元素上加相关 dragOver 属性然后再阻止默认事件，没有用.....。之后看了一篇掘金文章用复制解决回弹问题，虽然核心实现拖拽差不多，但是代码已经写了很久了，自己无从下手。。。之后第二天看了下别人具体怎么实现原生 js 拖拽，看了里面相关代码，发现是在父元素上加 dragover 事件，在阻止其默认事件。。。。\n\n### 总结\n\n年轻人心浮气躁了，是时候买枸杞修身养性了<(￣︶￣)>\n","slug":"项目实战/原生js回弹问题解决","published":1,"updated":"2023-07-30T18:24:17.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpywdme001u36l1844jajj4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"原生-js-回弹问题\"><a href=\"#原生-js-回弹问题\" class=\"headerlink\" title=\"原生 js 回弹问题\"></a>原生 js 回弹问题</h1><h3 id=\"心路历程\"><a href=\"#心路历程\" class=\"headerlink\" title=\"心路历程\"></a>心路历程</h3><p>说下自己遇到这个问题的过程吧，真是心酸。遇到项目的背景，用 react 写 win11 桌面，在 win11 系统上没有回弹的问题，而在 mac 电脑上有拖拽回弹的问题。一开始去看知乎，找到最终答案，但自己在子元素上加相关 dragOver 属性然后再阻止默认事件，没有用…..。之后看了一篇掘金文章用复制解决回弹问题，虽然核心实现拖拽差不多，但是代码已经写了很久了，自己无从下手。。。之后第二天看了下别人具体怎么实现原生 js 拖拽，看了里面相关代码，发现是在父元素上加 dragover 事件，在阻止其默认事件。。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>年轻人心浮气躁了，是时候买枸杞修身养性了&lt;(￣︶￣)&gt;</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"原生-js-回弹问题\"><a href=\"#原生-js-回弹问题\" class=\"headerlink\" title=\"原生 js 回弹问题\"></a>原生 js 回弹问题</h1><h3 id=\"心路历程\"><a href=\"#心路历程\" class=\"headerlink\" title=\"心路历程\"></a>心路历程</h3><p>说下自己遇到这个问题的过程吧，真是心酸。遇到项目的背景，用 react 写 win11 桌面，在 win11 系统上没有回弹的问题，而在 mac 电脑上有拖拽回弹的问题。一开始去看知乎，找到最终答案，但自己在子元素上加相关 dragOver 属性然后再阻止默认事件，没有用…..。之后看了一篇掘金文章用复制解决回弹问题，虽然核心实现拖拽差不多，但是代码已经写了很久了，自己无从下手。。。之后第二天看了下别人具体怎么实现原生 js 拖拽，看了里面相关代码，发现是在父元素上加 dragover 事件，在阻止其默认事件。。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>年轻人心浮气躁了，是时候买枸杞修身养性了&lt;(￣︶￣)&gt;</p>\n"},{"title":"学习React-dnd","date":"2022-07-26T16:00:00.000Z","description":"学习React-dnd, 写了一个例子和一个demo.","cover":"https://is.gd/vx8crE","_content":"# 用 React Hooks 的方式使用 react-dnd\n\n## 一、用 DndProvider 将根节点包裹起来\n\n想要使用 react-dnd 进行拖拽操作，需要用 DndProvider 标签将根节点包裹起来，并传入一个 backend 参数： index.tsx 文件\n\n~~~tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport HTMLBackend from 'react-dnd-html5-backend'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <DndProvider backend={ HTMLBackend }>\n        <App />\n    </DndProvider>,\n    document.getElementById('root'));\n~~~\n\n## 二、让元素可以动起来\n\n1. 创建 Box 组件\n2. 让 Box 组件动起来\n\n就简单创建一个BOX组件，这里我们需要用到react-dnd的useDrag方法， 这里通过把第二参数赋值给ref，Box组件就能动起来，至于为什么，以后会给讲\n源码\n\n~~~tsx\nimport React, { CSSProperties } from 'react';\nimport { useDrag } from 'react-dnd';\nconst style: CSSProperties = {\n  width: 200,\n  height: 50,\n  lineHeight: '50px',\n  background: 'pink',\n  margin: '30px auto',\n};\n\nconst Box = () => {\n    const [, drager] = useDrag({\n        type: 'Box'\n    })\n  return (<div ref={drager} style={style}>可拖拽组件 Box</div>);\n};\n\nexport default Box;\n~~~\n\n## 三、创建 Dustbin 组件用来接收 drag 组件\n\n~~~tsx\nimport React, { CSSProperties } from 'react';\nimport { useDrop, DropTargetMonitor } from 'react-dnd';\n\nconst style: CSSProperties = {\n    width: 400,\n    height: 400,\n    margin: '100px auto',\n    lineHeight: '60px',\n    border: '1px dashed black'\n}\n\nconst Dustbin = () => {\n    // 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素\n    const [collectProps, droper] = useDrop({\n        // accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应\n        accept: 'Box',\n        // collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用\n        collect: (minoter: DropTargetMonitor) => ({\n            isOver: minoter.isOver()\n        })\n    })\n    const bg = collectProps.isOver ? 'deeppink' : 'white';\n    const content = collectProps.isOver ? '快松开，放到碗里来' : '将 Box 组件拖动到这里'\n    return (\n        // 将 droper 赋值给对应元素的 ref\n        <div ref={ droper } style={{ ...style, background: bg }}>{ content }</div>\n    )\n}\n\nexport default Dustbin;\n~~~\n\n## 四、效果图\n\n![image-20220727143704700](/img/react-dnd/image-20220727143704700.png)\n\n## 五、其它一些api\n\n- drag 组件常用的属性：\n  - item：是一个对象，必须要有一个 type 属性\n  - begin(mintor: DragSourceMonitor)：组件开始拖拽，必须返回一个对象包含 type 属性，会覆盖 item 属性返回的对象，会被传入 drop 组件 hover 和 drop 方法的第一个参数\n  - end(item, mintor: DragSourceMonitor)： 组件停止拖拽时触发，item 是 drop 组件在 drop 方法执行时返回的对象，等同于 mintor.getDropResult() 的值\n\n\n\n\n- drop 组件常用的属性\n  - accept：字符串，必须和对应 drag 组件的 item 属性中的 type 值一致\n  - hover(item, minoter: DropTargetMonitor)：drag 组件在 drop 组件上方 hove 时触发\n  - drop(item, minoter: DropTargetMonitor)：drag 组件拖拽结束后，放到 drop 组件时触发，返回的值会作为参数传递给 drag 组件 end 方法的第一个参数\n\n\n- 让组件既可以被拖拽也可以接收拖拽元素\n\n~~~tsx\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nconst Card = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: 'Card',\n    drop(item) {\n      console.log(item);\n    },\n  });\n\n  const [, drag] = useDrag({\n    type: 'Card',\n    item: { id: '1' },\n    end(draggedItem, monitor) {\n      console.log(draggedItem, monitor);\n    },\n  });\n\n  // 使用 drag 和 drop 包装 ref\n  drag(drop(ref));\n\n  // 将变量 ref 传给元素的 ref 即可\n  return <div ref={ref}>既可以被拖动也可以接收拖动组件</div>;\n};\n\nexport default Card;\n\n~~~\n\n## 一个更复杂的 Demo 演示\n\n![demo](/img/react-dnd/%E6%8B%96%E6%8B%BD%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%A2%84%E8%A7%88.gif)\n\nDemo 地址\n\n[react-dnd-hooks-demo](https://github.com/kangkang123269/kate-demo/tree/main/react-dnd-hooks-demo)","source":"_posts/react/react-dnd.md","raw":"---\ntitle: 学习React-dnd\ntags: [前端,react-dnd]\ncategories: [react]\ndate: 2022-07-27\ndescription: 学习React-dnd, 写了一个例子和一个demo.\ncover: https://is.gd/vx8crE\n---\n# 用 React Hooks 的方式使用 react-dnd\n\n## 一、用 DndProvider 将根节点包裹起来\n\n想要使用 react-dnd 进行拖拽操作，需要用 DndProvider 标签将根节点包裹起来，并传入一个 backend 参数： index.tsx 文件\n\n~~~tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport HTMLBackend from 'react-dnd-html5-backend'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <DndProvider backend={ HTMLBackend }>\n        <App />\n    </DndProvider>,\n    document.getElementById('root'));\n~~~\n\n## 二、让元素可以动起来\n\n1. 创建 Box 组件\n2. 让 Box 组件动起来\n\n就简单创建一个BOX组件，这里我们需要用到react-dnd的useDrag方法， 这里通过把第二参数赋值给ref，Box组件就能动起来，至于为什么，以后会给讲\n源码\n\n~~~tsx\nimport React, { CSSProperties } from 'react';\nimport { useDrag } from 'react-dnd';\nconst style: CSSProperties = {\n  width: 200,\n  height: 50,\n  lineHeight: '50px',\n  background: 'pink',\n  margin: '30px auto',\n};\n\nconst Box = () => {\n    const [, drager] = useDrag({\n        type: 'Box'\n    })\n  return (<div ref={drager} style={style}>可拖拽组件 Box</div>);\n};\n\nexport default Box;\n~~~\n\n## 三、创建 Dustbin 组件用来接收 drag 组件\n\n~~~tsx\nimport React, { CSSProperties } from 'react';\nimport { useDrop, DropTargetMonitor } from 'react-dnd';\n\nconst style: CSSProperties = {\n    width: 400,\n    height: 400,\n    margin: '100px auto',\n    lineHeight: '60px',\n    border: '1px dashed black'\n}\n\nconst Dustbin = () => {\n    // 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素\n    const [collectProps, droper] = useDrop({\n        // accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应\n        accept: 'Box',\n        // collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用\n        collect: (minoter: DropTargetMonitor) => ({\n            isOver: minoter.isOver()\n        })\n    })\n    const bg = collectProps.isOver ? 'deeppink' : 'white';\n    const content = collectProps.isOver ? '快松开，放到碗里来' : '将 Box 组件拖动到这里'\n    return (\n        // 将 droper 赋值给对应元素的 ref\n        <div ref={ droper } style={{ ...style, background: bg }}>{ content }</div>\n    )\n}\n\nexport default Dustbin;\n~~~\n\n## 四、效果图\n\n![image-20220727143704700](/img/react-dnd/image-20220727143704700.png)\n\n## 五、其它一些api\n\n- drag 组件常用的属性：\n  - item：是一个对象，必须要有一个 type 属性\n  - begin(mintor: DragSourceMonitor)：组件开始拖拽，必须返回一个对象包含 type 属性，会覆盖 item 属性返回的对象，会被传入 drop 组件 hover 和 drop 方法的第一个参数\n  - end(item, mintor: DragSourceMonitor)： 组件停止拖拽时触发，item 是 drop 组件在 drop 方法执行时返回的对象，等同于 mintor.getDropResult() 的值\n\n\n\n\n- drop 组件常用的属性\n  - accept：字符串，必须和对应 drag 组件的 item 属性中的 type 值一致\n  - hover(item, minoter: DropTargetMonitor)：drag 组件在 drop 组件上方 hove 时触发\n  - drop(item, minoter: DropTargetMonitor)：drag 组件拖拽结束后，放到 drop 组件时触发，返回的值会作为参数传递给 drag 组件 end 方法的第一个参数\n\n\n- 让组件既可以被拖拽也可以接收拖拽元素\n\n~~~tsx\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nconst Card = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: 'Card',\n    drop(item) {\n      console.log(item);\n    },\n  });\n\n  const [, drag] = useDrag({\n    type: 'Card',\n    item: { id: '1' },\n    end(draggedItem, monitor) {\n      console.log(draggedItem, monitor);\n    },\n  });\n\n  // 使用 drag 和 drop 包装 ref\n  drag(drop(ref));\n\n  // 将变量 ref 传给元素的 ref 即可\n  return <div ref={ref}>既可以被拖动也可以接收拖动组件</div>;\n};\n\nexport default Card;\n\n~~~\n\n## 一个更复杂的 Demo 演示\n\n![demo](/img/react-dnd/%E6%8B%96%E6%8B%BD%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%A2%84%E8%A7%88.gif)\n\nDemo 地址\n\n[react-dnd-hooks-demo](https://github.com/kangkang123269/kate-demo/tree/main/react-dnd-hooks-demo)","slug":"react/react-dnd","published":1,"updated":"2023-07-30T18:22:30.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpzm7oj0000aul116ykboll","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"用-React-Hooks-的方式使用-react-dnd\"><a href=\"#用-React-Hooks-的方式使用-react-dnd\" class=\"headerlink\" title=\"用 React Hooks 的方式使用 react-dnd\"></a>用 React Hooks 的方式使用 react-dnd</h1><h2 id=\"一、用-DndProvider-将根节点包裹起来\"><a href=\"#一、用-DndProvider-将根节点包裹起来\" class=\"headerlink\" title=\"一、用 DndProvider 将根节点包裹起来\"></a>一、用 DndProvider 将根节点包裹起来</h2><p>想要使用 react-dnd 进行拖拽操作，需要用 DndProvider 标签将根节点包裹起来，并传入一个 backend 参数： index.tsx 文件</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DndProvider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HTMLBackend</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd-html5-backend&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DndProvider</span> <span class=\"attr\">backend</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">HTMLBackend</span> &#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">DndProvider</span>&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、让元素可以动起来\"><a href=\"#二、让元素可以动起来\" class=\"headerlink\" title=\"二、让元素可以动起来\"></a>二、让元素可以动起来</h2><ol>\n<li>创建 Box 组件</li>\n<li>让 Box 组件动起来</li>\n</ol>\n<p>就简单创建一个BOX组件，这里我们需要用到react-dnd的useDrag方法， 这里通过把第二参数赋值给ref，Box组件就能动起来，至于为什么，以后会给讲<br>源码</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">CSSProperties</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">style</span>: <span class=\"title class_\">CSSProperties</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;50px&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">margin</span>: <span class=\"string\">&#x27;30px auto&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Box</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [, drager] = <span class=\"title function_\">useDrag</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Box&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;drager&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;style&#125;</span>&gt;</span>可拖拽组件 Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Box</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、创建-Dustbin-组件用来接收-drag-组件\"><a href=\"#三、创建-Dustbin-组件用来接收-drag-组件\" class=\"headerlink\" title=\"三、创建 Dustbin 组件用来接收 drag 组件\"></a>三、创建 Dustbin 组件用来接收 drag 组件</h2><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">CSSProperties</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrop, <span class=\"title class_\">DropTargetMonitor</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">style</span>: <span class=\"title class_\">CSSProperties</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">    <span class=\"attr\">margin</span>: <span class=\"string\">&#x27;100px auto&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;60px&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">border</span>: <span class=\"string\">&#x27;1px dashed black&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Dustbin</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [collectProps, droper] = <span class=\"title function_\">useDrop</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应</span></span><br><span class=\"line\">        <span class=\"attr\">accept</span>: <span class=\"string\">&#x27;Box&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用</span></span><br><span class=\"line\">        <span class=\"attr\">collect</span>: <span class=\"function\">(<span class=\"params\">minoter: DropTargetMonitor</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">            <span class=\"attr\">isOver</span>: minoter.<span class=\"title function_\">isOver</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bg = collectProps.<span class=\"property\">isOver</span> ? <span class=\"string\">&#x27;deeppink&#x27;</span> : <span class=\"string\">&#x27;white&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = collectProps.<span class=\"property\">isOver</span> ? <span class=\"string\">&#x27;快松开，放到碗里来&#x27;</span> : <span class=\"string\">&#x27;将 Box 组件拖动到这里&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 将 droper 赋值给对应元素的 ref</span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">droper</span> &#125; <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">...style</span>, <span class=\"attr\">background:</span> <span class=\"attr\">bg</span> &#125;&#125;&gt;</span>&#123; content &#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Dustbin</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、效果图\"><a href=\"#四、效果图\" class=\"headerlink\" title=\"四、效果图\"></a>四、效果图</h2><p><img src=\"/img/react-dnd/image-20220727143704700.png\" alt=\"image-20220727143704700\"></p>\n<h2 id=\"五、其它一些api\"><a href=\"#五、其它一些api\" class=\"headerlink\" title=\"五、其它一些api\"></a>五、其它一些api</h2><ul>\n<li><p>drag 组件常用的属性：</p>\n<ul>\n<li>item：是一个对象，必须要有一个 type 属性</li>\n<li>begin(mintor: DragSourceMonitor)：组件开始拖拽，必须返回一个对象包含 type 属性，会覆盖 item 属性返回的对象，会被传入 drop 组件 hover 和 drop 方法的第一个参数</li>\n<li>end(item, mintor: DragSourceMonitor)： 组件停止拖拽时触发，item 是 drop 组件在 drop 方法执行时返回的对象，等同于 mintor.getDropResult() 的值</li>\n</ul>\n</li>\n<li><p>drop 组件常用的属性</p>\n<ul>\n<li>accept：字符串，必须和对应 drag 组件的 item 属性中的 type 值一致</li>\n<li>hover(item, minoter: DropTargetMonitor)：drag 组件在 drop 组件上方 hove 时触发</li>\n<li>drop(item, minoter: DropTargetMonitor)：drag 组件拖拽结束后，放到 drop 组件时触发，返回的值会作为参数传递给 drag 组件 end 方法的第一个参数</li>\n</ul>\n</li>\n<li><p>让组件既可以被拖拽也可以接收拖拽元素</p>\n</li>\n</ul>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrag, useDrop &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Card</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, drop] = <span class=\"title function_\">useDrop</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">accept</span>: <span class=\"string\">&#x27;Card&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">drop</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, drag] = <span class=\"title function_\">useDrag</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Card&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">item</span>: &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">end</span>(<span class=\"params\">draggedItem, monitor</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(draggedItem, monitor);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 drag 和 drop 包装 ref</span></span><br><span class=\"line\">  <span class=\"title function_\">drag</span>(<span class=\"title function_\">drop</span>(ref));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将变量 ref 传给元素的 ref 即可</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>既可以被拖动也可以接收拖动组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Card</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个更复杂的-Demo-演示\"><a href=\"#一个更复杂的-Demo-演示\" class=\"headerlink\" title=\"一个更复杂的 Demo 演示\"></a>一个更复杂的 Demo 演示</h2><p><img src=\"/img/react-dnd/%E6%8B%96%E6%8B%BD%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%A2%84%E8%A7%88.gif\" alt=\"demo\"></p>\n<p>Demo 地址</p>\n<p><a href=\"https://github.com/kangkang123269/kate-demo/tree/main/react-dnd-hooks-demo\">react-dnd-hooks-demo</a></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"用-React-Hooks-的方式使用-react-dnd\"><a href=\"#用-React-Hooks-的方式使用-react-dnd\" class=\"headerlink\" title=\"用 React Hooks 的方式使用 react-dnd\"></a>用 React Hooks 的方式使用 react-dnd</h1><h2 id=\"一、用-DndProvider-将根节点包裹起来\"><a href=\"#一、用-DndProvider-将根节点包裹起来\" class=\"headerlink\" title=\"一、用 DndProvider 将根节点包裹起来\"></a>一、用 DndProvider 将根节点包裹起来</h2><p>想要使用 react-dnd 进行拖拽操作，需要用 DndProvider 标签将根节点包裹起来，并传入一个 backend 参数： index.tsx 文件</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DndProvider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HTMLBackend</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd-html5-backend&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DndProvider</span> <span class=\"attr\">backend</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">HTMLBackend</span> &#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">DndProvider</span>&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、让元素可以动起来\"><a href=\"#二、让元素可以动起来\" class=\"headerlink\" title=\"二、让元素可以动起来\"></a>二、让元素可以动起来</h2><ol>\n<li>创建 Box 组件</li>\n<li>让 Box 组件动起来</li>\n</ol>\n<p>就简单创建一个BOX组件，这里我们需要用到react-dnd的useDrag方法， 这里通过把第二参数赋值给ref，Box组件就能动起来，至于为什么，以后会给讲<br>源码</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">CSSProperties</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">style</span>: <span class=\"title class_\">CSSProperties</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;50px&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">margin</span>: <span class=\"string\">&#x27;30px auto&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Box</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [, drager] = <span class=\"title function_\">useDrag</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Box&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;drager&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;style&#125;</span>&gt;</span>可拖拽组件 Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Box</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、创建-Dustbin-组件用来接收-drag-组件\"><a href=\"#三、创建-Dustbin-组件用来接收-drag-组件\" class=\"headerlink\" title=\"三、创建 Dustbin 组件用来接收 drag 组件\"></a>三、创建 Dustbin 组件用来接收 drag 组件</h2><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">CSSProperties</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrop, <span class=\"title class_\">DropTargetMonitor</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">style</span>: <span class=\"title class_\">CSSProperties</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">    <span class=\"attr\">margin</span>: <span class=\"string\">&#x27;100px auto&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;60px&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">border</span>: <span class=\"string\">&#x27;1px dashed black&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Dustbin</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [collectProps, droper] = <span class=\"title function_\">useDrop</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应</span></span><br><span class=\"line\">        <span class=\"attr\">accept</span>: <span class=\"string\">&#x27;Box&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用</span></span><br><span class=\"line\">        <span class=\"attr\">collect</span>: <span class=\"function\">(<span class=\"params\">minoter: DropTargetMonitor</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">            <span class=\"attr\">isOver</span>: minoter.<span class=\"title function_\">isOver</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bg = collectProps.<span class=\"property\">isOver</span> ? <span class=\"string\">&#x27;deeppink&#x27;</span> : <span class=\"string\">&#x27;white&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = collectProps.<span class=\"property\">isOver</span> ? <span class=\"string\">&#x27;快松开，放到碗里来&#x27;</span> : <span class=\"string\">&#x27;将 Box 组件拖动到这里&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 将 droper 赋值给对应元素的 ref</span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">droper</span> &#125; <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">...style</span>, <span class=\"attr\">background:</span> <span class=\"attr\">bg</span> &#125;&#125;&gt;</span>&#123; content &#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Dustbin</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、效果图\"><a href=\"#四、效果图\" class=\"headerlink\" title=\"四、效果图\"></a>四、效果图</h2><p><img src=\"/img/react-dnd/image-20220727143704700.png\" alt=\"image-20220727143704700\"></p>\n<h2 id=\"五、其它一些api\"><a href=\"#五、其它一些api\" class=\"headerlink\" title=\"五、其它一些api\"></a>五、其它一些api</h2><ul>\n<li><p>drag 组件常用的属性：</p>\n<ul>\n<li>item：是一个对象，必须要有一个 type 属性</li>\n<li>begin(mintor: DragSourceMonitor)：组件开始拖拽，必须返回一个对象包含 type 属性，会覆盖 item 属性返回的对象，会被传入 drop 组件 hover 和 drop 方法的第一个参数</li>\n<li>end(item, mintor: DragSourceMonitor)： 组件停止拖拽时触发，item 是 drop 组件在 drop 方法执行时返回的对象，等同于 mintor.getDropResult() 的值</li>\n</ul>\n</li>\n<li><p>drop 组件常用的属性</p>\n<ul>\n<li>accept：字符串，必须和对应 drag 组件的 item 属性中的 type 值一致</li>\n<li>hover(item, minoter: DropTargetMonitor)：drag 组件在 drop 组件上方 hove 时触发</li>\n<li>drop(item, minoter: DropTargetMonitor)：drag 组件拖拽结束后，放到 drop 组件时触发，返回的值会作为参数传递给 drag 组件 end 方法的第一个参数</li>\n</ul>\n</li>\n<li><p>让组件既可以被拖拽也可以接收拖拽元素</p>\n</li>\n</ul>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDrag, useDrop &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dnd&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Card</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, drop] = <span class=\"title function_\">useDrop</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">accept</span>: <span class=\"string\">&#x27;Card&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">drop</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, drag] = <span class=\"title function_\">useDrag</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Card&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">item</span>: &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">end</span>(<span class=\"params\">draggedItem, monitor</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(draggedItem, monitor);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 drag 和 drop 包装 ref</span></span><br><span class=\"line\">  <span class=\"title function_\">drag</span>(<span class=\"title function_\">drop</span>(ref));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将变量 ref 传给元素的 ref 即可</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>既可以被拖动也可以接收拖动组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Card</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个更复杂的-Demo-演示\"><a href=\"#一个更复杂的-Demo-演示\" class=\"headerlink\" title=\"一个更复杂的 Demo 演示\"></a>一个更复杂的 Demo 演示</h2><p><img src=\"/img/react-dnd/%E6%8B%96%E6%8B%BD%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%A2%84%E8%A7%88.gif\" alt=\"demo\"></p>\n<p>Demo 地址</p>\n<p><a href=\"https://github.com/kangkang123269/kate-demo/tree/main/react-dnd-hooks-demo\">react-dnd-hooks-demo</a></p>\n"},{"title":"手写一个vite mock插件（篇二）","description":"手写一个vite mock插件","date":"2022-07-28T16:00:00.000Z","cover":"https://is.gd/tR20xa","_content":"\n# 手写一个vite mock插件（篇二）\n\n### 前言\n这里先给demo地址，可以直接看源码：[demo地址](https://github.com/kangkang123269/kate-demo/tree/main/vite/vite-mock-plugin)\n\n### 编写思路\n- 一开始干嘛？初始化。mock插件初始化什么，入口和能支持mock能力的devServer\n- 初始化完了，发现是不是有post，get等方法的路由请求，需不要给它分类？需要\n- 那怎么分类？考完重构一个对象的能力，是不是`so easy`.\n- 分为类是不是需要判断是否有效？有效就返回mock数据，无效执行下一个中间件\n- 前期这样想完全没有问题。\n\n来一条华丽的分割线\n\n----\n后期发现问题：\n- 发现中间件的next方法和res.send方法同时执行或导致程序中断\n\n解决这个问题我们需要判断路由是否有效，且不能在无效的时候去send和mock（假装自己知道就好了）\n\n- send函数在请求的时候需要给相应的信息，所以需要二次封装\n\n### 初始化\n\n我们从[vite初始篇一](https://juejin.cn/post/7125746860567822350)开始了解vite插件的钩子，我们需要开启一个服务去支持mock能力，需要用到`devServer`，很明显我们需要在`configureServer`这个钩子里面写，且需要mock数据的路径\n\n所以我们初始化的插件函数需要做两件事情：\n- 需要options参数入口，且为空的时候要给默认的入口\n- 在return的对象要用到`configureServer`的`server.middlewares`\n\n> server.middlewares相当于`express`的`app`\n\n~~~js\nimport path from 'path';\n\nexport default function (options = {}) {\n  // 获取mock文件入口，默认index\n  options.entry = options.entry || './mock/index.js';\n\n  // 转换为绝对路径\n  if (!path.isAbsolute(options.entry)) {\n    options.entry = path.resolve(process.cwd(), options.entry);\n  }\n\n  return {\n    configureServer: function ({ middlewares: app }) {\n        // 定义中间件：路由匹配\n      const middleware = (req, res, next) => {\n\n      };\n      app.use(middleware);\n    }\n  };\n}\n~~~\n\n再给我们的mock也初始下,下面看到我们是用的ES Moudle抛出方式，因为vite是不支持commonJS模块。所以我们需要用到`export default`，不能用到`module.exports`，本人亲测自己写一个支持require的插件也作用不到`mock`这个插件。（一个伤心的经历）\n\n~~~js\n// /mock/index.js\nexport default [\n  {\n    url: '/api/users',\n    type: 'get',\n    response: function (req, res) {\n      return res.send([\n        {\n          username: 'tom',\n          age: 18,\n        },\n        {\n          username: 'Tom',\n          age: 19,\n        },\n      ]);\n    },\n  },\n];\n~~~\n\n### 创建路由表\n\n我们需要的路由表是这种结构，一个方法对应多个路由，所以我们需要创建路由表。\n\n~~~json\n{\n    \"get\": [\n        {\n            \"url\": \"/api/1\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n        {\n            \"url\": \"/api/2\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n    ],\n    \"post\": [\n        {\n            \"url\": \"/api/1\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n        {\n            \"url\": \"/api/2\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n    ]\n}\n~~~\n\n首先获取路由，我们不能用require，所以用import. 但import是异步的，那么我们需要加上async/await等待加载完模块，用解构的方式获取mockObj\n\n~~~js\n...\nreturn {\n    configureServer: function ({ middlewares: app }) {\n        // 定义路由表\n        const mockObj = { ...(await import(options.entry)) }.default;\n        // 创建路由表\n        createRoute(mockObj);\n\n        ....\n         // 定义中间件：路由匹配\n        const middleware = (req, res, next) => {\n\n        };\n        app.use(middleware)\n    }\n};\n...\n~~~\n\n那么我们现在开始写`createRoute`函数，多尝试，也就一个简单的变量处理，下列写成函数如下：\n\n~~~js\nfunction createRoute(mockConfList) {\n  mockConfList.forEach((mockConf) => {\n    let method = mockConf.type || 'get';\n    let path = mockConf.url;\n    let handler = mockConf.response;\n    // 路由对象\n    let route = { path, method: method.toLowerCase(), handler };\n    // 如果没有改请求方法就初始化为空数组\n    if (!mockRouteMap[method]) {\n      mockRouteMap[method] = [];\n    }\n    console.log('create mock api: ', route.method, route.path);\n    // 存入映射对象中\n    mockRouteMap[method].push(route);\n  });\n}\n~~~\n创建完路由表，需要中间件里面的逻辑,也就是破路由和send数据到路由上面了。\n\n### 执行匹配路由和自定义send\n我们接下的逻辑可以这样写，先获取路由匹配的结果，如果匹配成功就send \n\n~~~js\n...\nreturn {\n    configureServer: async function ({ middlewares: app }) {\n      // 定义路由表\n      const mockObj = { ...(await import(options.entry)) }.default;\n      // 创建路由表\n      createRoute(mockObj);\n\n      // 定义中间件：路由匹配\n      const middleware = (req, res, next) => {\n        // 1. 执行匹配过程\n        let route = matchRoute(req);\n\n        // 2. 存在匹配，则这个是一个mock请求\n        if (route) {\n          console.log('mock request', route.method, route.path);\n          // 自定义send\n          res.send = send;\n          // 执行路由的`response`回调函数，可以把代码往前翻\n          route.handler(req, res);\n        } else {\n          next();\n        }\n      };\n      app.use(middleware);\n    },\n};\n\n...\n~~~\n\n#### 匹配路由\n\n根据我们浏览器请求的路由去匹配路由信息\n\n~~~js\nfunction matchRoute(req) {\n  let url = req.url;\n  let method = req.method.toLowerCase();\n  let routeList = mockRouteMap[method];\n\n  return routeList && routeList.find((item) => item.path === url);\n}\n~~~\n\n我们请求一个试下：\n\n`成功匹配`:\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e09bdc4eda6c458c90290fef6420279b~tplv-k3u1fbpfcp-watermark.image?)\n\n\n#### 自定义send\n\n这里自定义send我们可以添加请求头字段，能够知道请求的东西的类型，长度等信息\n\n~~~js\nfunction send(body) {\n  let chunk = JSON.stringify(body);\n  // Content-Length\n  if (chunk) {\n    chunk = Buffer.from(chunk, 'utf-8');\n    this.setHeader('Content-Length', chunk.length);\n  }\n  // content-type\n  this.setHeader('Content-Type', 'application/json');\n  // status\n  this.statusCode = 200;\n  // response\n  this.end(chunk, 'utf8');\n}\n~~~\n\n### 总结\n\nvite插件的掌握还是需要写些插件，看看别人的源码，了解为什么这么写，自己之后可以这样写。根据自己需求出去，应用到实践中去。\n\n","source":"_posts/vite/vite-mock-plugin.md","raw":"---\ntitle: 手写一个vite mock插件（篇二）\ntags: [vite]\ncategories: [前端工程化]\ndescription: 手写一个vite mock插件\ndate: 2022-07-29\ncover: https://is.gd/tR20xa\n---\n\n# 手写一个vite mock插件（篇二）\n\n### 前言\n这里先给demo地址，可以直接看源码：[demo地址](https://github.com/kangkang123269/kate-demo/tree/main/vite/vite-mock-plugin)\n\n### 编写思路\n- 一开始干嘛？初始化。mock插件初始化什么，入口和能支持mock能力的devServer\n- 初始化完了，发现是不是有post，get等方法的路由请求，需不要给它分类？需要\n- 那怎么分类？考完重构一个对象的能力，是不是`so easy`.\n- 分为类是不是需要判断是否有效？有效就返回mock数据，无效执行下一个中间件\n- 前期这样想完全没有问题。\n\n来一条华丽的分割线\n\n----\n后期发现问题：\n- 发现中间件的next方法和res.send方法同时执行或导致程序中断\n\n解决这个问题我们需要判断路由是否有效，且不能在无效的时候去send和mock（假装自己知道就好了）\n\n- send函数在请求的时候需要给相应的信息，所以需要二次封装\n\n### 初始化\n\n我们从[vite初始篇一](https://juejin.cn/post/7125746860567822350)开始了解vite插件的钩子，我们需要开启一个服务去支持mock能力，需要用到`devServer`，很明显我们需要在`configureServer`这个钩子里面写，且需要mock数据的路径\n\n所以我们初始化的插件函数需要做两件事情：\n- 需要options参数入口，且为空的时候要给默认的入口\n- 在return的对象要用到`configureServer`的`server.middlewares`\n\n> server.middlewares相当于`express`的`app`\n\n~~~js\nimport path from 'path';\n\nexport default function (options = {}) {\n  // 获取mock文件入口，默认index\n  options.entry = options.entry || './mock/index.js';\n\n  // 转换为绝对路径\n  if (!path.isAbsolute(options.entry)) {\n    options.entry = path.resolve(process.cwd(), options.entry);\n  }\n\n  return {\n    configureServer: function ({ middlewares: app }) {\n        // 定义中间件：路由匹配\n      const middleware = (req, res, next) => {\n\n      };\n      app.use(middleware);\n    }\n  };\n}\n~~~\n\n再给我们的mock也初始下,下面看到我们是用的ES Moudle抛出方式，因为vite是不支持commonJS模块。所以我们需要用到`export default`，不能用到`module.exports`，本人亲测自己写一个支持require的插件也作用不到`mock`这个插件。（一个伤心的经历）\n\n~~~js\n// /mock/index.js\nexport default [\n  {\n    url: '/api/users',\n    type: 'get',\n    response: function (req, res) {\n      return res.send([\n        {\n          username: 'tom',\n          age: 18,\n        },\n        {\n          username: 'Tom',\n          age: 19,\n        },\n      ]);\n    },\n  },\n];\n~~~\n\n### 创建路由表\n\n我们需要的路由表是这种结构，一个方法对应多个路由，所以我们需要创建路由表。\n\n~~~json\n{\n    \"get\": [\n        {\n            \"url\": \"/api/1\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n        {\n            \"url\": \"/api/2\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n    ],\n    \"post\": [\n        {\n            \"url\": \"/api/1\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n        {\n            \"url\": \"/api/2\",\n            \"type\": \"get\",\n            \"response\": function \n        },\n    ]\n}\n~~~\n\n首先获取路由，我们不能用require，所以用import. 但import是异步的，那么我们需要加上async/await等待加载完模块，用解构的方式获取mockObj\n\n~~~js\n...\nreturn {\n    configureServer: function ({ middlewares: app }) {\n        // 定义路由表\n        const mockObj = { ...(await import(options.entry)) }.default;\n        // 创建路由表\n        createRoute(mockObj);\n\n        ....\n         // 定义中间件：路由匹配\n        const middleware = (req, res, next) => {\n\n        };\n        app.use(middleware)\n    }\n};\n...\n~~~\n\n那么我们现在开始写`createRoute`函数，多尝试，也就一个简单的变量处理，下列写成函数如下：\n\n~~~js\nfunction createRoute(mockConfList) {\n  mockConfList.forEach((mockConf) => {\n    let method = mockConf.type || 'get';\n    let path = mockConf.url;\n    let handler = mockConf.response;\n    // 路由对象\n    let route = { path, method: method.toLowerCase(), handler };\n    // 如果没有改请求方法就初始化为空数组\n    if (!mockRouteMap[method]) {\n      mockRouteMap[method] = [];\n    }\n    console.log('create mock api: ', route.method, route.path);\n    // 存入映射对象中\n    mockRouteMap[method].push(route);\n  });\n}\n~~~\n创建完路由表，需要中间件里面的逻辑,也就是破路由和send数据到路由上面了。\n\n### 执行匹配路由和自定义send\n我们接下的逻辑可以这样写，先获取路由匹配的结果，如果匹配成功就send \n\n~~~js\n...\nreturn {\n    configureServer: async function ({ middlewares: app }) {\n      // 定义路由表\n      const mockObj = { ...(await import(options.entry)) }.default;\n      // 创建路由表\n      createRoute(mockObj);\n\n      // 定义中间件：路由匹配\n      const middleware = (req, res, next) => {\n        // 1. 执行匹配过程\n        let route = matchRoute(req);\n\n        // 2. 存在匹配，则这个是一个mock请求\n        if (route) {\n          console.log('mock request', route.method, route.path);\n          // 自定义send\n          res.send = send;\n          // 执行路由的`response`回调函数，可以把代码往前翻\n          route.handler(req, res);\n        } else {\n          next();\n        }\n      };\n      app.use(middleware);\n    },\n};\n\n...\n~~~\n\n#### 匹配路由\n\n根据我们浏览器请求的路由去匹配路由信息\n\n~~~js\nfunction matchRoute(req) {\n  let url = req.url;\n  let method = req.method.toLowerCase();\n  let routeList = mockRouteMap[method];\n\n  return routeList && routeList.find((item) => item.path === url);\n}\n~~~\n\n我们请求一个试下：\n\n`成功匹配`:\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e09bdc4eda6c458c90290fef6420279b~tplv-k3u1fbpfcp-watermark.image?)\n\n\n#### 自定义send\n\n这里自定义send我们可以添加请求头字段，能够知道请求的东西的类型，长度等信息\n\n~~~js\nfunction send(body) {\n  let chunk = JSON.stringify(body);\n  // Content-Length\n  if (chunk) {\n    chunk = Buffer.from(chunk, 'utf-8');\n    this.setHeader('Content-Length', chunk.length);\n  }\n  // content-type\n  this.setHeader('Content-Type', 'application/json');\n  // status\n  this.statusCode = 200;\n  // response\n  this.end(chunk, 'utf8');\n}\n~~~\n\n### 总结\n\nvite插件的掌握还是需要写些插件，看看别人的源码，了解为什么这么写，自己之后可以这样写。根据自己需求出去，应用到实践中去。\n\n","slug":"vite/vite-mock-plugin","published":1,"updated":"2023-07-30T18:20:46.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpzm7ok0001aul1gmbs8219","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"手写一个vite-mock插件（篇二）\"><a href=\"#手写一个vite-mock插件（篇二）\" class=\"headerlink\" title=\"手写一个vite mock插件（篇二）\"></a>手写一个vite mock插件（篇二）</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里先给demo地址，可以直接看源码：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/vite/vite-mock-plugin\">demo地址</a></p>\n<h3 id=\"编写思路\"><a href=\"#编写思路\" class=\"headerlink\" title=\"编写思路\"></a>编写思路</h3><ul>\n<li>一开始干嘛？初始化。mock插件初始化什么，入口和能支持mock能力的devServer</li>\n<li>初始化完了，发现是不是有post，get等方法的路由请求，需不要给它分类？需要</li>\n<li>那怎么分类？考完重构一个对象的能力，是不是<code>so easy</code>.</li>\n<li>分为类是不是需要判断是否有效？有效就返回mock数据，无效执行下一个中间件</li>\n<li>前期这样想完全没有问题。</li>\n</ul>\n<p>来一条华丽的分割线</p>\n<hr>\n<p>后期发现问题：</p>\n<ul>\n<li>发现中间件的next方法和res.send方法同时执行或导致程序中断</li>\n</ul>\n<p>解决这个问题我们需要判断路由是否有效，且不能在无效的时候去send和mock（假装自己知道就好了）</p>\n<ul>\n<li>send函数在请求的时候需要给相应的信息，所以需要二次封装</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>我们从<a href=\"https://juejin.cn/post/7125746860567822350\">vite初始篇一</a>开始了解vite插件的钩子，我们需要开启一个服务去支持mock能力，需要用到<code>devServer</code>，很明显我们需要在<code>configureServer</code>这个钩子里面写，且需要mock数据的路径</p>\n<p>所以我们初始化的插件函数需要做两件事情：</p>\n<ul>\n<li>需要options参数入口，且为空的时候要给默认的入口</li>\n<li>在return的对象要用到<code>configureServer</code>的<code>server.middlewares</code></li>\n</ul>\n<blockquote>\n<p>server.middlewares相当于<code>express</code>的<code>app</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取mock文件入口，默认index</span></span><br><span class=\"line\">  options.<span class=\"property\">entry</span> = options.<span class=\"property\">entry</span> || <span class=\"string\">&#x27;./mock/index.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 转换为绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!path.<span class=\"title function_\">isAbsolute</span>(options.<span class=\"property\">entry</span>)) &#123;</span><br><span class=\"line\">    options.<span class=\"property\">entry</span> = path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), options.<span class=\"property\">entry</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      app.<span class=\"title function_\">use</span>(middleware);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再给我们的mock也初始下,下面看到我们是用的ES Moudle抛出方式，因为vite是不支持commonJS模块。所以我们需要用到<code>export default</code>，不能用到<code>module.exports</code>，本人亲测自己写一个支持require的插件也作用不到<code>mock</code>这个插件。（一个伤心的经历）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /mock/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">response</span>: <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>([</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">username</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">username</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建路由表\"><a href=\"#创建路由表\" class=\"headerlink\" title=\"创建路由表\"></a>创建路由表</h3><p>我们需要的路由表是这种结构，一个方法对应多个路由，所以我们需要创建路由表。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;get&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;post&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先获取路由，我们不能用require，所以用import. 但import是异步的，那么我们需要加上async&#x2F;await等待加载完模块，用解构的方式获取mockObj</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义路由表</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> mockObj = &#123; ...(<span class=\"keyword\">await</span> <span class=\"title function_\">import</span>(options.<span class=\"property\">entry</span>)) &#125;.<span class=\"property\">default</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建路由表</span></span><br><span class=\"line\">        <span class=\"title function_\">createRoute</span>(mockObj);</span><br><span class=\"line\"></span><br><span class=\"line\">        ....</span><br><span class=\"line\">         <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        app.<span class=\"title function_\">use</span>(middleware)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>那么我们现在开始写<code>createRoute</code>函数，多尝试，也就一个简单的变量处理，下列写成函数如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createRoute</span>(<span class=\"params\">mockConfList</span>) &#123;</span><br><span class=\"line\">  mockConfList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">mockConf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = mockConf.<span class=\"property\">type</span> || <span class=\"string\">&#x27;get&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = mockConf.<span class=\"property\">url</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = mockConf.<span class=\"property\">response</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 路由对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> route = &#123; path, <span class=\"attr\">method</span>: method.<span class=\"title function_\">toLowerCase</span>(), handler &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有改请求方法就初始化为空数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mockRouteMap[method]) &#123;</span><br><span class=\"line\">      mockRouteMap[method] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;create mock api: &#x27;</span>, route.<span class=\"property\">method</span>, route.<span class=\"property\">path</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 存入映射对象中</span></span><br><span class=\"line\">    mockRouteMap[method].<span class=\"title function_\">push</span>(route);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建完路由表，需要中间件里面的逻辑,也就是破路由和send数据到路由上面了。</p>\n<h3 id=\"执行匹配路由和自定义send\"><a href=\"#执行匹配路由和自定义send\" class=\"headerlink\" title=\"执行匹配路由和自定义send\"></a>执行匹配路由和自定义send</h3><p>我们接下的逻辑可以这样写，先获取路由匹配的结果，如果匹配成功就send </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义路由表</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> mockObj = &#123; ...(<span class=\"keyword\">await</span> <span class=\"title function_\">import</span>(options.<span class=\"property\">entry</span>)) &#125;.<span class=\"property\">default</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 创建路由表</span></span><br><span class=\"line\">      <span class=\"title function_\">createRoute</span>(mockObj);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 执行匹配过程</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> route = <span class=\"title function_\">matchRoute</span>(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 存在匹配，则这个是一个mock请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (route) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;mock request&#x27;</span>, route.<span class=\"property\">method</span>, route.<span class=\"property\">path</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 自定义send</span></span><br><span class=\"line\">          res.<span class=\"property\">send</span> = send;</span><br><span class=\"line\">          <span class=\"comment\">// 执行路由的`response`回调函数，可以把代码往前翻</span></span><br><span class=\"line\">          route.<span class=\"title function_\">handler</span>(req, res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">next</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      app.<span class=\"title function_\">use</span>(middleware);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配路由\"><a href=\"#匹配路由\" class=\"headerlink\" title=\"匹配路由\"></a>匹配路由</h4><p>根据我们浏览器请求的路由去匹配路由信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">matchRoute</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = req.<span class=\"property\">url</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> method = req.<span class=\"property\">method</span>.<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> routeList = mockRouteMap[method];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> routeList &amp;&amp; routeList.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">path</span> === url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们请求一个试下：</p>\n<p><code>成功匹配</code>:</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e09bdc4eda6c458c90290fef6420279b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"自定义send\"><a href=\"#自定义send\" class=\"headerlink\" title=\"自定义send\"></a>自定义send</h4><p>这里自定义send我们可以添加请求头字段，能够知道请求的东西的类型，长度等信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">send</span>(<span class=\"params\">body</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(body);</span><br><span class=\"line\">  <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (chunk) &#123;</span><br><span class=\"line\">    chunk = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(chunk, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Length&#x27;</span>, chunk.<span class=\"property\">length</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// content-type</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// status</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">  <span class=\"comment\">// response</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">end</span>(chunk, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>vite插件的掌握还是需要写些插件，看看别人的源码，了解为什么这么写，自己之后可以这样写。根据自己需求出去，应用到实践中去。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"手写一个vite-mock插件（篇二）\"><a href=\"#手写一个vite-mock插件（篇二）\" class=\"headerlink\" title=\"手写一个vite mock插件（篇二）\"></a>手写一个vite mock插件（篇二）</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里先给demo地址，可以直接看源码：<a href=\"https://github.com/kangkang123269/kate-demo/tree/main/vite/vite-mock-plugin\">demo地址</a></p>\n<h3 id=\"编写思路\"><a href=\"#编写思路\" class=\"headerlink\" title=\"编写思路\"></a>编写思路</h3><ul>\n<li>一开始干嘛？初始化。mock插件初始化什么，入口和能支持mock能力的devServer</li>\n<li>初始化完了，发现是不是有post，get等方法的路由请求，需不要给它分类？需要</li>\n<li>那怎么分类？考完重构一个对象的能力，是不是<code>so easy</code>.</li>\n<li>分为类是不是需要判断是否有效？有效就返回mock数据，无效执行下一个中间件</li>\n<li>前期这样想完全没有问题。</li>\n</ul>\n<p>来一条华丽的分割线</p>\n<hr>\n<p>后期发现问题：</p>\n<ul>\n<li>发现中间件的next方法和res.send方法同时执行或导致程序中断</li>\n</ul>\n<p>解决这个问题我们需要判断路由是否有效，且不能在无效的时候去send和mock（假装自己知道就好了）</p>\n<ul>\n<li>send函数在请求的时候需要给相应的信息，所以需要二次封装</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>我们从<a href=\"https://juejin.cn/post/7125746860567822350\">vite初始篇一</a>开始了解vite插件的钩子，我们需要开启一个服务去支持mock能力，需要用到<code>devServer</code>，很明显我们需要在<code>configureServer</code>这个钩子里面写，且需要mock数据的路径</p>\n<p>所以我们初始化的插件函数需要做两件事情：</p>\n<ul>\n<li>需要options参数入口，且为空的时候要给默认的入口</li>\n<li>在return的对象要用到<code>configureServer</code>的<code>server.middlewares</code></li>\n</ul>\n<blockquote>\n<p>server.middlewares相当于<code>express</code>的<code>app</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取mock文件入口，默认index</span></span><br><span class=\"line\">  options.<span class=\"property\">entry</span> = options.<span class=\"property\">entry</span> || <span class=\"string\">&#x27;./mock/index.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 转换为绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!path.<span class=\"title function_\">isAbsolute</span>(options.<span class=\"property\">entry</span>)) &#123;</span><br><span class=\"line\">    options.<span class=\"property\">entry</span> = path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), options.<span class=\"property\">entry</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      app.<span class=\"title function_\">use</span>(middleware);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再给我们的mock也初始下,下面看到我们是用的ES Moudle抛出方式，因为vite是不支持commonJS模块。所以我们需要用到<code>export default</code>，不能用到<code>module.exports</code>，本人亲测自己写一个支持require的插件也作用不到<code>mock</code>这个插件。（一个伤心的经历）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /mock/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">response</span>: <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>([</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">username</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">username</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建路由表\"><a href=\"#创建路由表\" class=\"headerlink\" title=\"创建路由表\"></a>创建路由表</h3><p>我们需要的路由表是这种结构，一个方法对应多个路由，所以我们需要创建路由表。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;get&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;post&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;response&quot;</span><span class=\"punctuation\">:</span> function </span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先获取路由，我们不能用require，所以用import. 但import是异步的，那么我们需要加上async&#x2F;await等待加载完模块，用解构的方式获取mockObj</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义路由表</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> mockObj = &#123; ...(<span class=\"keyword\">await</span> <span class=\"title function_\">import</span>(options.<span class=\"property\">entry</span>)) &#125;.<span class=\"property\">default</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建路由表</span></span><br><span class=\"line\">        <span class=\"title function_\">createRoute</span>(mockObj);</span><br><span class=\"line\"></span><br><span class=\"line\">        ....</span><br><span class=\"line\">         <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        app.<span class=\"title function_\">use</span>(middleware)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>那么我们现在开始写<code>createRoute</code>函数，多尝试，也就一个简单的变量处理，下列写成函数如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createRoute</span>(<span class=\"params\">mockConfList</span>) &#123;</span><br><span class=\"line\">  mockConfList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">mockConf</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = mockConf.<span class=\"property\">type</span> || <span class=\"string\">&#x27;get&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = mockConf.<span class=\"property\">url</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = mockConf.<span class=\"property\">response</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 路由对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> route = &#123; path, <span class=\"attr\">method</span>: method.<span class=\"title function_\">toLowerCase</span>(), handler &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有改请求方法就初始化为空数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mockRouteMap[method]) &#123;</span><br><span class=\"line\">      mockRouteMap[method] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;create mock api: &#x27;</span>, route.<span class=\"property\">method</span>, route.<span class=\"property\">path</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 存入映射对象中</span></span><br><span class=\"line\">    mockRouteMap[method].<span class=\"title function_\">push</span>(route);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建完路由表，需要中间件里面的逻辑,也就是破路由和send数据到路由上面了。</p>\n<h3 id=\"执行匹配路由和自定义send\"><a href=\"#执行匹配路由和自定义send\" class=\"headerlink\" title=\"执行匹配路由和自定义send\"></a>执行匹配路由和自定义send</h3><p>我们接下的逻辑可以这样写，先获取路由匹配的结果，如果匹配成功就send </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureServer</span>: <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义路由表</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> mockObj = &#123; ...(<span class=\"keyword\">await</span> <span class=\"title function_\">import</span>(options.<span class=\"property\">entry</span>)) &#125;.<span class=\"property\">default</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 创建路由表</span></span><br><span class=\"line\">      <span class=\"title function_\">createRoute</span>(mockObj);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 定义中间件：路由匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">middleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 执行匹配过程</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> route = <span class=\"title function_\">matchRoute</span>(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 存在匹配，则这个是一个mock请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (route) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;mock request&#x27;</span>, route.<span class=\"property\">method</span>, route.<span class=\"property\">path</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 自定义send</span></span><br><span class=\"line\">          res.<span class=\"property\">send</span> = send;</span><br><span class=\"line\">          <span class=\"comment\">// 执行路由的`response`回调函数，可以把代码往前翻</span></span><br><span class=\"line\">          route.<span class=\"title function_\">handler</span>(req, res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">next</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      app.<span class=\"title function_\">use</span>(middleware);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配路由\"><a href=\"#匹配路由\" class=\"headerlink\" title=\"匹配路由\"></a>匹配路由</h4><p>根据我们浏览器请求的路由去匹配路由信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">matchRoute</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = req.<span class=\"property\">url</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> method = req.<span class=\"property\">method</span>.<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> routeList = mockRouteMap[method];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> routeList &amp;&amp; routeList.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">path</span> === url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们请求一个试下：</p>\n<p><code>成功匹配</code>:</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e09bdc4eda6c458c90290fef6420279b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"自定义send\"><a href=\"#自定义send\" class=\"headerlink\" title=\"自定义send\"></a>自定义send</h4><p>这里自定义send我们可以添加请求头字段，能够知道请求的东西的类型，长度等信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">send</span>(<span class=\"params\">body</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(body);</span><br><span class=\"line\">  <span class=\"comment\">// Content-Length</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (chunk) &#123;</span><br><span class=\"line\">    chunk = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(chunk, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Length&#x27;</span>, chunk.<span class=\"property\">length</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// content-type</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// status</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">  <span class=\"comment\">// response</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">end</span>(chunk, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>vite插件的掌握还是需要写些插件，看看别人的源码，了解为什么这么写，自己之后可以这样写。根据自己需求出去，应用到实践中去。</p>\n"},{"title":"在Vue中使用keep-alive","description":"在Vue中使用keep-alive","date":"2022-07-26T16:00:00.000Z","cover":"https://is.gd/YEdGdo","_content":"\n# 在Vue中使用keep-alive\n\n### 一、路由router添加meta配置\n\n~~~js\nconst routes = [\n  {\n    path: '/keepalive',\n    name: 'keepalive',\n    component: ()=>import('../views/keepalive.vue'),\n    meta: {\n          keepAlive: false //设置页面是否需要使用缓存\n    }\n  }\n]\n~~~\n\n### 二、在Vue2.0的keep-alive的使用\nvue2.0中直接在你想要做缓存的位置，一般使用场景为配合router-view进行使用。\n~~~js\n<template>\n    <!-- vue2.x配置 --> \n    <keep-alive> \n        <router-view v-if=\"$route.meta.keepAlive\" /> \n    </keep-alive> \n    <router-view v-if=\"!$route.meta.keepAlive\"/> \n</template>\n~~~\n\n### 三、在Vue3.0的keep-alive的使用\nVue3.0配合的slot插槽使用，使用is来绑定对应路由的组件。\n\n> 修改添加key值的绑定，如果不加key值无法实现页面缓存。\n~~~js\n<template> \n    <!-- vue3.0配置 --> \n    <router-view v-slot=\"{ Component }\"> \n    <keep-alive> \n        <component :is=\"Component\" :key=\"$route.name\" v-if=\"$route.meta.keepAlive\"/> \n    </keep-alive> \n        <component :is=\"Component\" :key=\"$route.name\" v-if=\"!$route.meta.keepAlive\"/> \n    </router-view> \n</template>\n~~~","source":"_posts/vue/keep-alive.md","raw":"---\ntitle: 在Vue中使用keep-alive\ntags: [前端,Vue,前端性能优化]\ncategories: [Vue]\ndescription: 在Vue中使用keep-alive\ndate: 2022-07-27\ncover: https://is.gd/YEdGdo\n---\n\n# 在Vue中使用keep-alive\n\n### 一、路由router添加meta配置\n\n~~~js\nconst routes = [\n  {\n    path: '/keepalive',\n    name: 'keepalive',\n    component: ()=>import('../views/keepalive.vue'),\n    meta: {\n          keepAlive: false //设置页面是否需要使用缓存\n    }\n  }\n]\n~~~\n\n### 二、在Vue2.0的keep-alive的使用\nvue2.0中直接在你想要做缓存的位置，一般使用场景为配合router-view进行使用。\n~~~js\n<template>\n    <!-- vue2.x配置 --> \n    <keep-alive> \n        <router-view v-if=\"$route.meta.keepAlive\" /> \n    </keep-alive> \n    <router-view v-if=\"!$route.meta.keepAlive\"/> \n</template>\n~~~\n\n### 三、在Vue3.0的keep-alive的使用\nVue3.0配合的slot插槽使用，使用is来绑定对应路由的组件。\n\n> 修改添加key值的绑定，如果不加key值无法实现页面缓存。\n~~~js\n<template> \n    <!-- vue3.0配置 --> \n    <router-view v-slot=\"{ Component }\"> \n    <keep-alive> \n        <component :is=\"Component\" :key=\"$route.name\" v-if=\"$route.meta.keepAlive\"/> \n    </keep-alive> \n        <component :is=\"Component\" :key=\"$route.name\" v-if=\"!$route.meta.keepAlive\"/> \n    </router-view> \n</template>\n~~~","slug":"vue/keep-alive","published":1,"updated":"2023-07-30T18:19:53.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkpzm7ol0003aul1cnmkeugr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"在Vue中使用keep-alive\"><a href=\"#在Vue中使用keep-alive\" class=\"headerlink\" title=\"在Vue中使用keep-alive\"></a>在Vue中使用keep-alive</h1><h3 id=\"一、路由router添加meta配置\"><a href=\"#一、路由router添加meta配置\" class=\"headerlink\" title=\"一、路由router添加meta配置\"></a>一、路由router添加meta配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/keepalive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;keepalive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"title function_\">import</span>(<span class=\"string\">&#x27;../views/keepalive.vue&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">keepAlive</span>: <span class=\"literal\">false</span> <span class=\"comment\">//设置页面是否需要使用缓存</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、在Vue2-0的keep-alive的使用\"><a href=\"#二、在Vue2-0的keep-alive的使用\" class=\"headerlink\" title=\"二、在Vue2.0的keep-alive的使用\"></a>二、在Vue2.0的keep-alive的使用</h3><p>vue2.0中直接在你想要做缓存的位置，一般使用场景为配合router-view进行使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;!-- vue2.<span class=\"property\">x</span>配置 --&gt; </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span> /&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span> </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、在Vue3-0的keep-alive的使用\"><a href=\"#三、在Vue3-0的keep-alive的使用\" class=\"headerlink\" title=\"三、在Vue3.0的keep-alive的使用\"></a>三、在Vue3.0的keep-alive的使用</h3><p>Vue3.0配合的slot插槽使用，使用is来绑定对应路由的组件。</p>\n<blockquote>\n<p>修改添加key值的绑定，如果不加key值无法实现页面缓存。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;!-- vue3<span class=\"number\">.0</span>配置 --&gt; </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;&#123; Component &#125;&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;Component&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.name&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;Component&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.name&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"在Vue中使用keep-alive\"><a href=\"#在Vue中使用keep-alive\" class=\"headerlink\" title=\"在Vue中使用keep-alive\"></a>在Vue中使用keep-alive</h1><h3 id=\"一、路由router添加meta配置\"><a href=\"#一、路由router添加meta配置\" class=\"headerlink\" title=\"一、路由router添加meta配置\"></a>一、路由router添加meta配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/keepalive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;keepalive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"title function_\">import</span>(<span class=\"string\">&#x27;../views/keepalive.vue&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">keepAlive</span>: <span class=\"literal\">false</span> <span class=\"comment\">//设置页面是否需要使用缓存</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、在Vue2-0的keep-alive的使用\"><a href=\"#二、在Vue2-0的keep-alive的使用\" class=\"headerlink\" title=\"二、在Vue2.0的keep-alive的使用\"></a>二、在Vue2.0的keep-alive的使用</h3><p>vue2.0中直接在你想要做缓存的位置，一般使用场景为配合router-view进行使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;!-- vue2.<span class=\"property\">x</span>配置 --&gt; </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span> /&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span> </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、在Vue3-0的keep-alive的使用\"><a href=\"#三、在Vue3-0的keep-alive的使用\" class=\"headerlink\" title=\"三、在Vue3.0的keep-alive的使用\"></a>三、在Vue3.0的keep-alive的使用</h3><p>Vue3.0配合的slot插槽使用，使用is来绑定对应路由的组件。</p>\n<blockquote>\n<p>修改添加key值的绑定，如果不加key值无法实现页面缓存。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;!-- vue3<span class=\"number\">.0</span>配置 --&gt; </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;&#123; Component &#125;&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;Component&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.name&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;Component&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.name&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>"},{"title":"vue-next-min框架雏形搭建","description":"vue-next-min框架雏形搭建","date":"2023-07-31T16:00:00.000Z","_content":"\n### packages 目录结构介绍\n\n- compiler-core： 编辑器核心\n- compiler-dom：浏览器部分编辑器模块\n- reactivity：响应式核心\n- runtime-core：运行时核心\n- runtime-dom：浏览器部分运行时模块\n- shared：公共方法文件\n\n> 每个文件对应入口均为 src/index.ts\n\n### package.json 配置\n\n```json\n{\n  \"name\": \"vue-next-mini\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@rollup/plugin-commonjs\": \"^22.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^13.3.0\",\n    \"@rollup/plugin-typescript\": \"^8.3.4\",\n    \"rollup\": \"^2.79.1\",\n    \"tslib\": \"^2.4.0\",\n    \"typescript\": \"^4.7.4\"\n  }\n}\n```\n\n### typescript.json 配置\n\n```json\n{\n  // 编辑器配置\n  \"compilerOptions\": {\n    // 根目录\n    \"rootDir\": \".\",\n    // 严格模式标志\n    \"strict\": true,\n    // 指定类型脚本如何从给定的模块说明符查找文件\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    // JS 语言版本\n    \"target\": \"es5\",\n    // 允许未读取局部变量\n    \"noUnusedLocals\": false,\n    // 允许未读取的参数\n    \"noUnusedParameters\": false,\n    // 运行解析 json\n    \"resolveJsonModule\": true,\n    // 支持语法跌代\n    \"downlevelIteration\": true,\n    // 允许使用隐式的 any 类型\n    \"noImplicitAny\": false,\n    // 模块化\n    \"module\": \"esnext\",\n    // 转换为 JavaScript 时从 typescript 文件中删除所有注释\n    \"removeComments\": false,\n    // 禁用sourceMMap\n    \"sourceMap\": false,\n    \"lib\": [\"esnext\", \"dom\"],\n    // 设置快捷导入\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@vue/*\": [\"packages/*/src\"]\n    }\n  },\n  // 入口\n  \"include\": [\"packages/*/src\"]\n}\n```\n\n### rollup.config.js 配置\n\n```ts\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport commonjs from \"@rollup/plugin-commonjs\";\nimport typescript from \"@rollup/plugin-typescript\";\n\nexport default [\n  {\n    // 入口文件\n    input: \"packages/vue/src/index.ts\",\n    // 打包出口\n    output: [\n      // 导出iife模式的包\n      {\n        // 开启sourceMap\n        sourcemap: true,\n        // 导出文件地址\n        file: \"./packages/vue/dist/vue.js\",\n        // 生成包的格式\n        format: \"iife\",\n        // 变量名\n        name: \"Vue\",\n      },\n    ],\n    // 插件\n    plugins: [\n      // ts\n      typescript({\n        sourceMap: true,\n      }),\n      // 模块导入的路径补全\n      resolve(),\n      // 转 commonjs 为 ESM\n      commonjs(),\n    ],\n  },\n];\n```\n\n> 线上项目地址：https://github.com/kangkang123269/vue-next-mini\n> 学习链接：https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\n","source":"_posts/Vue3深入/框架雏形搭建.md","raw":"---\ntitle: vue-next-min框架雏形搭建\ntags: [Vue深入]\ncategories: [Vue深入]\ndescription: vue-next-min框架雏形搭建\ndate: 2023-08-01\n---\n\n### packages 目录结构介绍\n\n- compiler-core： 编辑器核心\n- compiler-dom：浏览器部分编辑器模块\n- reactivity：响应式核心\n- runtime-core：运行时核心\n- runtime-dom：浏览器部分运行时模块\n- shared：公共方法文件\n\n> 每个文件对应入口均为 src/index.ts\n\n### package.json 配置\n\n```json\n{\n  \"name\": \"vue-next-mini\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@rollup/plugin-commonjs\": \"^22.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^13.3.0\",\n    \"@rollup/plugin-typescript\": \"^8.3.4\",\n    \"rollup\": \"^2.79.1\",\n    \"tslib\": \"^2.4.0\",\n    \"typescript\": \"^4.7.4\"\n  }\n}\n```\n\n### typescript.json 配置\n\n```json\n{\n  // 编辑器配置\n  \"compilerOptions\": {\n    // 根目录\n    \"rootDir\": \".\",\n    // 严格模式标志\n    \"strict\": true,\n    // 指定类型脚本如何从给定的模块说明符查找文件\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    // JS 语言版本\n    \"target\": \"es5\",\n    // 允许未读取局部变量\n    \"noUnusedLocals\": false,\n    // 允许未读取的参数\n    \"noUnusedParameters\": false,\n    // 运行解析 json\n    \"resolveJsonModule\": true,\n    // 支持语法跌代\n    \"downlevelIteration\": true,\n    // 允许使用隐式的 any 类型\n    \"noImplicitAny\": false,\n    // 模块化\n    \"module\": \"esnext\",\n    // 转换为 JavaScript 时从 typescript 文件中删除所有注释\n    \"removeComments\": false,\n    // 禁用sourceMMap\n    \"sourceMap\": false,\n    \"lib\": [\"esnext\", \"dom\"],\n    // 设置快捷导入\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@vue/*\": [\"packages/*/src\"]\n    }\n  },\n  // 入口\n  \"include\": [\"packages/*/src\"]\n}\n```\n\n### rollup.config.js 配置\n\n```ts\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport commonjs from \"@rollup/plugin-commonjs\";\nimport typescript from \"@rollup/plugin-typescript\";\n\nexport default [\n  {\n    // 入口文件\n    input: \"packages/vue/src/index.ts\",\n    // 打包出口\n    output: [\n      // 导出iife模式的包\n      {\n        // 开启sourceMap\n        sourcemap: true,\n        // 导出文件地址\n        file: \"./packages/vue/dist/vue.js\",\n        // 生成包的格式\n        format: \"iife\",\n        // 变量名\n        name: \"Vue\",\n      },\n    ],\n    // 插件\n    plugins: [\n      // ts\n      typescript({\n        sourceMap: true,\n      }),\n      // 模块导入的路径补全\n      resolve(),\n      // 转 commonjs 为 ESM\n      commonjs(),\n    ],\n  },\n];\n```\n\n> 线上项目地址：https://github.com/kangkang123269/vue-next-mini\n> 学习链接：https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\n","slug":"Vue3深入/框架雏形搭建","published":1,"updated":"2023-07-31T04:43:36.120Z","_id":"clkqdvm4d00004ol1b6hvajkt","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"packages-目录结构介绍\"><a href=\"#packages-目录结构介绍\" class=\"headerlink\" title=\"packages 目录结构介绍\"></a>packages 目录结构介绍</h3><ul>\n<li>compiler-core： 编辑器核心</li>\n<li>compiler-dom：浏览器部分编辑器模块</li>\n<li>reactivity：响应式核心</li>\n<li>runtime-core：运行时核心</li>\n<li>runtime-dom：浏览器部分运行时模块</li>\n<li>shared：公共方法文件</li>\n</ul>\n<blockquote>\n<p>每个文件对应入口均为 src&#x2F;index.ts</p>\n</blockquote>\n<h3 id=\"package-json-配置\"><a href=\"#package-json-配置\" class=\"headerlink\" title=\"package.json 配置\"></a>package.json 配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-next-mini&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rollup -c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-commonjs&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^22.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-node-resolve&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^13.3.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-typescript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.3.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rollup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.79.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tslib&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.4.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typescript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.7.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"typescript-json-配置\"><a href=\"#typescript-json-配置\" class=\"headerlink\" title=\"typescript.json 配置\"></a>typescript.json 配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 编辑器配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 根目录</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rootDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 严格模式标志</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 指定类型脚本如何从给定的模块说明符查找文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// JS 语言版本</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许未读取局部变量</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许未读取的参数</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedParameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 运行解析 json</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 支持语法跌代</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;downlevelIteration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许使用隐式的 any 类型</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 模块化</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换为 JavaScript 时从 typescript 文件中删除所有注释</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 禁用sourceMMap</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置快捷导入</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@vue/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;packages/*/src&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;packages/*/src&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rollup-config-js-配置\"><a href=\"#rollup-config-js-配置\" class=\"headerlink\" title=\"rollup.config.js 配置\"></a>rollup.config.js 配置</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> resolve <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-commonjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> typescript <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">input</span>: <span class=\"string\">&quot;packages/vue/src/index.ts&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 打包出口</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 导出iife模式的包</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启sourceMap</span></span><br><span class=\"line\">        <span class=\"attr\">sourcemap</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 导出文件地址</span></span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&quot;./packages/vue/dist/vue.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 生成包的格式</span></span><br><span class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">&quot;iife&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 变量名</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// 插件</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ts</span></span><br><span class=\"line\">      <span class=\"title function_\">typescript</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">// 模块导入的路径补全</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(),</span><br><span class=\"line\">      <span class=\"comment\">// 转 commonjs 为 ESM</span></span><br><span class=\"line\">      <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>线上项目地址：<a href=\"https://github.com/kangkang123269/vue-next-mini\">https://github.com/kangkang123269/vue-next-mini</a><br>学习链接：<a href=\"https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p>\n</blockquote>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"packages-目录结构介绍\"><a href=\"#packages-目录结构介绍\" class=\"headerlink\" title=\"packages 目录结构介绍\"></a>packages 目录结构介绍</h3><ul>\n<li>compiler-core： 编辑器核心</li>\n<li>compiler-dom：浏览器部分编辑器模块</li>\n<li>reactivity：响应式核心</li>\n<li>runtime-core：运行时核心</li>\n<li>runtime-dom：浏览器部分运行时模块</li>\n<li>shared：公共方法文件</li>\n</ul>\n<blockquote>\n<p>每个文件对应入口均为 src&#x2F;index.ts</p>\n</blockquote>\n<h3 id=\"package-json-配置\"><a href=\"#package-json-配置\" class=\"headerlink\" title=\"package.json 配置\"></a>package.json 配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-next-mini&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rollup -c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-commonjs&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^22.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-node-resolve&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^13.3.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@rollup/plugin-typescript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.3.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rollup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.79.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tslib&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.4.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typescript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.7.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"typescript-json-配置\"><a href=\"#typescript-json-配置\" class=\"headerlink\" title=\"typescript.json 配置\"></a>typescript.json 配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 编辑器配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 根目录</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rootDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 严格模式标志</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 指定类型脚本如何从给定的模块说明符查找文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// JS 语言版本</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许未读取局部变量</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许未读取的参数</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedParameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 运行解析 json</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 支持语法跌代</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;downlevelIteration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 允许使用隐式的 any 类型</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 模块化</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换为 JavaScript 时从 typescript 文件中删除所有注释</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 禁用sourceMMap</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置快捷导入</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@vue/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;packages/*/src&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;packages/*/src&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rollup-config-js-配置\"><a href=\"#rollup-config-js-配置\" class=\"headerlink\" title=\"rollup.config.js 配置\"></a>rollup.config.js 配置</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> resolve <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-commonjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> typescript <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rollup/plugin-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">input</span>: <span class=\"string\">&quot;packages/vue/src/index.ts&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 打包出口</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 导出iife模式的包</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启sourceMap</span></span><br><span class=\"line\">        <span class=\"attr\">sourcemap</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 导出文件地址</span></span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&quot;./packages/vue/dist/vue.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 生成包的格式</span></span><br><span class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">&quot;iife&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 变量名</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// 插件</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ts</span></span><br><span class=\"line\">      <span class=\"title function_\">typescript</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">// 模块导入的路径补全</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(),</span><br><span class=\"line\">      <span class=\"comment\">// 转 commonjs 为 ESM</span></span><br><span class=\"line\">      <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>线上项目地址：<a href=\"https://github.com/kangkang123269/vue-next-mini\">https://github.com/kangkang123269/vue-next-mini</a><br>学习链接：<a href=\"https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666\">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p>\n</blockquote>\n"},{"title":"dom转PDF方案","description":"记录下dom转PDF方案","date":"2023-09-05T16:00:00.000Z","_content":"\n# dom 转 PDF 方案\n\n### 全局打印\n\n```js\nwindow.print();\n```\n\n### iframe 打开 dom 元素\n\n```js\nfunction printElement(e) {\n  var ifr = document.createElement(\"iframe\");\n  ifr.style = \"height: 0px; width: 0px; position: absolute\";\n  document.body.appendChild(ifr);\n  ifr.contentDocument.body.appendChild(e.cloneNode(true));\n  ifr.contentWindow.print();\n\n  ifr.parentElement.removeChild(ifr);\n}\nvar style = document.createElement(\"style\");\nstyle.innerText = \"* { color: red; }\";\nvar img = document.createElement(\"img\");\nimg.height = 300;\nimg.width = 300;\nimg.src = \"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\";\nvar div = document.createElement(\"div\");\ndiv.innerText = \"这是百度网站\";\ndiv.appendChild(style);\ndiv.appendChild(img);\nprintElement(div);\n```\n\n### js 库\n\n- jsPdf\n\n```js\n// 控制台执行第一段\nvar jspdfScript = document.createElement(\"script\");\njspdfScript.src = \"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\";\ndocument.body.append(jspdfScript);\nvar html2canvasScript = document.createElement(\"script\");\nhtml2canvasScript.src =\n  \"https://html2canvas.hertzen.com/dist/html2canvas.min.js\";\ndocument.body.append(html2canvasScript);\n\n// 等 js 加载完成, 控制台执行第二段\n// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥\nwindow.jsPDF = jspdf.jsPDF;\nvar doc = new jsPDF();\ndoc.html($0, {\n  callback: function (doc) {\n    doc.save(\"sample-document.pdf\");\n  },\n  x: 1,\n  y: 1,\n  width: 170,\n  windowWidth: 1650,\n});\n```\n\n- jspdf + html2Canvas\n\n```js\n// 控制台执行第一段\nvar jspdfScript = document.createElement(\"script\");\njspdfScript.src = \"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\";\ndocument.body.append(jspdfScript);\nvar html2canvasScript = document.createElement(\"script\");\nhtml2canvasScript.src =\n  \"https://html2canvas.hertzen.com/dist/html2canvas.min.js\";\ndocument.body.append(html2canvasScript);\n\n// 等 js 加载完成, 控制台执行第二段\n// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥\nwindow.jsPDF = jspdf.jsPDF;\nhtml2canvas($0).then(function (canvas) {\n  var max = { height: 300 - 40 * 2, width: 210 - 15 * 2 };\n  var doc = new jsPDF(\"p\", \"mm\", \"a2\");\n  var height = canvas.height;\n  var width = canvas.width;\n  var ratio = canvas.height / canvas.width;\n  if (height > max.height) {\n    // 先调整高\n    height = max.height;\n    width = height * (1 / ratio);\n  }\n  if (width > max.width) {\n    // 再调整宽\n    width = max.width;\n    height = width * ratio;\n  }\n  // 最后宽高都是合适的\n  doc.addImage(canvas, \"PNG\", 15, 40, width, height);\n  doc.save(\"sample-document.pdf\");\n});\n```\n","source":"_posts/learn/dom打印PDF方案.md","raw":"---\ntitle: dom转PDF方案\ntags: [个人学习]\ncategories: [个人学习]\ndescription: 记录下dom转PDF方案\ndate: 2023-09-06\n---\n\n# dom 转 PDF 方案\n\n### 全局打印\n\n```js\nwindow.print();\n```\n\n### iframe 打开 dom 元素\n\n```js\nfunction printElement(e) {\n  var ifr = document.createElement(\"iframe\");\n  ifr.style = \"height: 0px; width: 0px; position: absolute\";\n  document.body.appendChild(ifr);\n  ifr.contentDocument.body.appendChild(e.cloneNode(true));\n  ifr.contentWindow.print();\n\n  ifr.parentElement.removeChild(ifr);\n}\nvar style = document.createElement(\"style\");\nstyle.innerText = \"* { color: red; }\";\nvar img = document.createElement(\"img\");\nimg.height = 300;\nimg.width = 300;\nimg.src = \"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\";\nvar div = document.createElement(\"div\");\ndiv.innerText = \"这是百度网站\";\ndiv.appendChild(style);\ndiv.appendChild(img);\nprintElement(div);\n```\n\n### js 库\n\n- jsPdf\n\n```js\n// 控制台执行第一段\nvar jspdfScript = document.createElement(\"script\");\njspdfScript.src = \"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\";\ndocument.body.append(jspdfScript);\nvar html2canvasScript = document.createElement(\"script\");\nhtml2canvasScript.src =\n  \"https://html2canvas.hertzen.com/dist/html2canvas.min.js\";\ndocument.body.append(html2canvasScript);\n\n// 等 js 加载完成, 控制台执行第二段\n// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥\nwindow.jsPDF = jspdf.jsPDF;\nvar doc = new jsPDF();\ndoc.html($0, {\n  callback: function (doc) {\n    doc.save(\"sample-document.pdf\");\n  },\n  x: 1,\n  y: 1,\n  width: 170,\n  windowWidth: 1650,\n});\n```\n\n- jspdf + html2Canvas\n\n```js\n// 控制台执行第一段\nvar jspdfScript = document.createElement(\"script\");\njspdfScript.src = \"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\";\ndocument.body.append(jspdfScript);\nvar html2canvasScript = document.createElement(\"script\");\nhtml2canvasScript.src =\n  \"https://html2canvas.hertzen.com/dist/html2canvas.min.js\";\ndocument.body.append(html2canvasScript);\n\n// 等 js 加载完成, 控制台执行第二段\n// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥\nwindow.jsPDF = jspdf.jsPDF;\nhtml2canvas($0).then(function (canvas) {\n  var max = { height: 300 - 40 * 2, width: 210 - 15 * 2 };\n  var doc = new jsPDF(\"p\", \"mm\", \"a2\");\n  var height = canvas.height;\n  var width = canvas.width;\n  var ratio = canvas.height / canvas.width;\n  if (height > max.height) {\n    // 先调整高\n    height = max.height;\n    width = height * (1 / ratio);\n  }\n  if (width > max.width) {\n    // 再调整宽\n    width = max.width;\n    height = width * ratio;\n  }\n  // 最后宽高都是合适的\n  doc.addImage(canvas, \"PNG\", 15, 40, width, height);\n  doc.save(\"sample-document.pdf\");\n});\n```\n","slug":"learn/dom打印PDF方案","published":1,"updated":"2023-09-06T03:03:35.203Z","_id":"clm75clqw0000jxljche8am3a","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"dom-转-PDF-方案\"><a href=\"#dom-转-PDF-方案\" class=\"headerlink\" title=\"dom 转 PDF 方案\"></a>dom 转 PDF 方案</h1><h3 id=\"全局打印\"><a href=\"#全局打印\" class=\"headerlink\" title=\"全局打印\"></a>全局打印</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">print</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iframe-打开-dom-元素\"><a href=\"#iframe-打开-dom-元素\" class=\"headerlink\" title=\"iframe 打开 dom 元素\"></a>iframe 打开 dom 元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printElement</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ifr = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;iframe&quot;</span>);</span><br><span class=\"line\">  ifr.<span class=\"property\">style</span> = <span class=\"string\">&quot;height: 0px; width: 0px; position: absolute&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(ifr);</span><br><span class=\"line\">  ifr.<span class=\"property\">contentDocument</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(e.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">  ifr.<span class=\"property\">contentWindow</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.<span class=\"property\">parentElement</span>.<span class=\"title function_\">removeChild</span>(ifr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">style.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;* &#123; color: red; &#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">img.<span class=\"property\">height</span> = <span class=\"number\">300</span>;</span><br><span class=\"line\">img.<span class=\"property\">width</span> = <span class=\"number\">300</span>;</span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">div.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;这是百度网站&quot;</span>;</span><br><span class=\"line\">div.<span class=\"title function_\">appendChild</span>(style);</span><br><span class=\"line\">div.<span class=\"title function_\">appendChild</span>(img);</span><br><span class=\"line\"><span class=\"title function_\">printElement</span>(div);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js-库\"><a href=\"#js-库\" class=\"headerlink\" title=\"js 库\"></a>js 库</h3><ul>\n<li>jsPdf</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制台执行第一段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jspdfScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">jspdfScript.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(jspdfScript);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html2canvasScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">html2canvasScript.<span class=\"property\">src</span> =</span><br><span class=\"line\">  <span class=\"string\">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(html2canvasScript);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class=\"line\"><span class=\"comment\">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">jsPDF</span> = jspdf.<span class=\"property\">jsPDF</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> <span class=\"title function_\">jsPDF</span>();</span><br><span class=\"line\">doc.<span class=\"title function_\">html</span>($0, &#123;</span><br><span class=\"line\">  <span class=\"attr\">callback</span>: <span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    doc.<span class=\"title function_\">save</span>(<span class=\"string\">&quot;sample-document.pdf&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">170</span>,</span><br><span class=\"line\">  <span class=\"attr\">windowWidth</span>: <span class=\"number\">1650</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jspdf + html2Canvas</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制台执行第一段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jspdfScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">jspdfScript.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(jspdfScript);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html2canvasScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">html2canvasScript.<span class=\"property\">src</span> =</span><br><span class=\"line\">  <span class=\"string\">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(html2canvasScript);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class=\"line\"><span class=\"comment\">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">jsPDF</span> = jspdf.<span class=\"property\">jsPDF</span>;</span><br><span class=\"line\"><span class=\"title function_\">html2canvas</span>($0).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">canvas</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> max = &#123; <span class=\"attr\">height</span>: <span class=\"number\">300</span> - <span class=\"number\">40</span> * <span class=\"number\">2</span>, <span class=\"attr\">width</span>: <span class=\"number\">210</span> - <span class=\"number\">15</span> * <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> <span class=\"title function_\">jsPDF</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;mm&quot;</span>, <span class=\"string\">&quot;a2&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = canvas.<span class=\"property\">height</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ratio = canvas.<span class=\"property\">height</span> / canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (height &gt; max.<span class=\"property\">height</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先调整高</span></span><br><span class=\"line\">    height = max.<span class=\"property\">height</span>;</span><br><span class=\"line\">    width = height * (<span class=\"number\">1</span> / ratio);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (width &gt; max.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 再调整宽</span></span><br><span class=\"line\">    width = max.<span class=\"property\">width</span>;</span><br><span class=\"line\">    height = width * ratio;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后宽高都是合适的</span></span><br><span class=\"line\">  doc.<span class=\"title function_\">addImage</span>(canvas, <span class=\"string\">&quot;PNG&quot;</span>, <span class=\"number\">15</span>, <span class=\"number\">40</span>, width, height);</span><br><span class=\"line\">  doc.<span class=\"title function_\">save</span>(<span class=\"string\">&quot;sample-document.pdf&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"dom-转-PDF-方案\"><a href=\"#dom-转-PDF-方案\" class=\"headerlink\" title=\"dom 转 PDF 方案\"></a>dom 转 PDF 方案</h1><h3 id=\"全局打印\"><a href=\"#全局打印\" class=\"headerlink\" title=\"全局打印\"></a>全局打印</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">print</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iframe-打开-dom-元素\"><a href=\"#iframe-打开-dom-元素\" class=\"headerlink\" title=\"iframe 打开 dom 元素\"></a>iframe 打开 dom 元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printElement</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ifr = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;iframe&quot;</span>);</span><br><span class=\"line\">  ifr.<span class=\"property\">style</span> = <span class=\"string\">&quot;height: 0px; width: 0px; position: absolute&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(ifr);</span><br><span class=\"line\">  ifr.<span class=\"property\">contentDocument</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(e.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">  ifr.<span class=\"property\">contentWindow</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  ifr.<span class=\"property\">parentElement</span>.<span class=\"title function_\">removeChild</span>(ifr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">style.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;* &#123; color: red; &#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">img.<span class=\"property\">height</span> = <span class=\"number\">300</span>;</span><br><span class=\"line\">img.<span class=\"property\">width</span> = <span class=\"number\">300</span>;</span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">div.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;这是百度网站&quot;</span>;</span><br><span class=\"line\">div.<span class=\"title function_\">appendChild</span>(style);</span><br><span class=\"line\">div.<span class=\"title function_\">appendChild</span>(img);</span><br><span class=\"line\"><span class=\"title function_\">printElement</span>(div);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js-库\"><a href=\"#js-库\" class=\"headerlink\" title=\"js 库\"></a>js 库</h3><ul>\n<li>jsPdf</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制台执行第一段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jspdfScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">jspdfScript.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(jspdfScript);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html2canvasScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">html2canvasScript.<span class=\"property\">src</span> =</span><br><span class=\"line\">  <span class=\"string\">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(html2canvasScript);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class=\"line\"><span class=\"comment\">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">jsPDF</span> = jspdf.<span class=\"property\">jsPDF</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> <span class=\"title function_\">jsPDF</span>();</span><br><span class=\"line\">doc.<span class=\"title function_\">html</span>($0, &#123;</span><br><span class=\"line\">  <span class=\"attr\">callback</span>: <span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    doc.<span class=\"title function_\">save</span>(<span class=\"string\">&quot;sample-document.pdf&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">170</span>,</span><br><span class=\"line\">  <span class=\"attr\">windowWidth</span>: <span class=\"number\">1650</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jspdf + html2Canvas</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制台执行第一段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jspdfScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">jspdfScript.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(jspdfScript);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html2canvasScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;script&quot;</span>);</span><br><span class=\"line\">html2canvasScript.<span class=\"property\">src</span> =</span><br><span class=\"line\">  <span class=\"string\">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(html2canvasScript);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class=\"line\"><span class=\"comment\">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">jsPDF</span> = jspdf.<span class=\"property\">jsPDF</span>;</span><br><span class=\"line\"><span class=\"title function_\">html2canvas</span>($0).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">canvas</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> max = &#123; <span class=\"attr\">height</span>: <span class=\"number\">300</span> - <span class=\"number\">40</span> * <span class=\"number\">2</span>, <span class=\"attr\">width</span>: <span class=\"number\">210</span> - <span class=\"number\">15</span> * <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> <span class=\"title function_\">jsPDF</span>(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;mm&quot;</span>, <span class=\"string\">&quot;a2&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = canvas.<span class=\"property\">height</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ratio = canvas.<span class=\"property\">height</span> / canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (height &gt; max.<span class=\"property\">height</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先调整高</span></span><br><span class=\"line\">    height = max.<span class=\"property\">height</span>;</span><br><span class=\"line\">    width = height * (<span class=\"number\">1</span> / ratio);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (width &gt; max.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 再调整宽</span></span><br><span class=\"line\">    width = max.<span class=\"property\">width</span>;</span><br><span class=\"line\">    height = width * ratio;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后宽高都是合适的</span></span><br><span class=\"line\">  doc.<span class=\"title function_\">addImage</span>(canvas, <span class=\"string\">&quot;PNG&quot;</span>, <span class=\"number\">15</span>, <span class=\"number\">40</span>, width, height);</span><br><span class=\"line\">  doc.<span class=\"title function_\">save</span>(<span class=\"string\">&quot;sample-document.pdf&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"nextTick 原理","description":"nextTick 原理","date":"2023-09-05T16:00:00.000Z","_content":"# nextTick 原理\n\nVue 的`nextTick`是一个非常重要的 API，它允许你延迟一段代码的执行直到下一次 DOM 更新周期。这对于在数据改变后立即操作 DOM 非常有用。\n\n关于其原理，Vue 使用了一个异步队列来控制所有观察者（watchers）的更新。当某个观察者被触发时，它会被添加到这个异步队列中。然后，在下一个 tick 时，Vue 会清空整个队列并执行所有存储在其中的观察者。\n\n为了实现这种异步机制，Vue 尝试使用原生 Promise、MutationObserver 和 setImmediate 等最新 APIs。只有当环境不支持这些 APIs 时才会回退到 setTimeout。\n\n先用 Promise.then()方法实现一下:\n\n```js\nlet callbacks = [];\nlet pending = false;\n\nfunction flushCallbacks() {\n  pending = false;\n  const copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\nfunction nextTick(cb) {\n  callbacks.push(() => {\n    if (cb) cb();\n  });\n\n  if (!pending) {\n    pending = true;\n\n    if (typeof Promise !== \"undefined\") {\n      // 如果环境支持Promise\n      Promise.resolve().then(flushCallbacks);\n    } else {\n      // 如果环境不支持Promise，则回退到setTimeout\n      setTimeout(flushCallbacks, 0);\n    }\n  }\n}\n```\n\n具体来说：\n\n1. 首选 Promise.then()方法。\n2. 如果环境不支持 Promise，则选择 MutationObserver。\n3. 如果还不支持 MutationObserver，则选择 setImmediate。\n4. 最后如果都不支持，则使用 setTimeout。\n\n以上就是`nextTick`的基本原理：通过异步队列确保代码在下一次 DOM 更新周期之后运行，并通过多种方式尝试实现该功能以适应各种环境。\n\n完整按照上述顺序实现一下：\n\n```js\nlet callbacks = [];\nlet pending = false;\n\nfunction flushCallbacks() {\n  pending = false;\n  const copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// 异步方法选择器\nlet timerFunc;\n\nif (typeof Promise !== \"undefined\") {\n  // 如果环境支持Promise\n  const p = Promise.resolve();\n  timerFunc = () => {\n    p.then(flushCallbacks);\n  };\n} else if (typeof MutationObserver !== \"undefined\") {\n  // 如果环境不支持Promise，但支持MutationObserver\n  let counter = 1;\n  const observer = new MutationObserver(flushCallbacks);\n  const textNode = document.createTextNode(String(counter));\n\n  observer.observe(textNode, {\n    characterData: true,\n  });\n\n  timerFunc = () => {\n    counter += 1;\n    textNode.data = String(counter % 2);\n  };\n} else if (typeof setImmediate !== \"undefined\") {\n  // 如果环境不支持Promise和MutationObserver，但支持setImmediate\n  timerFunc = () => setImmediate(flushCallbacks);\n} else {\n  // 最后如果都不支持，则使用setTimeout\n  timerFunc = () => setTimeout(flushCallbacks, 0);\n}\n\nfunction nextTick(cb) {\n  callbacks.push(() => cb && cb());\n\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n}\n```\n\n> 这个实现更接近 Vue.js 中真正的 nextTick。注意在使用 Mutation Observer 时，我们观察了一个文本节点并通过改变它来触发回调。\n","source":"_posts/vue/nextTick.md","raw":"---\ntitle: nextTick 原理\ntags: [vue]\ncategories: [vue]\ndescription: nextTick 原理\ndate: 2023-09-06\n---\n# nextTick 原理\n\nVue 的`nextTick`是一个非常重要的 API，它允许你延迟一段代码的执行直到下一次 DOM 更新周期。这对于在数据改变后立即操作 DOM 非常有用。\n\n关于其原理，Vue 使用了一个异步队列来控制所有观察者（watchers）的更新。当某个观察者被触发时，它会被添加到这个异步队列中。然后，在下一个 tick 时，Vue 会清空整个队列并执行所有存储在其中的观察者。\n\n为了实现这种异步机制，Vue 尝试使用原生 Promise、MutationObserver 和 setImmediate 等最新 APIs。只有当环境不支持这些 APIs 时才会回退到 setTimeout。\n\n先用 Promise.then()方法实现一下:\n\n```js\nlet callbacks = [];\nlet pending = false;\n\nfunction flushCallbacks() {\n  pending = false;\n  const copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\nfunction nextTick(cb) {\n  callbacks.push(() => {\n    if (cb) cb();\n  });\n\n  if (!pending) {\n    pending = true;\n\n    if (typeof Promise !== \"undefined\") {\n      // 如果环境支持Promise\n      Promise.resolve().then(flushCallbacks);\n    } else {\n      // 如果环境不支持Promise，则回退到setTimeout\n      setTimeout(flushCallbacks, 0);\n    }\n  }\n}\n```\n\n具体来说：\n\n1. 首选 Promise.then()方法。\n2. 如果环境不支持 Promise，则选择 MutationObserver。\n3. 如果还不支持 MutationObserver，则选择 setImmediate。\n4. 最后如果都不支持，则使用 setTimeout。\n\n以上就是`nextTick`的基本原理：通过异步队列确保代码在下一次 DOM 更新周期之后运行，并通过多种方式尝试实现该功能以适应各种环境。\n\n完整按照上述顺序实现一下：\n\n```js\nlet callbacks = [];\nlet pending = false;\n\nfunction flushCallbacks() {\n  pending = false;\n  const copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// 异步方法选择器\nlet timerFunc;\n\nif (typeof Promise !== \"undefined\") {\n  // 如果环境支持Promise\n  const p = Promise.resolve();\n  timerFunc = () => {\n    p.then(flushCallbacks);\n  };\n} else if (typeof MutationObserver !== \"undefined\") {\n  // 如果环境不支持Promise，但支持MutationObserver\n  let counter = 1;\n  const observer = new MutationObserver(flushCallbacks);\n  const textNode = document.createTextNode(String(counter));\n\n  observer.observe(textNode, {\n    characterData: true,\n  });\n\n  timerFunc = () => {\n    counter += 1;\n    textNode.data = String(counter % 2);\n  };\n} else if (typeof setImmediate !== \"undefined\") {\n  // 如果环境不支持Promise和MutationObserver，但支持setImmediate\n  timerFunc = () => setImmediate(flushCallbacks);\n} else {\n  // 最后如果都不支持，则使用setTimeout\n  timerFunc = () => setTimeout(flushCallbacks, 0);\n}\n\nfunction nextTick(cb) {\n  callbacks.push(() => cb && cb());\n\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n}\n```\n\n> 这个实现更接近 Vue.js 中真正的 nextTick。注意在使用 Mutation Observer 时，我们观察了一个文本节点并通过改变它来触发回调。\n","slug":"vue/nextTick","published":1,"updated":"2023-09-06T03:23:09.977Z","_id":"clm75s8ab0005jxlj180h4xqn","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"nextTick-原理\"><a href=\"#nextTick-原理\" class=\"headerlink\" title=\"nextTick 原理\"></a>nextTick 原理</h1><p>Vue 的<code>nextTick</code>是一个非常重要的 API，它允许你延迟一段代码的执行直到下一次 DOM 更新周期。这对于在数据改变后立即操作 DOM 非常有用。</p>\n<p>关于其原理，Vue 使用了一个异步队列来控制所有观察者（watchers）的更新。当某个观察者被触发时，它会被添加到这个异步队列中。然后，在下一个 tick 时，Vue 会清空整个队列并执行所有存储在其中的观察者。</p>\n<p>为了实现这种异步机制，Vue 尝试使用原生 Promise、MutationObserver 和 setImmediate 等最新 APIs。只有当环境不支持这些 APIs 时才会回退到 setTimeout。</p>\n<p>先用 Promise.then()方法实现一下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果环境支持Promise</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(flushCallbacks);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果环境不支持Promise，则回退到setTimeout</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体来说：</p>\n<ol>\n<li>首选 Promise.then()方法。</li>\n<li>如果环境不支持 Promise，则选择 MutationObserver。</li>\n<li>如果还不支持 MutationObserver，则选择 setImmediate。</li>\n<li>最后如果都不支持，则使用 setTimeout。</li>\n</ol>\n<p>以上就是<code>nextTick</code>的基本原理：通过异步队列确保代码在下一次 DOM 更新周期之后运行，并通过多种方式尝试实现该功能以适应各种环境。</p>\n<p>完整按照上述顺序实现一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步方法选择器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境支持Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境不支持Promise，但支持MutationObserver</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\"></span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter % <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境不支持Promise和MutationObserver，但支持setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">setImmediate</span>(flushCallbacks);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 最后如果都不支持，则使用setTimeout</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> cb &amp;&amp; <span class=\"title function_\">cb</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个实现更接近 Vue.js 中真正的 nextTick。注意在使用 Mutation Observer 时，我们观察了一个文本节点并通过改变它来触发回调。</p>\n</blockquote>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"nextTick-原理\"><a href=\"#nextTick-原理\" class=\"headerlink\" title=\"nextTick 原理\"></a>nextTick 原理</h1><p>Vue 的<code>nextTick</code>是一个非常重要的 API，它允许你延迟一段代码的执行直到下一次 DOM 更新周期。这对于在数据改变后立即操作 DOM 非常有用。</p>\n<p>关于其原理，Vue 使用了一个异步队列来控制所有观察者（watchers）的更新。当某个观察者被触发时，它会被添加到这个异步队列中。然后，在下一个 tick 时，Vue 会清空整个队列并执行所有存储在其中的观察者。</p>\n<p>为了实现这种异步机制，Vue 尝试使用原生 Promise、MutationObserver 和 setImmediate 等最新 APIs。只有当环境不支持这些 APIs 时才会回退到 setTimeout。</p>\n<p>先用 Promise.then()方法实现一下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果环境支持Promise</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(flushCallbacks);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果环境不支持Promise，则回退到setTimeout</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体来说：</p>\n<ol>\n<li>首选 Promise.then()方法。</li>\n<li>如果环境不支持 Promise，则选择 MutationObserver。</li>\n<li>如果还不支持 MutationObserver，则选择 setImmediate。</li>\n<li>最后如果都不支持，则使用 setTimeout。</li>\n</ol>\n<p>以上就是<code>nextTick</code>的基本原理：通过异步队列确保代码在下一次 DOM 更新周期之后运行，并通过多种方式尝试实现该功能以适应各种环境。</p>\n<p>完整按照上述顺序实现一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步方法选择器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境支持Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境不支持Promise，但支持MutationObserver</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\"></span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter % <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果环境不支持Promise和MutationObserver，但支持setImmediate</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">setImmediate</span>(flushCallbacks);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 最后如果都不支持，则使用setTimeout</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> cb &amp;&amp; <span class=\"title function_\">cb</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个实现更接近 Vue.js 中真正的 nextTick。注意在使用 Mutation Observer 时，我们观察了一个文本节点并通过改变它来触发回调。</p>\n</blockquote>\n"},{"title":"vue3实现水印方案","description":"vue3实现水印方案","date":"2023-09-05T16:00:00.000Z","_content":"\n# vue3 实现水印方案\n\n- 生成 canvas 图片\n\n```js\nimport { computed } from \"vue\";\nexport default function useWatermarkBg(props) {\n  return computed(() => {\n    // 创建一个 canvas\n    const canvas = document.createElement(\"canvas\");\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    // 设置字体大小\n    const fontSize = props.fontSize * devicePixelRatio;\n    const font = fontSize + \"px serif\";\n    const ctx = canvas.getContext(\"2d\");\n    // 获取文字宽度\n    ctx.font = font;\n    const { width } = ctx.measureText(props.text);\n    const canvasSize = Math.max(100, width) + props.gap * devicePixelRatio;\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    // 旋转 45 度让文字变倾斜\n    ctx.rotate((Math.PI / 180) * -45);\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.3)\";\n    ctx.font = font;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    // 将文字画出来\n    ctx.fillText(props.text, 0, 0);\n    return {\n      base64: canvas.toDataURL(),\n      size: canvasSize,\n      styleSize: canvasSize / devicePixelRatio,\n    };\n  });\n}\n```\n\n- 用 MutationObserver api 监听删除和修改属性，重新生成水印\n\n```html\n<template>\n  <div class=\"watermark-container\" ref=\"parentRef\">\n    <slot></slot>\n    <!-- 我们要做的就是在这里添加一个 div，填充满整个区域，设置水印背景并且重复 -->\n  </div>\n</template>\n\n<script setup>\nimport { ref, watchEffect, onMounted, onUnmounted } from \"vue\";\nimport useWatermarkBg from \"./useWatermarkBg\";\n// 定义一些基本的属性（ 如果说你想开发的更加完善，可以加入更多的属性来适应你的要求 ）\nconst props = defineProps({\n  text: {\n    // 传入水印的文本\n    type: String,\n    required: true,\n    default: \"watermark\",\n  },\n  fontSize: {\n    // 字体的大小\n    type: Number,\n    default: 40,\n  },\n  gap: {\n    // 水印重复的间隔\n    type: Number,\n    default: 20,\n  },\n});\n\n// 将属性传递进去就返回个创建好的对象\n// useWatermarkBg 函数用来创建一个 canvas 图片\nconst bg = useWatermarkBg(props);\nconst parentRef = ref(null);\nconst flag = ref(0); // 声明一个依赖\n// 将 div 保存在外部因为要判断节点时使用\nlet div;\n\nwatchEffect(() => {\n  flag.value; // 将依赖放在 watchEffect 里\n  if (!parentRef.value) {\n    return;\n  }\n  // 判断之前的节点是否有内容，如果有的话删除\n  if (div) {\n    div.remove();\n  }\n  const { base64, styleSize } = bg.value;\n  div = document.createElement(\"div\");\n  div.style.backgroundImage = `url(${base64})`;\n  div.style.backgroundSize = `${styleSize}px ${styleSize}px`;\n  div.style.backgroundRepeat = \"repeat\";\n  div.style.inset = 0;\n  div.style.zIndex = 9999;\n  div.style.position = \"absolute\";\n  div.style.pointerEvents = \"none\";\n  parentRef.value.appendChild(div);\n});\n\nlet ob;\nonMounted(() => {\n  // 在 onMounted 里边创建一个 MutationObserver 来进行监控\n  // 一旦某个东西有变化就会运行这个回调函数\n  ob = new MutationObserver((records) => {\n    // 并把变化记录下来传递给我们\n    console.log(\"records >>> \", records);\n    for (const record of records) {\n      // 如果有节点被删除，循环一下判断是否有水印的节点\n      for (const dom of record.removedNodes) {\n        if (dom === div) {\n          console.log(\"水印被删除\");\n          flag.value++; // 删除节点的时候更新依赖\n          return;\n        }\n      }\n      // 如果有节点被修改，判断一下是否是水印的节点\n      if (record.target === div) {\n        console.log(\"属性被修改\");\n        flag.value++; // 修改属性的时候更新依赖\n        return;\n      }\n    }\n  });\n  // 创建好监听器之后，告诉监听器需要监听的元素\n  ob.observe(parentRef.value, {\n    // 监听的时候需要加一些配置\n    childList: true, // 元素内容有没有发生变化\n    attributes: true, // 元素本身的属性有没有发生变化\n    subtree: true, // 告诉它监控的是整个子树，就是包含整个子元素\n  });\n});\n\n// 在组件卸载的时候取消监听\nonUnmounted(() => {\n  ob && ob.disconnect(); // 取消监听\n  div = null; // 因为 div 是全局变量在写在的时候值为空\n});\n</script>\n```\n\n- 使用\n\n```html\n<template>\n  <Watermark text=\"版权不能侵犯\">\n    <div>内容</div>\n  </Watermark>\n</template>\n\n<script>\nimport Watermark from \"./components/Watermark.vue\";\n\nexport default {\n  name: \"App\",\n  components: {\n    Watermark,\n  },\n};\n</script>\n```\n","source":"_posts/learn/vue3实现水印方案.md","raw":"---\ntitle: vue3实现水印方案\ntags: [个人学习]\ncategories: [个人学习]\ndescription: vue3实现水印方案\ndate: 2023-09-06\n---\n\n# vue3 实现水印方案\n\n- 生成 canvas 图片\n\n```js\nimport { computed } from \"vue\";\nexport default function useWatermarkBg(props) {\n  return computed(() => {\n    // 创建一个 canvas\n    const canvas = document.createElement(\"canvas\");\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    // 设置字体大小\n    const fontSize = props.fontSize * devicePixelRatio;\n    const font = fontSize + \"px serif\";\n    const ctx = canvas.getContext(\"2d\");\n    // 获取文字宽度\n    ctx.font = font;\n    const { width } = ctx.measureText(props.text);\n    const canvasSize = Math.max(100, width) + props.gap * devicePixelRatio;\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    // 旋转 45 度让文字变倾斜\n    ctx.rotate((Math.PI / 180) * -45);\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.3)\";\n    ctx.font = font;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    // 将文字画出来\n    ctx.fillText(props.text, 0, 0);\n    return {\n      base64: canvas.toDataURL(),\n      size: canvasSize,\n      styleSize: canvasSize / devicePixelRatio,\n    };\n  });\n}\n```\n\n- 用 MutationObserver api 监听删除和修改属性，重新生成水印\n\n```html\n<template>\n  <div class=\"watermark-container\" ref=\"parentRef\">\n    <slot></slot>\n    <!-- 我们要做的就是在这里添加一个 div，填充满整个区域，设置水印背景并且重复 -->\n  </div>\n</template>\n\n<script setup>\nimport { ref, watchEffect, onMounted, onUnmounted } from \"vue\";\nimport useWatermarkBg from \"./useWatermarkBg\";\n// 定义一些基本的属性（ 如果说你想开发的更加完善，可以加入更多的属性来适应你的要求 ）\nconst props = defineProps({\n  text: {\n    // 传入水印的文本\n    type: String,\n    required: true,\n    default: \"watermark\",\n  },\n  fontSize: {\n    // 字体的大小\n    type: Number,\n    default: 40,\n  },\n  gap: {\n    // 水印重复的间隔\n    type: Number,\n    default: 20,\n  },\n});\n\n// 将属性传递进去就返回个创建好的对象\n// useWatermarkBg 函数用来创建一个 canvas 图片\nconst bg = useWatermarkBg(props);\nconst parentRef = ref(null);\nconst flag = ref(0); // 声明一个依赖\n// 将 div 保存在外部因为要判断节点时使用\nlet div;\n\nwatchEffect(() => {\n  flag.value; // 将依赖放在 watchEffect 里\n  if (!parentRef.value) {\n    return;\n  }\n  // 判断之前的节点是否有内容，如果有的话删除\n  if (div) {\n    div.remove();\n  }\n  const { base64, styleSize } = bg.value;\n  div = document.createElement(\"div\");\n  div.style.backgroundImage = `url(${base64})`;\n  div.style.backgroundSize = `${styleSize}px ${styleSize}px`;\n  div.style.backgroundRepeat = \"repeat\";\n  div.style.inset = 0;\n  div.style.zIndex = 9999;\n  div.style.position = \"absolute\";\n  div.style.pointerEvents = \"none\";\n  parentRef.value.appendChild(div);\n});\n\nlet ob;\nonMounted(() => {\n  // 在 onMounted 里边创建一个 MutationObserver 来进行监控\n  // 一旦某个东西有变化就会运行这个回调函数\n  ob = new MutationObserver((records) => {\n    // 并把变化记录下来传递给我们\n    console.log(\"records >>> \", records);\n    for (const record of records) {\n      // 如果有节点被删除，循环一下判断是否有水印的节点\n      for (const dom of record.removedNodes) {\n        if (dom === div) {\n          console.log(\"水印被删除\");\n          flag.value++; // 删除节点的时候更新依赖\n          return;\n        }\n      }\n      // 如果有节点被修改，判断一下是否是水印的节点\n      if (record.target === div) {\n        console.log(\"属性被修改\");\n        flag.value++; // 修改属性的时候更新依赖\n        return;\n      }\n    }\n  });\n  // 创建好监听器之后，告诉监听器需要监听的元素\n  ob.observe(parentRef.value, {\n    // 监听的时候需要加一些配置\n    childList: true, // 元素内容有没有发生变化\n    attributes: true, // 元素本身的属性有没有发生变化\n    subtree: true, // 告诉它监控的是整个子树，就是包含整个子元素\n  });\n});\n\n// 在组件卸载的时候取消监听\nonUnmounted(() => {\n  ob && ob.disconnect(); // 取消监听\n  div = null; // 因为 div 是全局变量在写在的时候值为空\n});\n</script>\n```\n\n- 使用\n\n```html\n<template>\n  <Watermark text=\"版权不能侵犯\">\n    <div>内容</div>\n  </Watermark>\n</template>\n\n<script>\nimport Watermark from \"./components/Watermark.vue\";\n\nexport default {\n  name: \"App\",\n  components: {\n    Watermark,\n  },\n};\n</script>\n```\n","slug":"learn/vue3实现水印方案","published":1,"updated":"2023-09-06T04:07:09.683Z","_id":"clm77n49s000ajxlj56vh6183","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"vue3-实现水印方案\"><a href=\"#vue3-实现水印方案\" class=\"headerlink\" title=\"vue3 实现水印方案\"></a>vue3 实现水印方案</h1><ul>\n<li>生成 canvas 图片</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useWatermarkBg</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 canvas</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> devicePixelRatio = <span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span> || <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置字体大小</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fontSize = props.<span class=\"property\">fontSize</span> * devicePixelRatio;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> font = fontSize + <span class=\"string\">&quot;px serif&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取文字宽度</span></span><br><span class=\"line\">    ctx.<span class=\"property\">font</span> = font;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; width &#125; = ctx.<span class=\"title function_\">measureText</span>(props.<span class=\"property\">text</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasSize = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">100</span>, width) + props.<span class=\"property\">gap</span> * devicePixelRatio;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = canvasSize;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = canvasSize;</span><br><span class=\"line\">    ctx.<span class=\"title function_\">translate</span>(canvas.<span class=\"property\">width</span> / <span class=\"number\">2</span>, canvas.<span class=\"property\">height</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 旋转 45 度让文字变倾斜</span></span><br><span class=\"line\">    ctx.<span class=\"title function_\">rotate</span>((<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>) * -<span class=\"number\">45</span>);</span><br><span class=\"line\">    ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&quot;rgba(0, 0, 0, 0.3)&quot;</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">font</span> = font;</span><br><span class=\"line\">    ctx.<span class=\"property\">textAlign</span> = <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">textBaseline</span> = <span class=\"string\">&quot;middle&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将文字画出来</span></span><br><span class=\"line\">    ctx.<span class=\"title function_\">fillText</span>(props.<span class=\"property\">text</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">base64</span>: canvas.<span class=\"title function_\">toDataURL</span>(),</span><br><span class=\"line\">      <span class=\"attr\">size</span>: canvasSize,</span><br><span class=\"line\">      <span class=\"attr\">styleSize</span>: canvasSize / devicePixelRatio,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 MutationObserver api 监听删除和修改属性，重新生成水印</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;watermark-container&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;parentRef&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们要做的就是在这里添加一个 div，填充满整个区域，设置水印背景并且重复 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, watchEffect, onMounted, onUnmounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> useWatermarkBg <span class=\"keyword\">from</span> <span class=\"string\">&quot;./useWatermarkBg&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 定义一些基本的属性（ 如果说你想开发的更加完善，可以加入更多的属性来适应你的要求 ）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">text</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 传入水印的文本</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"string\">&quot;watermark&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">fontSize</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 字体的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"number\">40</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">gap</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 水印重复的间隔</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将属性传递进去就返回个创建好的对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// useWatermarkBg 函数用来创建一个 canvas 图片</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> bg = <span class=\"title function_\">useWatermarkBg</span>(props);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> parentRef = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> flag = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 声明一个依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将 div 保存在外部因为要判断节点时使用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> div;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  flag.<span class=\"property\">value</span>; <span class=\"comment\">// 将依赖放在 watchEffect 里</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (!parentRef.<span class=\"property\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 判断之前的节点是否有内容，如果有的话删除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    div.<span class=\"title function_\">remove</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> &#123; base64, styleSize &#125; = bg.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">`url(<span class=\"subst\">$&#123;base64&#125;</span>)`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundSize</span> = <span class=\"string\">`<span class=\"subst\">$&#123;styleSize&#125;</span>px <span class=\"subst\">$&#123;styleSize&#125;</span>px`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundRepeat</span> = <span class=\"string\">&quot;repeat&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">inset</span> = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">zIndex</span> = <span class=\"number\">9999</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">pointerEvents</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  parentRef.<span class=\"property\">value</span>.<span class=\"title function_\">appendChild</span>(div);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> ob;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 在 onMounted 里边创建一个 MutationObserver 来进行监控</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 一旦某个东西有变化就会运行这个回调函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\">(<span class=\"params\">records</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 并把变化记录下来传递给我们</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;records &gt;&gt;&gt; &quot;</span>, records);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> record <span class=\"keyword\">of</span> records) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果有节点被删除，循环一下判断是否有水印的节点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dom <span class=\"keyword\">of</span> record.<span class=\"property\">removedNodes</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (dom === div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;水印被删除&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          flag.<span class=\"property\">value</span>++; <span class=\"comment\">// 删除节点的时候更新依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果有节点被修改，判断一下是否是水印的节点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (record.<span class=\"property\">target</span> === div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;属性被修改&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        flag.<span class=\"property\">value</span>++; <span class=\"comment\">// 修改属性的时候更新依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 创建好监听器之后，告诉监听器需要监听的元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob.<span class=\"title function_\">observe</span>(parentRef.<span class=\"property\">value</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 监听的时候需要加一些配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 元素内容有没有发生变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 元素本身的属性有没有发生变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 告诉它监控的是整个子树，就是包含整个子元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 在组件卸载的时候取消监听</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onUnmounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob &amp;&amp; ob.<span class=\"title function_\">disconnect</span>(); <span class=\"comment\">// 取消监听</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  div = <span class=\"literal\">null</span>; <span class=\"comment\">// 因为 div 是全局变量在写在的时候值为空</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Watermark</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;版权不能侵犯&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Watermark</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Watermark</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Watermark.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;App&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Watermark</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"vue3-实现水印方案\"><a href=\"#vue3-实现水印方案\" class=\"headerlink\" title=\"vue3 实现水印方案\"></a>vue3 实现水印方案</h1><ul>\n<li>生成 canvas 图片</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useWatermarkBg</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 canvas</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> devicePixelRatio = <span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span> || <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置字体大小</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fontSize = props.<span class=\"property\">fontSize</span> * devicePixelRatio;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> font = fontSize + <span class=\"string\">&quot;px serif&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取文字宽度</span></span><br><span class=\"line\">    ctx.<span class=\"property\">font</span> = font;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; width &#125; = ctx.<span class=\"title function_\">measureText</span>(props.<span class=\"property\">text</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasSize = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">100</span>, width) + props.<span class=\"property\">gap</span> * devicePixelRatio;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = canvasSize;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = canvasSize;</span><br><span class=\"line\">    ctx.<span class=\"title function_\">translate</span>(canvas.<span class=\"property\">width</span> / <span class=\"number\">2</span>, canvas.<span class=\"property\">height</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 旋转 45 度让文字变倾斜</span></span><br><span class=\"line\">    ctx.<span class=\"title function_\">rotate</span>((<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>) * -<span class=\"number\">45</span>);</span><br><span class=\"line\">    ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&quot;rgba(0, 0, 0, 0.3)&quot;</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">font</span> = font;</span><br><span class=\"line\">    ctx.<span class=\"property\">textAlign</span> = <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">textBaseline</span> = <span class=\"string\">&quot;middle&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将文字画出来</span></span><br><span class=\"line\">    ctx.<span class=\"title function_\">fillText</span>(props.<span class=\"property\">text</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">base64</span>: canvas.<span class=\"title function_\">toDataURL</span>(),</span><br><span class=\"line\">      <span class=\"attr\">size</span>: canvasSize,</span><br><span class=\"line\">      <span class=\"attr\">styleSize</span>: canvasSize / devicePixelRatio,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 MutationObserver api 监听删除和修改属性，重新生成水印</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;watermark-container&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;parentRef&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们要做的就是在这里添加一个 div，填充满整个区域，设置水印背景并且重复 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, watchEffect, onMounted, onUnmounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> useWatermarkBg <span class=\"keyword\">from</span> <span class=\"string\">&quot;./useWatermarkBg&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 定义一些基本的属性（ 如果说你想开发的更加完善，可以加入更多的属性来适应你的要求 ）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">text</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 传入水印的文本</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"string\">&quot;watermark&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">fontSize</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 字体的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"number\">40</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">gap</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 水印重复的间隔</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">default</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将属性传递进去就返回个创建好的对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// useWatermarkBg 函数用来创建一个 canvas 图片</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> bg = <span class=\"title function_\">useWatermarkBg</span>(props);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> parentRef = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> flag = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 声明一个依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将 div 保存在外部因为要判断节点时使用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> div;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  flag.<span class=\"property\">value</span>; <span class=\"comment\">// 将依赖放在 watchEffect 里</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (!parentRef.<span class=\"property\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 判断之前的节点是否有内容，如果有的话删除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">if</span> (div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    div.<span class=\"title function_\">remove</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> &#123; base64, styleSize &#125; = bg.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">`url(<span class=\"subst\">$&#123;base64&#125;</span>)`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundSize</span> = <span class=\"string\">`<span class=\"subst\">$&#123;styleSize&#125;</span>px <span class=\"subst\">$&#123;styleSize&#125;</span>px`</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">backgroundRepeat</span> = <span class=\"string\">&quot;repeat&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">inset</span> = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">zIndex</span> = <span class=\"number\">9999</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  div.<span class=\"property\">style</span>.<span class=\"property\">pointerEvents</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  parentRef.<span class=\"property\">value</span>.<span class=\"title function_\">appendChild</span>(div);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">let</span> ob;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 在 onMounted 里边创建一个 MutationObserver 来进行监控</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 一旦某个东西有变化就会运行这个回调函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\">(<span class=\"params\">records</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 并把变化记录下来传递给我们</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;records &gt;&gt;&gt; &quot;</span>, records);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> record <span class=\"keyword\">of</span> records) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果有节点被删除，循环一下判断是否有水印的节点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dom <span class=\"keyword\">of</span> record.<span class=\"property\">removedNodes</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (dom === div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;水印被删除&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          flag.<span class=\"property\">value</span>++; <span class=\"comment\">// 删除节点的时候更新依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果有节点被修改，判断一下是否是水印的节点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (record.<span class=\"property\">target</span> === div) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;属性被修改&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        flag.<span class=\"property\">value</span>++; <span class=\"comment\">// 修改属性的时候更新依赖</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 创建好监听器之后，告诉监听器需要监听的元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob.<span class=\"title function_\">observe</span>(parentRef.<span class=\"property\">value</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 监听的时候需要加一些配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 元素内容有没有发生变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 元素本身的属性有没有发生变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 告诉它监控的是整个子树，就是包含整个子元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 在组件卸载的时候取消监听</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onUnmounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ob &amp;&amp; ob.<span class=\"title function_\">disconnect</span>(); <span class=\"comment\">// 取消监听</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  div = <span class=\"literal\">null</span>; <span class=\"comment\">// 因为 div 是全局变量在写在的时候值为空</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Watermark</span> <span class=\"attr\">text</span>=<span class=\"string\">&quot;版权不能侵犯&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Watermark</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Watermark</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Watermark.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;App&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Watermark</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript console方法","description":"JavaScript console方法","date":"2023-09-05T16:00:00.000Z","_content":"\n# JavaScript console 方法\n\n### 1. table()\n\n```js\nconst cars = [\n  {\n    color: \"red\",\n    age: 4,\n    maxSpeed: 120,\n  },\n  {\n    color: \"blue\",\n    age: 2,\n    maxSpeed: 100,\n  },\n  {\n    color: \"yellow\",\n    age: 3,\n    maxSpeed: 160,\n  },\n];\n```\n\n![Alt text](/image.png)\n\n### 2. assert()\n\nconsole.assert() 非常适合调试目的，它接收断言，并在断言为 false 时向控制台写入错误信息。但如果是 true ，则不会发生任何事情:\n\n![Alt text](image-1.png)\n\n### 3. trace()\n\nconsole.trace() 可以帮助您在调用它的位置输出当前堆栈跟踪。例如\n\n![Alt text](image-2.png)\n\n### 4. error()\n\n![Alt text](image-3.png)\n\n### 5. warn()\n\n![Alt text](image-4.png)\n\n### 6. count() 和 countReset()\n\n![Alt text](image-5.png)\n\n![Alt text](image-6.png)\n\n> countReset() 方法将标签的计数设回零。\n\n![Alt text](image-7.png)\n\n### 7. time(), timeEnd(), and timeLog()\n\n![Alt text](image-8.png)\n\n### 8. clear()\n\nconsole.clear() 通过清除日志来清除控制台中的杂乱信息。\n\n### 9. group(), groupCollapsed(), and groupEnd()\n\n![Alt text](image-9.png)\n\n![Alt text](image-10.png)\n\n### 10. dir()\n\n![Alt text](image-11.png)\n","source":"_posts/util/console.md","raw":"---\ntitle: JavaScript console方法\ntags: [JavaScript]\ncategories: [JavaScript]\ndescription: JavaScript console方法\ndate: 2023-09-06\n---\n\n# JavaScript console 方法\n\n### 1. table()\n\n```js\nconst cars = [\n  {\n    color: \"red\",\n    age: 4,\n    maxSpeed: 120,\n  },\n  {\n    color: \"blue\",\n    age: 2,\n    maxSpeed: 100,\n  },\n  {\n    color: \"yellow\",\n    age: 3,\n    maxSpeed: 160,\n  },\n];\n```\n\n![Alt text](/image.png)\n\n### 2. assert()\n\nconsole.assert() 非常适合调试目的，它接收断言，并在断言为 false 时向控制台写入错误信息。但如果是 true ，则不会发生任何事情:\n\n![Alt text](image-1.png)\n\n### 3. trace()\n\nconsole.trace() 可以帮助您在调用它的位置输出当前堆栈跟踪。例如\n\n![Alt text](image-2.png)\n\n### 4. error()\n\n![Alt text](image-3.png)\n\n### 5. warn()\n\n![Alt text](image-4.png)\n\n### 6. count() 和 countReset()\n\n![Alt text](image-5.png)\n\n![Alt text](image-6.png)\n\n> countReset() 方法将标签的计数设回零。\n\n![Alt text](image-7.png)\n\n### 7. time(), timeEnd(), and timeLog()\n\n![Alt text](image-8.png)\n\n### 8. clear()\n\nconsole.clear() 通过清除日志来清除控制台中的杂乱信息。\n\n### 9. group(), groupCollapsed(), and groupEnd()\n\n![Alt text](image-9.png)\n\n![Alt text](image-10.png)\n\n### 10. dir()\n\n![Alt text](image-11.png)\n","slug":"util/console","published":1,"updated":"2023-09-06T09:38:34.808Z","_id":"clm7jis3s000kjxlje2kb8bgk","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"JavaScript-console-方法\"><a href=\"#JavaScript-console-方法\" class=\"headerlink\" title=\"JavaScript console 方法\"></a>JavaScript console 方法</h1><h3 id=\"1-table\"><a href=\"#1-table\" class=\"headerlink\" title=\"1. table()\"></a>1. table()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cars = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">120</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;yellow&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">160</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/image.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-assert\"><a href=\"#2-assert\" class=\"headerlink\" title=\"2. assert()\"></a>2. assert()</h3><p>console.assert() 非常适合调试目的，它接收断言，并在断言为 false 时向控制台写入错误信息。但如果是 true ，则不会发生任何事情:</p>\n<p><img src=\"/image-1.png\" alt=\"Alt text\"></p>\n<h3 id=\"3-trace\"><a href=\"#3-trace\" class=\"headerlink\" title=\"3. trace()\"></a>3. trace()</h3><p>console.trace() 可以帮助您在调用它的位置输出当前堆栈跟踪。例如</p>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"></p>\n<h3 id=\"4-error\"><a href=\"#4-error\" class=\"headerlink\" title=\"4. error()\"></a>4. error()</h3><p><img src=\"/image-3.png\" alt=\"Alt text\"></p>\n<h3 id=\"5-warn\"><a href=\"#5-warn\" class=\"headerlink\" title=\"5. warn()\"></a>5. warn()</h3><p><img src=\"/image-4.png\" alt=\"Alt text\"></p>\n<h3 id=\"6-count-和-countReset\"><a href=\"#6-count-和-countReset\" class=\"headerlink\" title=\"6. count() 和 countReset()\"></a>6. count() 和 countReset()</h3><p><img src=\"/image-5.png\" alt=\"Alt text\"></p>\n<p><img src=\"/image-6.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>countReset() 方法将标签的计数设回零。</p>\n</blockquote>\n<p><img src=\"/image-7.png\" alt=\"Alt text\"></p>\n<h3 id=\"7-time-timeEnd-and-timeLog\"><a href=\"#7-time-timeEnd-and-timeLog\" class=\"headerlink\" title=\"7. time(), timeEnd(), and timeLog()\"></a>7. time(), timeEnd(), and timeLog()</h3><p><img src=\"/image-8.png\" alt=\"Alt text\"></p>\n<h3 id=\"8-clear\"><a href=\"#8-clear\" class=\"headerlink\" title=\"8. clear()\"></a>8. clear()</h3><p>console.clear() 通过清除日志来清除控制台中的杂乱信息。</p>\n<h3 id=\"9-group-groupCollapsed-and-groupEnd\"><a href=\"#9-group-groupCollapsed-and-groupEnd\" class=\"headerlink\" title=\"9. group(), groupCollapsed(), and groupEnd()\"></a>9. group(), groupCollapsed(), and groupEnd()</h3><p><img src=\"/image-9.png\" alt=\"Alt text\"></p>\n<p><img src=\"/image-10.png\" alt=\"Alt text\"></p>\n<h3 id=\"10-dir\"><a href=\"#10-dir\" class=\"headerlink\" title=\"10. dir()\"></a>10. dir()</h3><p><img src=\"/image-11.png\" alt=\"Alt text\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"JavaScript-console-方法\"><a href=\"#JavaScript-console-方法\" class=\"headerlink\" title=\"JavaScript console 方法\"></a>JavaScript console 方法</h1><h3 id=\"1-table\"><a href=\"#1-table\" class=\"headerlink\" title=\"1. table()\"></a>1. table()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cars = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">120</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;yellow&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"attr\">maxSpeed</span>: <span class=\"number\">160</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/image.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-assert\"><a href=\"#2-assert\" class=\"headerlink\" title=\"2. assert()\"></a>2. assert()</h3><p>console.assert() 非常适合调试目的，它接收断言，并在断言为 false 时向控制台写入错误信息。但如果是 true ，则不会发生任何事情:</p>\n<p><img src=\"/image-1.png\" alt=\"Alt text\"></p>\n<h3 id=\"3-trace\"><a href=\"#3-trace\" class=\"headerlink\" title=\"3. trace()\"></a>3. trace()</h3><p>console.trace() 可以帮助您在调用它的位置输出当前堆栈跟踪。例如</p>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"></p>\n<h3 id=\"4-error\"><a href=\"#4-error\" class=\"headerlink\" title=\"4. error()\"></a>4. error()</h3><p><img src=\"/image-3.png\" alt=\"Alt text\"></p>\n<h3 id=\"5-warn\"><a href=\"#5-warn\" class=\"headerlink\" title=\"5. warn()\"></a>5. warn()</h3><p><img src=\"/image-4.png\" alt=\"Alt text\"></p>\n<h3 id=\"6-count-和-countReset\"><a href=\"#6-count-和-countReset\" class=\"headerlink\" title=\"6. count() 和 countReset()\"></a>6. count() 和 countReset()</h3><p><img src=\"/image-5.png\" alt=\"Alt text\"></p>\n<p><img src=\"/image-6.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>countReset() 方法将标签的计数设回零。</p>\n</blockquote>\n<p><img src=\"/image-7.png\" alt=\"Alt text\"></p>\n<h3 id=\"7-time-timeEnd-and-timeLog\"><a href=\"#7-time-timeEnd-and-timeLog\" class=\"headerlink\" title=\"7. time(), timeEnd(), and timeLog()\"></a>7. time(), timeEnd(), and timeLog()</h3><p><img src=\"/image-8.png\" alt=\"Alt text\"></p>\n<h3 id=\"8-clear\"><a href=\"#8-clear\" class=\"headerlink\" title=\"8. clear()\"></a>8. clear()</h3><p>console.clear() 通过清除日志来清除控制台中的杂乱信息。</p>\n<h3 id=\"9-group-groupCollapsed-and-groupEnd\"><a href=\"#9-group-groupCollapsed-and-groupEnd\" class=\"headerlink\" title=\"9. group(), groupCollapsed(), and groupEnd()\"></a>9. group(), groupCollapsed(), and groupEnd()</h3><p><img src=\"/image-9.png\" alt=\"Alt text\"></p>\n<p><img src=\"/image-10.png\" alt=\"Alt text\"></p>\n<h3 id=\"10-dir\"><a href=\"#10-dir\" class=\"headerlink\" title=\"10. dir()\"></a>10. dir()</h3><p><img src=\"/image-11.png\" alt=\"Alt text\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clkpywdll000336l158la2h3x","category_id":"clkpywdls000c36l11yy6dl5a","_id":"clkpywdly000q36l1co3b28kn"},{"post_id":"clkpywdlp000736l14ygs49ez","category_id":"clkpywdlw000k36l1h2hg6bfx","_id":"clkpywdm2000y36l1bx9ib3xp"},{"post_id":"clkpywdlq000936l16xwdgqwf","category_id":"clkpywdls000c36l11yy6dl5a","_id":"clkpywdm4001336l1cnnthleg"},{"post_id":"clkpywdlr000b36l1b4gteu1r","category_id":"clkpywdm2000x36l16hk74tv7","_id":"clkpywdm6001936l16s2rgiem"},{"post_id":"clkpywdm6001836l11bjf39vf","category_id":"clkpywdls000c36l11yy6dl5a","_id":"clkpywdm9001h36l1bqj22ckt"},{"post_id":"clkpywdlt000f36l1hmxg07k9","category_id":"clkpywdm5001536l14uc68lfy","_id":"clkpywdmc001m36l1axw18vsx"},{"post_id":"clkpywdlv000i36l1e8wu041c","category_id":"clkpywdm2000x36l16hk74tv7","_id":"clkpywdmd001p36l1fpn346f0"},{"post_id":"clkpywdm0000t36l12ofk8nd3","category_id":"clkpywdmd001q36l178m4gm7n","_id":"clkpywdmh002436l1fiex0k9e"},{"post_id":"clkpywdm1000v36l1a60hdg3m","category_id":"clkpywdmd001q36l178m4gm7n","_id":"clkpywdmi002736l16pkwel2c"},{"post_id":"clkpywdm3001036l1anhff2k4","category_id":"clkpywdmh002336l133lj6z9k","_id":"clkpywdmi002c36l1eic3fif4"},{"post_id":"clkpywdm4001236l137txeois","category_id":"clkpywdmi002936l16dfoa5ss","_id":"clkpywdmj002h36l13bmmbdef"},{"post_id":"clkpywdm7001b36l18h73g7p1","category_id":"clkpywdmj002g36l19chs8a3z","_id":"clkpywdml002o36l1btcaaz64"},{"post_id":"clkpywdm8001e36l1bz0p5z4b","category_id":"clkpywdmk002k36l1drn9gw6u","_id":"clkpywdmm002u36l16tx546wm"},{"post_id":"clkpywdmb001l36l11ijiebm8","category_id":"clkpywdmm002v36l10v9x2s8n","_id":"clkpywdmn003336l12hqjb4km"},{"post_id":"clkpywdmc001o36l15d7rde91","category_id":"clkpywdmn003036l18rmebvwr","_id":"clkpywdmo003936l1gd1r04we"},{"post_id":"clkpywdme001s36l15f9g7t41","category_id":"clkpywdmm002v36l10v9x2s8n","_id":"clkpywdmp003b36l13meqb2zu"},{"post_id":"clkpywdly000o36l123y13cbt","category_id":"clkpywdmd001q36l178m4gm7n","_id":"clkpywdmq003g36l1a4db37au"},{"post_id":"clkpywdly000o36l123y13cbt","category_id":"clkpywdmo003836l1gcvk9uij","_id":"clkpywdmq003i36l10nw6fgrs"},{"post_id":"clkpywdme001u36l1844jajj4","category_id":"clkpywdmp003c36l1a6qhduao","_id":"clkpywdmq003l36l1fuh83tq3"},{"post_id":"clkpzm7oj0000aul116ykboll","category_id":"clkpywdm9001i36l10n2hc16h","_id":"clkpzm7om0005aul19xw4ht13"},{"post_id":"clkpzm7ok0001aul1gmbs8219","category_id":"clkpywdmi002936l16dfoa5ss","_id":"clkpzm7om0007aul19j5oc0ar"},{"post_id":"clkpzm7ol0003aul1cnmkeugr","category_id":"clkpywdml002q36l1b0lrb1rr","_id":"clkpzm7on0009aul1g6d72ajh"},{"post_id":"clkqdvm4d00004ol1b6hvajkt","category_id":"clkpywdls000c36l11yy6dl5a","_id":"clkqdvm4l00024ol165rqarrg"},{"post_id":"clm75clqw0000jxljche8am3a","category_id":"clm75niel0001jxljbu77eapw","_id":"clm75niep0004jxljd38y4m15"},{"post_id":"clm75s8ab0005jxlj180h4xqn","category_id":"clm76cord0006jxljgvn9e554","_id":"clm76cori0009jxljbayufd3t"},{"post_id":"clm77n49s000ajxlj56vh6183","category_id":"clm75niel0001jxljbu77eapw","_id":"clm77w7cz000cjxlj5mm49nhk"},{"post_id":"clm7jis3s000kjxlje2kb8bgk","category_id":"clkpywdmd001q36l178m4gm7n","_id":"clm7jis3w000mjxlj97o8hgtj"}],"PostTag":[{"post_id":"clkpywdlr000b36l1b4gteu1r","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdlu000g36l10p6hdt2u"},{"post_id":"clkpywdlv000i36l1e8wu041c","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdm1000u36l1ehh86xi5"},{"post_id":"clkpywdll000336l158la2h3x","tag_id":"clkpywdlw000l36l1hcba7gld","_id":"clkpywdm2000w36l1h8966diu"},{"post_id":"clkpywdlp000736l14ygs49ez","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdm4001136l15v8vhy3o"},{"post_id":"clkpywdlq000936l16xwdgqwf","tag_id":"clkpywdlw000l36l1hcba7gld","_id":"clkpywdm6001736l1enxfgykh"},{"post_id":"clkpywdlt000f36l1hmxg07k9","tag_id":"clkpywdm4001436l10f404vwq","_id":"clkpywdm8001d36l12x6oaryz"},{"post_id":"clkpywdm6001836l11bjf39vf","tag_id":"clkpywdlw000l36l1hcba7gld","_id":"clkpywdm8001f36l1bi900lcj"},{"post_id":"clkpywdly000o36l123y13cbt","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdme001t36l11qfs0bur"},{"post_id":"clkpywdly000o36l123y13cbt","tag_id":"clkpywdm9001j36l14vq00k7n","_id":"clkpywdmf001v36l1baz1hn5g"},{"post_id":"clkpywdm0000t36l12ofk8nd3","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdmh002136l13xuwbo5l"},{"post_id":"clkpywdm0000t36l12ofk8nd3","tag_id":"clkpywdm9001j36l14vq00k7n","_id":"clkpywdmh002236l16aey26y7"},{"post_id":"clkpywdm0000t36l12ofk8nd3","tag_id":"clkpywdmf001x36l132bzerd6","_id":"clkpywdmh002636l1aqoqc59q"},{"post_id":"clkpywdm1000v36l1a60hdg3m","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdmi002a36l15tschqst"},{"post_id":"clkpywdm1000v36l1a60hdg3m","tag_id":"clkpywdm9001j36l14vq00k7n","_id":"clkpywdmi002b36l16eks197a"},{"post_id":"clkpywdm1000v36l1a60hdg3m","tag_id":"clkpywdmf001x36l132bzerd6","_id":"clkpywdmj002f36l16o8jfym9"},{"post_id":"clkpywdm3001036l1anhff2k4","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdml002m36l12fxo9v37"},{"post_id":"clkpywdm3001036l1anhff2k4","tag_id":"clkpywdmi002836l16pmxfg8o","_id":"clkpywdml002n36l17lbrfc1u"},{"post_id":"clkpywdm3001036l1anhff2k4","tag_id":"clkpywdmj002d36l1h8bvckic","_id":"clkpywdml002r36l1cxy83pfx"},{"post_id":"clkpywdm3001036l1anhff2k4","tag_id":"clkpywdmk002i36l1h6032cgb","_id":"clkpywdmm002s36l1ejrxftjl"},{"post_id":"clkpywdm4001236l137txeois","tag_id":"clkpywdmk002i36l1h6032cgb","_id":"clkpywdmm002w36l14lmv587c"},{"post_id":"clkpywdm7001b36l18h73g7p1","tag_id":"clkpywdmm002t36l18kkc05l2","_id":"clkpywdmn003136l179q63yiv"},{"post_id":"clkpywdm8001e36l1bz0p5z4b","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdmo003536l18dia6vbf"},{"post_id":"clkpywdm8001e36l1bz0p5z4b","tag_id":"clkpywdmm002y36l1ajxc8xkd","_id":"clkpywdmo003636l17zp19enu"},{"post_id":"clkpywdmb001l36l11ijiebm8","tag_id":"clkpywdmp003a36l19k4cbbsm","_id":"clkpywdmq003j36l1erwg9hhh"},{"post_id":"clkpywdmc001o36l15d7rde91","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpywdmq003m36l1dw90gfou"},{"post_id":"clkpywdmc001o36l15d7rde91","tag_id":"clkpywdmp003f36l19l3i0tmi","_id":"clkpywdmq003n36l1093v6tkv"},{"post_id":"clkpywdme001s36l15f9g7t41","tag_id":"clkpywdmp003a36l19k4cbbsm","_id":"clkpywdmr003p36l14fx3akkj"},{"post_id":"clkpywdme001u36l1844jajj4","tag_id":"clkpywdmr003o36l16irk0z2c","_id":"clkpywdmr003q36l15g3kbycn"},{"post_id":"clkpzm7oj0000aul116ykboll","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpzm7ol0002aul1c8i3812o"},{"post_id":"clkpzm7oj0000aul116ykboll","tag_id":"clkpywdm6001a36l18alnal03","_id":"clkpzm7om0004aul1begyc61l"},{"post_id":"clkpzm7ok0001aul1gmbs8219","tag_id":"clkpywdmk002i36l1h6032cgb","_id":"clkpzm7om0006aul1dqaqbl2c"},{"post_id":"clkpzm7ol0003aul1cnmkeugr","tag_id":"clkpywdlo000536l15ez80e7d","_id":"clkpzm7om0008aul13ogjgzdj"},{"post_id":"clkpzm7ol0003aul1cnmkeugr","tag_id":"clkpywdmj002d36l1h8bvckic","_id":"clkpzm7on000aaul1cog6f61u"},{"post_id":"clkpzm7ol0003aul1cnmkeugr","tag_id":"clkpywdmo003736l1axw206ux","_id":"clkpzm7on000baul1hv3xdskm"},{"post_id":"clkqdvm4d00004ol1b6hvajkt","tag_id":"clkpywdlw000l36l1hcba7gld","_id":"clkqdvm4k00014ol15ci82blk"},{"post_id":"clm75clqw0000jxljche8am3a","tag_id":"clm75nieo0002jxljblfwal4e","_id":"clm75niep0003jxljctri3zar"},{"post_id":"clm75s8ab0005jxlj180h4xqn","tag_id":"clm76cori0007jxlj2ewifpcr","_id":"clm76cori0008jxljab1515i1"},{"post_id":"clm77n49s000ajxlj56vh6183","tag_id":"clm75nieo0002jxljblfwal4e","_id":"clm77w7cx000bjxlj6u9meui5"},{"post_id":"clm7jis3s000kjxlje2kb8bgk","tag_id":"clkpywdm9001j36l14vq00k7n","_id":"clm7jis3w000ljxljbljh9qrt"}],"Tag":[{"name":"前端","_id":"clkpywdlo000536l15ez80e7d"},{"name":"V8","_id":"clkpywdls000d36l1f7iedc78"},{"name":"Vue深入","_id":"clkpywdlw000l36l1hcba7gld"},{"name":"运维","_id":"clkpywdm4001436l10f404vwq"},{"name":"react-dnd","_id":"clkpywdm6001a36l18alnal03"},{"name":"JavaScript","_id":"clkpywdm9001j36l14vq00k7n"},{"name":"skill","_id":"clkpywdmf001x36l132bzerd6"},{"name":"项目","_id":"clkpywdmi002836l16pmxfg8o"},{"name":"Vue","_id":"clkpywdmj002d36l1h8bvckic"},{"name":"vite","_id":"clkpywdmk002i36l1h6032cgb"},{"name":"随笔","_id":"clkpywdmm002t36l18kkc05l2"},{"name":"手写","_id":"clkpywdmm002y36l1ajxc8xkd"},{"name":"前端性能优化","_id":"clkpywdmo003736l1axw206ux"},{"name":"实习学习","_id":"clkpywdmp003a36l19k4cbbsm"},{"name":"错题集","_id":"clkpywdmp003f36l19l3i0tmi"},{"name":"项目实战","_id":"clkpywdmr003o36l16irk0z2c"},{"name":"个人学习","_id":"clm75nieo0002jxljblfwal4e"},{"name":"vue","_id":"clm76cori0007jxlj2ewifpcr"},{"name":"util函数","_id":"clm7chtd2000fjxlj07ch6ars"}]}}